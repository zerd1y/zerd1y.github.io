<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>static (Java)</title>
      <link href="/2025/02/09/2025-2-9-static-Java/"/>
      <url>/2025/02/09/2025-2-9-static-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a><em>static</em></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">//静态变量 多线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score; <span class="comment">//非静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        <span class="comment">//System.out.println(Student.score);报错</span></span><br><span class="line">        System.out.println(stu_1.age);</span><br><span class="line">        System.out.println(stu_1.score);</span><br><span class="line"></span><br><span class="line">        go();</span><br><span class="line">        <span class="comment">//run();报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名代码块 赋初始值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块 只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        静态代码块</span></span><br><span class="line"><span class="comment">        匿名代码块</span></span><br><span class="line"><span class="comment">        构造方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        匿名代码块</span></span><br><span class="line"><span class="comment">        构造方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line"></span><br><span class="line">        System.out.println(random());</span><br><span class="line"></span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内部类 (Java)</title>
      <link href="/2025/02/09/2025-2-9-%E5%86%85%E9%83%A8%E7%B1%BB-Java/"/>
      <url>/2025/02/09/2025-2-9-%E5%86%85%E9%83%A8%E7%B1%BB-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li>内部类就是在一个类的内部再定义一个类：比如，A类中定义一个B类，那么B类相对于A类来说就成为内部类，而A类相对B类来说就是外部类了。</li></ul><ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner Method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得外部类的私有属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个java类中可以有多个class类，但只能有一个public class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo10.Outer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.getID(); <span class="comment">//18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类：没有名字初始化类，不用讲实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象类 (Java)</title>
      <link href="/2025/02/09/2025-2-9-%E6%8A%BD%E8%B1%A1%E7%B1%BB-Java/"/>
      <url>/2025/02/09/2025-2-9-%E6%8A%BD%E8%B1%A1%E7%B1%BB-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ol><li>不能new抽象类，只能靠子类去实现它（约束）</li><li>抽象类中可以写普通的方法</li><li>抽象方法必须在抽象类中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract 抽象类：类 extends 单继承 （接口可以多继承）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//约束：有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract 抽象方法：只有方法名字，没有方法的实现</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承的子类必须实现抽象类的方法（重写）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口 (Java)</title>
      <link href="/2025/02/09/2025-2-9-%E6%8E%A5%E5%8F%A3-Java/"/>
      <url>/2025/02/09/2025-2-9-%E6%8E%A5%E5%8F%A3-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li><p>普通类：只有具体实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有</p></li><li><p>接口：只有规范</p></li><li><p>接口的本质是契约，制定好后大家遵守</p></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>约束</li><li>定义一些方法，让不同的人实现</li><li>方法：public abstract</li><li>常量：public static final</li><li>接口不能被实例化，接口中没有构造方法</li><li>implement可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><p>example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface 定义的关键字,接口都需要有实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//常量 public static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中的所有定义都是抽象的 public abstract</span></span><br><span class="line">    <span class="comment">//增删改查</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类 extends</span></span><br><span class="line"><span class="comment">//类 可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类，需要重写接口中的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承：利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>, TimeService&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装、继承、多态 (Java)</title>
      <link href="/2025/02/07/2025-2-7-%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81-Java/"/>
      <url>/2025/02/07/2025-2-7-%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="该露的露，该藏的藏"><a href="#该露的露，该藏的藏" class="headerlink" title="该露的露，该藏的藏"></a>该露的露，该藏的藏</h3><ul><li>程序设计要追求**”高内聚，低耦合”**。高内聚：类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li></ul><h3 id="封装（数据的隐藏）"><a href="#封装（数据的隐藏）" class="headerlink" title="封装（数据的隐藏）"></a>封装（数据的隐藏）</h3><ul><li>通常应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息的隐藏</li></ul><h3 id="属性私有-get-set"><a href="#属性私有-get-set" class="headerlink" title="属性私有 get &#x2F; set"></a>属性私有 get &#x2F; set</h3><p>example：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些 public 的get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get获取这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set为这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alt + insert -&gt; Getter and Setter</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span> || age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The age is illegal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s1.setName(<span class="string">&quot;Xiao Jinghuai&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line"></span><br><span class="line">        s1.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(s1.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>提高程序安全性，保护数据</li><li>隐藏代码实现细节</li><li>统一接口</li><li>增加系统可维护性</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>本质：对某一类的抽象，实现对现实世界更好的建模</p></li><li><p><strong>extends</strong>的意思是“扩展”。子类是父类的扩展</p></li><li><p>JAVA中只有单继承，没有多继承</p></li></ul><p>继承是类和类之间的一种关系。除此外，类和类间的关系还有依赖、组合、聚合等</p><p>继承关系的两个类，一个为子类，一个为父类。子类继承父类，使用关键词extends表示</p><ul><li>object类</li><li>super</li><li>方法重写</li></ul><p>example：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo04;</span><br><span class="line"><span class="comment">//Person 人：父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//public</span></span><br><span class="line">    <span class="comment">//protected</span></span><br><span class="line">    <span class="comment">//default</span></span><br><span class="line">    <span class="comment">//private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo04;</span><br><span class="line"><span class="comment">//学生 is 人：子类</span></span><br><span class="line"><span class="comment">//子类继承父类，拥有父类的全部方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//ctrl + h</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo04.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        stu_1.say();</span><br><span class="line">        System.out.println(stu_1.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ol><h4 id="super-和-this"><a href="#super-和-this" class="headerlink" title="super 和 this"></a>super 和 this</h4><ol><li>代表的对象不同：<ul><li>this：本身调用者这个对象</li><li>super：代表父类对象的应用</li></ul></li><li>前提：<ul><li>this：没有继承也可以使用</li><li>super：只能在继承条件下使用</li></ul></li><li>构造方法：<ul><li>this()：本类的构造</li><li>super()：父类的构造</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="comment">/*extends Object*/</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person Parameterless execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Xiao Jinghuai&quot;</span>;</span><br><span class="line">    <span class="comment">// private的东西无法被继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//隐藏代码：调用了父类的无参构造</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Student Parameterless execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zerd1y&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        print(); <span class="comment">//Student</span></span><br><span class="line">        <span class="built_in">this</span>.print(); <span class="comment">//Student</span></span><br><span class="line">        <span class="built_in">super</span>.print(); <span class="comment">//Person</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name); <span class="comment">//zerd1y</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name); <span class="comment">//zerd1y</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name); <span class="comment">//Xiao Jinghuai</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo05.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        stu_0.test1();</span><br><span class="line">        stu_0.test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><h4 id="重写：需要有继承关系，子类重写父类的方法"><a href="#重写：需要有继承关系，子类重写父类的方法" class="headerlink" title="重写：需要有继承关系，子类重写父类的方法"></a>重写：需要有继承关系，子类重写父类的方法</h4><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小 public &gt; protected &gt; default &gt; private</li><li>抛出异常：范围可以缩小但不能扩大 Exception &gt; ClassNotFoundException</li><li>子类的方法和父类要一致，方法体不同</li></ol><h4 id="为什么需要重写"><a href="#为什么需要重写" class="headerlink" title="为什么需要重写"></a>为什么需要重写</h4><ol><li>父类的功能，子类不一定需要 &#x2F; 不一定满足</li><li>Alt + Insert：override</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B_B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Override重写</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//注解：有功能的注释</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A_A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo05.A;</span><br><span class="line"><span class="keyword">import</span> oop.demo05.B;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态方法：只看左边（类加载时确定）</span></span><br><span class="line"><span class="comment">//非静态：重写：子类重写了父类的方法（public）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法的调用只和左边（定义的数据类型）有关</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test1(); <span class="comment">// A</span></span><br><span class="line">        a.test2(); <span class="comment">// A_A</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test1(); <span class="comment">// B</span></span><br><span class="line">        b.test2(); <span class="comment">// A_A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>同一方法可以根据发送对象的不同而采用多种不同的行为方式</li><li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类，有关系的类）</li><li>多态存在的条件：<ol><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ol></li><li>注意：多态是方法的多态，属性没有多态性</li><li>instanceof 类型转换 引用类型</li></ul><p>example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo06.Person;</span><br><span class="line"><span class="keyword">import</span> oop.demo06.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(); <span class="comment">//父类型，指向子类，但是不能调用子类独有的方法。同名方法：有重写调重写</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s1.say(); <span class="comment">//Student</span></span><br><span class="line">        s2.say(); <span class="comment">//Student 子类重写了父类的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象能执行哪些方法，看对象左边类型</span></span><br><span class="line">        s1.run(); <span class="comment">//run</span></span><br><span class="line">        <span class="comment">//s2.run(); //报错</span></span><br><span class="line">        ((Student)s2).run(); <span class="comment">//run(强制转换)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态注意事项"><a href="#多态注意事项" class="headerlink" title="多态注意事项"></a>多态注意事项</h3><ol><li><p>多态是方法的多态，属性没有多态</p></li><li><p>父类和子类，有联系 类型转换异常 ClassCastException</p></li><li><p>存在条件：继承关系 方法需重写 父类引用指向子类 Father f1 &#x3D; new Son();</p><p>无法重写：</p><ul><li><em>static</em>：静态方法：属于类，它不属于实例</li><li><em>final</em>：常量</li><li><em>private</em></li></ul></li></ol><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><em>instanceof</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo06.Person;</span><br><span class="line"><span class="keyword">import</span> oop.demo06.Student;</span><br><span class="line"><span class="keyword">import</span> oop.demo06.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Object &gt; String</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="comment">// X instanceof Y: XY存在父子关系，则编译通过</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher); <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher); <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String); 编译报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher); 编译报错</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String); 编译报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>父类引用子类的对象</li><li>子类转父类，向上转型</li><li>父类转子类，向下转型，强制转换</li><li>方便方法调用，减少重复代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo06.Person;</span><br><span class="line"><span class="keyword">import</span> oop.demo06.Student;</span><br><span class="line"><span class="keyword">import</span> oop.demo06.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型转换</span></span><br><span class="line">        <span class="comment">//高                  低</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        ((Student)student).run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类转换为父类，可能会丢失方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student1.run();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> student1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象 (Java)</title>
      <link href="/2025/02/05/2025-2-5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-Java/"/>
      <url>/2025/02/05/2025-2-5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="面向过程-面向对象"><a href="#面向过程-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><ul><li>步骤清晰简单，第一步做什么，第二步做什么…</li><li>适合处理较简单的问题</li></ul><h3 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><strong>分类</strong>的思维模式，先解决问题需要哪些分类，然后对分类进行单独思考。最后对某个分类下的细节进行面向过程的思索</li><li>适合处理复杂的问题，需要多人协作的问题</li></ul><ol><li>对于复杂的事物，为了从宏观上、整体上分析，需要使用面向对象</li><li>具体到微观操作，仍需要面向过程</li></ol><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul><li><p>面向对象编程（Object-Orien Programming，OOP）</p></li><li><p>本质：<strong>以类的方式组织代码，以对象的方式封装数据</strong></p></li><li><p><strong>抽象思维</strong></p></li><li><p>三大特性：</p><p><strong>封装</strong></p><p><strong>继承</strong></p><p><strong>多态</strong></p></li><li><p>从认识的角度：现有对象后有类。对象，是具体的事物。类，是抽象的，是对象的抽象</p></li><li><p>从代码运行的角度：先有类后有对象。类，是对象的模板</p></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法的定义：</p><ul><li>修饰符</li><li>返回类型</li><li>break 和 return 的区别</li><li>方法名：驼峰命名</li><li>参数列表：（参数列表，参数名）</li><li>异常抛出</li></ul><p>方法的调用：</p><ul><li>静态方法</li><li>非静态方法</li><li>形参和实参</li><li>值传递（Java）和引用传递</li><li>this关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">        Demo02.change(a);</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"><span class="comment">//引用传递：对象，本质还是值传递</span></span><br><span class="line"><span class="comment">//对象，内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(man.name); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        Demo03.change(man);</span><br><span class="line">        System.out.println(man.name); <span class="comment">// Xiao Jinghuai</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person human)</span> &#123;</span><br><span class="line">        <span class="comment">// human是一个对象：指向-&gt;Person human = new Person()。这是一个具体的人，可以改变属性</span></span><br><span class="line">        human.name = <span class="string">&quot;Xiao Jinghuai&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个Person类，有一个属性：name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name; <span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建于初始化对象"><a href="#创建于初始化对象" class="headerlink" title="创建于初始化对象"></a>创建于初始化对象</h2><ul><li><strong>使用new关键字创建对象</strong></li><li>使用new关键字创建的时候，除了分配内存空间之外，还会 创建好的对象进行<strong>默认的初始化</strong>以及对类中<strong>构造器的调用</strong></li><li>类中的构造器也成为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两点：<ol><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ol></li></ul><p>example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo02;</span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;is studying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo02;</span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是一个Student类的具体实例</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        student_1.name = <span class="string">&quot;Xiao Jinghuai&quot;</span>;</span><br><span class="line">        student_1.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">        student_2.name = <span class="string">&quot;zerd1y&quot;</span>;</span><br><span class="line">        student_2.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(student_1.name);</span><br><span class="line">        System.out.println(student_2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h3><ol><li>和类名相同</li><li>没有返回值</li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>new本质在调用构造器</li><li>初始化对象的值</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>定义有参构造后，如果想使用无参构造，显示的定义一个无参构造</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 一个类即使什么都不写，也会存在一个方法</span></span><br><span class="line">    <span class="comment">// 显示的定义构造器</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop.demo02;</span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jinghuai Xiao&quot;</span>);</span><br><span class="line">        System.out.println(person1.name);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zerd1y&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(person2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h3><p><img src="/../img/screenshot/memory_analyse.png" alt="内存分析"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组 (Java)</title>
      <link href="/2025/02/03/2025-2-3-%E6%95%B0%E7%BB%84-Java/"/>
      <url>/2025/02/03/2025-2-3-%E6%95%B0%E7%BB%84-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;  <span class="comment">//首选</span></span><br><span class="line"></span><br><span class="line">dataType arrayRefVar[];</span><br></pre></td></tr></table></figure><h2 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure><ul><li><p>获取数组长度</p><p><code>arrays.length</code></p></li><li><p>example:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers;</span><br><span class="line"></span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="/../img/screenshot/java_memory1.png" alt="内存"></p><p><img src="/../img/screenshot/java_memory2.png" alt="Java内存"></p><h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><ol><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>, <span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>数组的默认初始化</p><p>默认值为0</p></li></ol><ul><li><p>越界报错：</p><p><code>ArrayIndexOutofBounds</code></p></li><li><p>for-each循环：</p><p>输入<code>arrays.for</code>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> array : arrays) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] rows : array) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> number : rows) &#123;</span><br><span class="line">                System.out.println(number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li>工具类：java.util.Arrays</li><li>查看JDK帮助文档</li></ul><p>example：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.fill(a, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] sort_a = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort_a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                    tmp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>当一个数组中大部分元素为0，或为同一值的时候，可用稀疏数组保存该数组。</p><p>处理方式：</p><ul><li>记录数组有几行几列，有多少不同值</li><li>把有不同值元素的行列及值记录在一个小规模的数组中，缩小数组规模</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Original Array&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span> (anInt != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Value: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    array2[cnt][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[cnt][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[cnt][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Sparse array&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    + array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    + array2[i][<span class="number">2</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Restore&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span> [array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Output&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>可变参数 (Java)</title>
      <link href="/2025/02/02/2025-2-2-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0-Java/"/>
      <url>/2025/02/02/2025-2-2-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="可变参数（Java）"><a href="#可变参数（Java）" class="headerlink" title="可变参数（Java）"></a>可变参数（Java）</h1><ul><li>方法声名中，在指定参数类型后加一个省略号（…）</li><li><strong>一个方法中只能指定一个可变参数，且必须时方法的最后一个参数</strong>。任何普通参数必须在它之前声名。</li></ul><p>example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printMax(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="title class_">double</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(<span class="type">double</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt; result) &#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>code example：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h4><ol><li>代码文件所在位置代开命令行：</li></ol><p><img src="/../img/screenshot/terminal_pass_args.png" alt="打开文件"></p><ol start="2"><li>上方文件路径输入cmd：</li></ol><p><img src="/../img/screenshot/open_terminal.png" alt="打开命令行"></p><ol start="3"><li><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Demo03.java</span><br></pre></td></tr></table></figure><p>编译文件，生成Demo03.class文件</p></li></ol><h4 id="命令行传参，运行文件"><a href="#命令行传参，运行文件" class="headerlink" title="命令行传参，运行文件"></a>命令行传参，运行文件</h4><p>输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Demo03.java +参数</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/terminal_pass_args_demo.png" alt="运行"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>方法 (Java)</title>
      <link href="/2025/01/31/2025-1-31-%E6%96%B9%E6%B3%95-Java/"/>
      <url>/2025/01/31/2025-1-31-%E6%96%B9%E6%B3%95-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="方法-Java"><a href="#方法-Java" class="headerlink" title="方法 (Java)"></a>方法 (Java)</h1><p>什么是方法：</p><ul><li>语句的集合，它们在一起执行一个功能</li><li>包含于类或对象中</li><li>在程序中创建，在其他地方被引用</li></ul><p>设计方法的原则：<strong>原子性</strong>：</p><ul><li><strong>一个方法只完成1个功能，利于后期扩展</strong></li></ul><p>命名原则：驼峰原则</p><ul><li>例子：System.out.printIn()</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>类似于C语言中的函数，<strong>用来完成特定功能的代码片段</strong></p><p><strong>方法包含一个方法头和一个方法体</strong>，下面是一个方法的所有部分：</p><ul><li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li><li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li><li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><p>example：</p><p><img src="/../img/screenshot/method_java.png" alt="方法"></p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ul><li><p>调用方法：对象名.方法名（实参列表）</p></li><li><p>两种调用方式：</p><ol><li><p>方法返回一个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">larger</span> <span class="operator">=</span> max(<span class="number">30</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法返回void，用一条语句调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello, zerd1y&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>注：值传递（Java）和引用传递</p></li></ul><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p><p>规则：</p><ul><li><strong>方法名称相同</strong></li><li><strong>参数列表不同（个数不同，类型不同，参数排列顺序不同）</strong></li><li>返回类型可相同可不同</li><li>仅仅返回类型不同不足以成为方法的重载</li></ul><p>实现理论：</p><p>方法名称相同时，编译器会根据方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-ubuntu</title>
      <link href="/2025/01/30/2025-1-30-Linux-ubuntu/"/>
      <url>/2025/01/30/2025-1-30-Linux-ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-ubuntu"><a href="#Linux-ubuntu" class="headerlink" title="Linux-ubuntu"></a>Linux-ubuntu</h1><p>也是开启了我的 Windows-Linux双系统 哈哈哈</p><p>指导视频：</p><p>[指导视频](<a href="https://www.bilibili.com/video/BV1Cc41127B9?spm_id_from=333.788.videopod.episodes&vd_source=576643da9ada88d09d6bb8cd5b9f4066">Windows11 安装 Ubuntu 避坑指南_哔哩哔哩_bilibili</a>)</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><ul><li><p>第一次装会很费力，遇到问题：</p><ol><li><p>b站找视频：（通用的安装教程、针对你笔记本品牌型号的操作视频  都要看看）</p></li><li><p>b站视频下方的评论区：说不定有大神是你的笔记本型号的，会在评论区发布一些针对你笔记本的tips</p><p>（上方指导视频下方有个用华硕的大神评论帮助了我很多嘻嘻）</p></li><li><p>CSDN搜一搜（不喜欢掘金，不想用StackOverflow哈哈哈）</p></li><li><p>问chatgpt&#x2F;claude&#x2F;deepseek&#x2F;通义千问&#x2F;豆包&#x2F;kimi</p></li></ol></li><li><p>为什么要装Linux：</p><p>下面会提到哦！</p><p>不过计算机专业的学生迟早都要接触Linux的啦，无论是做开发还是算法，Linux在开源和性能方面一直很强</p></li><li><p>真的不行就去电脑市场装吧，电脑变砖我可不负责</p></li><li><p>一些特定的步骤我会用 ‘* ’标注：</p><ol><li>这些步骤可能是安装过程试错出来的</li><li>针对华硕天选5pro</li></ol></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>笔记本 ：</p><ul><li>我用的是华硕天选5pro（Windows11）</li></ul></li><li><p>U盘：</p><ul><li><p>牌子：金士顿或者闪迪（牌子太烂可能在写入文件&#x2F;格式化的时候U盘直接报废）</p></li><li><p>大于8GB</p></li><li><p>我用的64GB，因为之后可能还会往U盘里装文件</p></li></ul></li></ol><h2 id="小提示"><a href="#小提示" class="headerlink" title="*小提示"></a>*小提示</h2><ol><li><p>Windows机安装Linux有两种方法：</p><ul><li>虚拟机安装</li><li>双系统安装（需要额外准备U盘启动）</li></ul></li><li><p>虚拟机安装：</p><ul><li>优点：简单（额其实装Linux系统都挺麻烦的，坑还多，虚拟机会相对简单些）</li><li>缺点：<ol><li>占用大量内存和CPU（其实2种方法都会占用挺多）</li><li><strong>对外部硬件支持不够好</strong>：如果你想跑深度学习，使用传感器，虚拟机无法充分发挥计算机的性能，效率相对较低</li></ol></li></ul></li><li><p>双系统安装：</p><ul><li>优点：性能相对好</li><li>缺点：<ol><li>操作相对麻烦</li><li>一台电脑同一个时间只能使用一个操作系统，Linux和Windows切换需要重启</li></ol></li></ul></li><li><p>我采用的使双系统安装，一方面使之后做项目导师会让我跑深度学习相关的，另一方面是目前我正在学习《视觉SLAM十四将》，书中比较推荐双系统</p></li></ol><h2 id="下载Ubuntu安装映像文件"><a href="#下载Ubuntu安装映像文件" class="headerlink" title="下载Ubuntu安装映像文件"></a>下载Ubuntu安装映像文件</h2><ol><li><p>直接搜索Ubuntu即可</p></li><li><p>或者点链接：[下载链接](<a href="https://cn.ubuntu.com/download/desktop">下载Ubuntu桌面系统 | Ubuntu</a>)</p></li></ol><p><strong>注意：</strong></p><ul><li>Ubuntu会一直更新，下载LTS版本即可</li><li>文件比较大，几个GB，如果下载速度慢请使用代理（魔法）</li></ul><h2 id="制作Ubuntu安装盘"><a href="#制作Ubuntu安装盘" class="headerlink" title="制作Ubuntu安装盘"></a>制作Ubuntu安装盘</h2><p>参考视频：(Bilibili)</p><p><a href="%5Bwin11%E4%B8%8B%E7%94%A8rufus%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1BP411577g/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066)">链接1</a></p><p>[链接2](<a href="https://www.bilibili.com/video/BV1wo4y177Gk?spm_id_from=333.788.videopod.sections&vd_source=576643da9ada88d09d6bb8cd5b9f4066">手把手教你安装双系统 windows11+ubuntu 22.04(1)_哔哩哔哩_bilibili</a>)</p><h3 id="下载Rufus"><a href="#下载Rufus" class="headerlink" title="*下载Rufus"></a>*下载Rufus</h3><p><em><strong>建议用Rufus写入文件，我之前用了win32diskimager写不进去</strong></em></p><p>直接搜索“rufus下载”：[链接](<a href="https://rufus.ie/zh/">Rufus - 轻松创建 USB 启动盘</a>)</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p><img src="/../img/screenshot/rufus.png" alt="Rufus写入"></p><ul><li>设备：U盘名称（或者其他的，总之不是你电脑上的CD什么盘）</li><li>引导类型选择：刚刚下载的Ubuntu映像文件</li><li>分区类型：GPT</li><li>文件系统：NTFS</li></ul><h2 id="关闭BitLocker"><a href="#关闭BitLocker" class="headerlink" title="关闭BitLocker"></a>关闭BitLocker</h2><p><em><strong>最怕的事情莫过于在操作时突然跳出BitLocker让你输入一串你不知道的密码</strong></em></p><p>BitLocker原本是用于电脑丢失时防止他人强行入侵系统窃取信息</p><p>但是如果你不自己查阅Microsoft官网给你的BitLocker并记住，BitLocker相当于是阻止你装Linux</p><p><em><strong>如果你不考虑丢电脑的事情，建议拿到电脑就关闭BitLocker，因为随着电脑文件越来越多，BitLocker解密的时间会越来越长</strong></em></p><h2 id="关闭独显直连"><a href="#关闭独显直连" class="headerlink" title="关闭独显直连"></a>关闭独显直连</h2><p>我没有进行这一步操作，没有出现什么问题。</p><p>这步操作属于小部分笔记本电脑的“坑”，如果在后面的操作出现问题，那可能是这里出现了问题</p><h2 id="压缩Windows分区"><a href="#压缩Windows分区" class="headerlink" title="压缩Windows分区"></a>压缩Windows分区</h2><p>我从D盘压缩了200GB</p><h2 id="开启安全引导（天选5pro）"><a href="#开启安全引导（天选5pro）" class="headerlink" title="*开启安全引导（天选5pro）"></a>*开启安全引导（天选5pro）</h2><ul><li><strong>不太确定其他电脑需不需这一步，天选5pro需要，否则之后的操作电脑可能会蓝屏</strong></li><li>操作链接<a href="https://blog.csdn.net/Kr_Krypton/article/details/135961324?fromshare=blogdetail&sharetype=blogdetail&sharerId=135961324&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">操作链接：第6、8步骤</a></li></ul><h2 id="关闭Secure-Boot安全启动"><a href="#关闭Secure-Boot安全启动" class="headerlink" title="*关闭Secure Boot安全启动"></a>*关闭Secure Boot安全启动</h2><ul><li><strong>很重要！不关闭的话就等着电脑蓝屏吧（因为我的电脑就蓝屏了呜呜）</strong></li><li>不同电脑BIOS操作不同，自己搜索对应视频一步一步来</li></ul><p>视频链接：[链接（天选5pro）](<a href="https://www.bilibili.com/video/BV1hR4y1p7tP/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066">华硕笔记本电脑开启&#x2F;关闭安全启动（Secure boot）方法；快速确认自己电脑TPM版本！_哔哩哔哩_bilibili</a>)</p><h3 id="华硕天选5pro操作"><a href="#华硕天选5pro操作" class="headerlink" title="华硕天选5pro操作"></a>华硕天选5pro操作</h3><ol><li>重启电脑，在快要跳出开机的logo时，疯狂按左上角ESC进入BIOS模式</li><li>进入 -高级设置-安全：<ul><li>你会发现很逆天的事情：安全启动开启，还没法关闭</li></ul></li><li>进入密钥管理（Key Management）：<ul><li>删除Platform Key（5pro是最上面的）</li><li>其他的也可以删除，反正我把第2个也删除了</li></ul></li><li>按F10保存并退出，重启时重复步骤1，发现安全启动关闭</li><li><em><strong>等到完全安装好后，可回到BIOS这里，把密钥回复出厂设置，这样删除的密钥就可以回来啦</strong></em></li><li><em><strong>完全安装好后，可以开启Secure Boot安全启动</strong></em></li></ol><h2 id="关闭Intel-RST（切换为AHCI）"><a href="#关闭Intel-RST（切换为AHCI）" class="headerlink" title="*关闭Intel RST（切换为AHCI）"></a>*关闭Intel RST（切换为AHCI）</h2><ul><li><strong>也很重要，否则Windows和Linux无法兼容</strong></li><li><em><strong>完全安装好后，也要保持关闭（切换为AHCI）！！！</strong></em></li><li>操作链接<a href="https://blog.csdn.net/Kr_Krypton/article/details/135961324?fromshare=blogdetail&sharetype=blogdetail&sharerId=135961324&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">操作链接：第6、8步骤</a></li></ul><h2 id="BIOS设置U盘引导"><a href="#BIOS设置U盘引导" class="headerlink" title="BIOS设置U盘引导"></a>BIOS设置U盘引导</h2><p>把U盘选项拖到Windows选项上面即可：</p><p><img src="/../img/screenshot/BIOS-U.png" alt="U盘引导"></p><h2 id="第一次启动U盘"><a href="#第一次启动U盘" class="headerlink" title="第一次启动U盘"></a>第一次启动U盘</h2><p>前面设置好后，按F10重启电脑</p><ul><li>无法重启 &#x2F; 卡住了，长按电源键强制重启</li><li>在logo页面一直跳动，拔掉U盘等待 &#x2F; 强制重启</li></ul><h2 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><p>参考视频操作即可：<a href="%5B%E5%AE%89%E8%A3%85Ubuntu%E7%9A%84%E8%BF%87%E7%A8%8B%E6%AD%A5%E9%AA%A4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1Cc41127B9?spm_id_from=333.788.videopod.episodes&vd_source=576643da9ada88d09d6bb8cd5b9f4066&p=13)">安装Ubuntu</a></p><ul><li><p>不联网实测会快一些</p></li><li><p>这个视频的操作算比较简单的了，也没有什么坑，如果碰到坑的话大概率是前面某个步骤在你的笔记本上没设置好。</p></li></ul><h2 id="连接Wi-Fi，更换国内镜像源"><a href="#连接Wi-Fi，更换国内镜像源" class="headerlink" title="连接Wi-Fi，更换国内镜像源"></a>连接Wi-Fi，更换国内镜像源</h2><ul><li>按照上面视频做就好</li><li>个人感觉设置后速度还是很慢，我挂代理了（还得是魔法）</li></ul><h2 id="系统时间同步"><a href="#系统时间同步" class="headerlink" title="系统时间同步"></a>系统时间同步</h2><p><strong>安装双系统后你会发现切换系统后，显示时间会不准确（比如慢8h）</strong></p><p>操作指南：[视频连接](<a href="https://www.bilibili.com/video/BV1kk4y1j7kY/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066">Linux WIndows双系统时间问题_哔哩哔哩_bilibili</a>)</p><ul><li><p>主要就是一行代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure><p>这行代码是把调整Ubuntu的时间调整正确，不改变Windows时间</p></li><li><p>如果切换回Windows发现时间不正确，进入Windows“日期和时间设置”-点击“立即同步”，</p><p>重新同步下Windows时间即可</p></li></ul><h2 id="至此基本的Windows-Linux双系统就安装完成啦"><a href="#至此基本的Windows-Linux双系统就安装完成啦" class="headerlink" title="至此基本的Windows-Linux双系统就安装完成啦"></a>至此基本的Windows-Linux双系统就安装完成啦</h2>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly 个人博客</title>
      <link href="/2025/01/29/2025-1-29-hexo-butterfly-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/01/29/2025-1-29-hexo-butterfly-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-butterfly-个人博客"><a href="#hexo-butterfly-个人博客" class="headerlink" title="hexo-butterfly 个人博客"></a>hexo-butterfly 个人博客</h1><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><ol><li><p>本地编辑完，本地部署3连：</p><ul><li>hexo clean</li><li>hexo generate</li><li>hexo server</li></ul></li><li><p>部署到vercel上自己的服务器：</p><p>先在个人blog文件夹用git bash打开</p><ul><li>hexo clean</li><li>hexo generate</li><li>hexo deploy</li></ul></li><li><p>background图片部署：</p><ul><li>用网页上的图片（不要用本地的相对地址，绝对地址）</li><li>直接在background后复制链接，不要在链接外面加url()</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尺取法（双指针）</title>
      <link href="/2025/01/28/2025-1-29-%E5%B0%BA%E5%8F%96%E6%B3%95/"/>
      <url>/2025/01/28/2025-1-29-%E5%B0%BA%E5%8F%96%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="尺取法（双指针）"><a href="#尺取法（双指针）" class="headerlink" title="尺取法（双指针）"></a>尺取法（双指针）</h1><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="%5B%E5%AD%97%E7%AC%A6%E4%B8%B2%5D(https://ac.nowcoder.com/acm/problem/18386)">题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">26</span>], ans = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; len; r++) &#123;</span><br><span class="line">ch[s[r] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">f</span>()) &#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">ch[s[l] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="尺取法的基本思想"><a href="#尺取法的基本思想" class="headerlink" title="尺取法的基本思想"></a>尺取法的基本思想</h3><ol><li><strong>初始化两个指针</strong>：通常是一个左指针（<code>left</code>）和一个右指针（<code>right</code>），初始时都指向数组的起始位置。</li><li><strong>移动右指针</strong>：扩展窗口，直到窗口内的元素满足某个条件。</li><li><strong>移动左指针</strong>：收缩窗口，直到窗口内的元素不再满足条件。</li><li><strong>重复上述步骤</strong>：直到右指针遍历完整个数组。</li></ol><h3 id="尺取法的适用场景"><a href="#尺取法的适用场景" class="headerlink" title="尺取法的适用场景"></a>尺取法的适用场景</h3><p>尺取法通常用于解决以下类型的问题：</p><ul><li>查找满足某种条件的最短或最长子数组。</li><li>计算满足某种条件的子数组的数量。</li><li>处理涉及连续子数组的问题。</li></ul><h2 id="Happy-New-Year！"><a href="#Happy-New-Year！" class="headerlink" title="Happy New Year！"></a>Happy New Year！</h2>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识SLAM</title>
      <link href="/2025/01/27/2025-1-27-%E5%88%9D%E8%AF%86SLAM/"/>
      <url>/2025/01/27/2025-1-27-%E5%88%9D%E8%AF%86SLAM/</url>
      
        <content type="html"><![CDATA[<h1 id="初识SLAM"><a href="#初识SLAM" class="headerlink" title="初识SLAM"></a>初识SLAM</h1><p><img src="/../img/slambook2_2-0.png" alt="初识SLAM"></p><h2 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h2><h3 id="单目相机"><a href="#单目相机" class="headerlink" title="单目相机"></a>单目相机</h3><ul><li><p>优点：结构简单，成本低</p></li><li><p>缺点：无法计算 深度 + 尺度</p><p>无法计算物体与相机间的距离，单目SLAM估计的轨迹和地图与真实值相差一个因子</p></li></ul><h3 id="双目相机"><a href="#双目相机" class="headerlink" title="双目相机"></a>双目相机</h3><ul><li>优点：克服深度问题（距离）</li><li>缺点：计算量大</li></ul><h3 id="深度相机（RGB-D相机）"><a href="#深度相机（RGB-D相机）" class="headerlink" title="深度相机（RGB-D相机）"></a>深度相机（RGB-D相机）</h3><ul><li>优点：节省计算资源（通过红外结构光&#x2F;Time-of-Flight（ToF））</li><li>缺点：测量范围窄，噪声大，视野小，易受日光干扰，无法测量透射材质</li></ul><h2 id="视觉SLAM的目标"><a href="#视觉SLAM的目标" class="headerlink" title="视觉SLAM的目标"></a>视觉SLAM的目标</h2><p><em><strong>通过一些图像，进行定位和地图构建</strong></em></p><h2 id="经典视觉SLAM框架"><a href="#经典视觉SLAM框架" class="headerlink" title="经典视觉SLAM框架"></a>经典视觉SLAM框架</h2><p><img src="/../img/SLAM_framework.png" alt="经典视觉SLAM框架"></p><h3 id="视觉里程计（前端）"><a href="#视觉里程计（前端）" class="headerlink" title="视觉里程计（前端）"></a>视觉里程计（前端）</h3><ul><li>目的：通过相邻帧间的图像，估计相机运动，回复场景的空间结构</li><li>问题：出现累计漂移（每次估计有误差）</li><li>解决：后端优化，回环检测</li></ul><h3 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h3><ul><li><p>目的：处理SLAM过程中的噪声问题</p><p>①如何从带有噪声的数据中估计整个系统的状态</p><p>②这个状态估计的不确定性有多大（最大后验概率估计）</p></li><li><p>本质：对运动主体自身和周围环境空间不确定性的估计</p></li></ul><h3 id="回环检测"><a href="#回环检测" class="headerlink" title="回环检测"></a>回环检测</h3><ul><li>目的：解决位置估计随时间漂移的问题</li><li>方法：让机器人具有识别到过的场景的能力（判断图像相似性），然后修正</li></ul><h3 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h3><h4 id="度量地图"><a href="#度量地图" class="headerlink" title="度量地图"></a>度量地图</h4><ul><li>特点：精确地表示地图中物体地的位置关系</li><li>缺点：耗费大量存储空间，许多细节无用，一致性问题</li></ul><h4 id="拓扑地图"><a href="#拓扑地图" class="headerlink" title="拓扑地图"></a>拓扑地图</h4><ul><li>特点：强调地图元素之间的关系</li><li>缺点：不擅长表达具有复杂结构的地图</li></ul><h2 id="SLAM问题的数学描述"><a href="#SLAM问题的数学描述" class="headerlink" title="SLAM问题的数学描述"></a>SLAM问题的数学描述</h2><p><img src="/../img/SLAM_math_description.png" alt="SLAM问题的数学描述"></p><h3 id="状态估计问题（转化）"><a href="#状态估计问题（转化）" class="headerlink" title="状态估计问题（转化）"></a>状态估计问题（转化）</h3><h4 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h4><ul><li>线性&#x2F;非线性系统</li><li>高斯&#x2F;非高斯系统</li></ul><h4 id="主流优化技术（优化技术明显优于滤波技术）"><a href="#主流优化技术（优化技术明显优于滤波技术）" class="headerlink" title="主流优化技术（优化技术明显优于滤波技术）"></a>主流优化技术（优化技术明显优于滤波技术）</h4><ul><li>图优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaDoc</title>
      <link href="/2025/01/26/2025-1-26-JavaDoc/"/>
      <url>/2025/01/26/2025-1-26-JavaDoc/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h1><ol><li><p>阿里巴巴Java开发手册：</p><p><a href="%5B%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B%E5%85%8D%E8%B4%B9%E5%9C%A8%E7%BA%BF%E9%98%85%E8%AF%BB_%E8%97%8F%E7%BB%8F%E9%98%81-%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E7%A4%BE%E5%8C%BA%5D(https://developer.aliyun.com/ebook/386/read?spm=a2c6h.26392459.ebook-detail.2.63392867wkBzZl)">阿里巴巴Java开发手册</a></p></li><li><p>JDK文档：</p><p>[JDK文档](<a href="https://docs.oracle.com/javase/8/docs/api/">Overview (Java Platform SE 8 )</a>)</p></li><li><p>参考代码：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pre_learn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jinghuai Xiao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> -0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2025/1/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doc</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Jinghuai Xiao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>命令行生成JavaDoc：</p><ol><li>打开该文件位置：</li></ol><p><img src="/../img/javadoc1.png" alt="IDEA中打开文件"></p><ol start="2"><li>上方输入cmd打开终端：</li></ol><p><img src="/../img/javadoc2.png" alt="打开终端"></p><ol start="3"><li>输入代码，进行编码：</li></ol><p>​      <code>javadoc -encoding UTF-8 -charset UTF-8 Doc.java</code></p><p><img src="/../img/javadoc3.png" alt="编码"></p><ol start="4"><li>查看文档：</li></ol><p><img src="/../img/javadoc4.png" alt="查看文档"></p></li><li><p>用IDEA生成JavaDoc：</p><p><a href="https://blog.csdn.net/qq_44122193/article/details/114789427?fromshare=blogdetail&sharetype=blogdetail&sharerId=114789427&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">用IDEA生成JavaDoc</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制：用户交互Scanner</title>
      <link href="/2025/01/26/2025-1-26-Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92Scanner/"/>
      <url>/2025/01/26/2025-1-26-Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92Scanner/</url>
      
        <content type="html"><![CDATA[<h1 id="Java流程控制：用户交互Scanner"><a href="#Java流程控制：用户交互Scanner" class="headerlink" title="Java流程控制：用户交互Scanner"></a>Java流程控制：用户交互Scanner</h1><ol><li><p>基本语法：</p><p><code>Scanner s = new Scanner(System.in);</code></p></li><li><p>输入：</p><p><code>scanner.next()</code></p><p><code>scanner.nextLine()</code></p></li><li><p>判断：</p><p><code>scanner.hasNext()</code></p><p><code>scanner.hasNextLine()</code></p></li><li><p>代码1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用next方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="comment">//使用next方式接收</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出内容为：&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用next方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="comment">//使用nextLine方式接收</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出内容为：&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，要养成好习惯关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>区别：</p><ul><li><code>scanner.next()</code>：不能得到带空格字符串</li><li><code>scanner.nextLine()</code>：可以获得空白</li></ul></li><li><p>代码3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从键盘中读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat()) &#123;</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble()) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">tmp</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            sum += tmp;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt + <span class="string">&quot;个数的和为：&quot;</span> + sum);</span><br><span class="line">        System.out.println(cnt + <span class="string">&quot;个数的平均数为：&quot;</span> + sum / cnt);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算（Java）</title>
      <link href="/2025/01/26/2025-1-26-%E4%BD%8D%E8%BF%90%E7%AE%97%EF%BC%88Java%EF%BC%89/"/>
      <url>/2025/01/26/2025-1-26-%E4%BD%8D%E8%BF%90%E7%AE%97%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符（Java）"><a href="#运算符（Java）" class="headerlink" title="运算符（Java）"></a>运算符（Java）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0011 1100</span></span><br><span class="line"><span class="comment">        B = 0000 1101</span></span><br><span class="line"><span class="comment">        -------------</span></span><br><span class="line"><span class="comment">        A&amp;B = 0000 1100    与：对应都1，结果为1</span></span><br><span class="line"><span class="comment">        A|B = 0011 1101    或：有一位为1，结果为1</span></span><br><span class="line"><span class="comment">        A^B = 0011 0001    异或：对应不同，结果为1</span></span><br><span class="line"><span class="comment">        ~B = 1111 0010     取反：0变1，1变0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2*8 = 16    2*2*2*2</span></span><br><span class="line"><span class="comment">        效率极高！！</span></span><br><span class="line"><span class="comment">        &lt;&lt; *2             左移</span></span><br><span class="line"><span class="comment">        &gt;&gt; /2             右移</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        0000 0000     0</span></span><br><span class="line"><span class="comment">        0000 0001     1</span></span><br><span class="line"><span class="comment">        0000 0010     2</span></span><br><span class="line"><span class="comment">        0000 0011     3</span></span><br><span class="line"><span class="comment">        0000 0100     4</span></span><br><span class="line"><span class="comment">        0000 1000     8</span></span><br><span class="line"><span class="comment">        0001 0000     16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串连接符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + a + b);</span><br><span class="line">        System.out.println(a + b + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>包机制</title>
      <link href="/2025/01/26/2025-1-26-%E5%8C%85%E6%9C%BA%E5%88%B6/"/>
      <url>/2025/01/26/2025-1-26-%E5%8C%85%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><ul><li><p><strong>包的本质：文件夹</strong></p></li><li><p><em><strong>一般利用公司域名倒置作为包名：</strong></em></p></li></ul><p>​       <code> www.baidu.com</code>   -&gt; <code>com.baidu.www</code></p><ul><li>语法格式：</li></ul><p>​       <code>package pkg1[.pkg2[.pkg3...]];</code></p><ul><li><p>调包：</p><p><code>import package1[.package2...].(classname|*)</code>;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变量 (Java)</title>
      <link href="/2025/01/25/2025-1-25-%E5%8F%98%E9%87%8F%EF%BC%88Java%EF%BC%89/"/>
      <url>/2025/01/25/2025-1-25-%E5%8F%98%E9%87%8F%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="变量（Java）"><a href="#变量（Java）" class="headerlink" title="变量（Java）"></a>变量（Java）</h1><ol><li><strong>局部变量</strong>：定义在方法、构造器或块（block）中的变量。它们的作用域仅限于该方法、构造器或块内部，并且必须在声明时初始化才能使用。</li><li><strong>成员变量（实例变量）</strong>：定义在类中，但在方法、构造器或任何块之外的变量。每个对象实例都有自己的一份成员变量副本，因此这些变量与对象的生命周期相同。</li><li><strong>静态变量（类变量）</strong>：也是定义在类中，但在方法、构造器或任何块之外，并且使用<code>static</code>关键字修饰的变量。无论创建了多少个类的对象，静态变量只有一个副本，被该类的所有实例共享。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">JI</span> <span class="operator">=</span> <span class="number">3.555</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：变量</span></span><br><span class="line">    <span class="comment">// 实例变量：从属于对象，默认值为 0 0.0 u0000 false</span></span><br><span class="line">    <span class="comment">// 除了基本类型，其余默认值为null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量，必须声名和初始化值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量类型 变量名 = new Demo03();</span></span><br><span class="line">        <span class="type">Demo03</span> <span class="variable">demo03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo03</span>();</span><br><span class="line">        System.out.println(demo03.age);</span><br><span class="line">        System.out.println(demo03.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类变量 static</span></span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-hello world</title>
      <link href="/2025/01/24/2025-1-24-hello-world/"/>
      <url>/2025/01/24/2025-1-24-hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Hello-World！"><a href="#Java-Hello-World！" class="headerlink" title="Java Hello World！"></a><em>Java</em> Hello World！</h1><ol><li>随便建一个文件夹，放代码</li><li>新建一个java文件：<ul><li>文件后缀为<code>.java</code></li><li><code>hello.java</code></li><li>【坑】系统可能没有显示文件后缀名，我们需要动手打开</li></ul></li><li>写代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.编译javac Java文件，会生成一个class文件</p><p>5.运行class文件</p><p><img src="/../img/java-hello%20world.png" alt="run_java"></p><h2 id="可能遇到的bug"><a href="#可能遇到的bug" class="headerlink" title="可能遇到的bug"></a>可能遇到的bug</h2><ol><li>单词大小写不能错，<strong>Java对大小写敏感</strong></li><li>尽量用英文</li><li>文件名和类名必须一致，且首字母大写</li><li>符号不能用中文</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习</title>
      <link href="/2025/01/23/2025-1-23-MarkDown%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/01/23/2025-1-23-MarkDown%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown学习"><a href="#MarkDown学习" class="headerlink" title="MarkDown学习"></a>MarkDown学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>支持到6级</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello, world!</strong></p><p><em>hello, world!</em></p><p><em><strong>hello, world!</strong></em></p><p><del>hello, world!</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>后端——Java</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><em>本地图片</em></p><p><img src="/../img/LofiSu1.jpg" alt="loacal_image"></p><p><em>网络图片</em></p><p><img src="https://i.pinimg.com/736x/6a/fd/1d/6afd1d8ae3f3cc7dc9baba8be29826a9.jpg" alt="web_image"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="%5Bzerd1y-blog%5D(https://www.zerd1y.com/)">点击跳转到我的博客</a></p><p><em>markdown无法直接跳转，但是写入网站可以跳转</em></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>有序号的排序</li><li>B</li><li>C</li></ol><ul><li>“-“号空格</li><li>B</li><li>C</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>name</th><th>sex</th><th>birthday</th></tr></thead><tbody><tr><td>zerd1y</td><td>male</td><td>2006.8.16</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>hello</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><h1 id="源码查看vscode-Markdown"><a href="#源码查看vscode-Markdown" class="headerlink" title="源码查看vscode&#x2F;Markdown"></a><em><strong>源码查看vscode&#x2F;Markdown</strong></em></h1>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 常用快捷键</title>
      <link href="/2025/01/23/2025-1-23-Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2025/01/23/2025-1-23-Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-常用快捷键"><a href="#Windows-常用快捷键" class="headerlink" title="Windows 常用快捷键"></a>Windows 常用快捷键</h1><ol><li>Ctrl+C：复制</li><li>Ctrl+V：粘贴</li><li>Ctrl+A：全选</li><li>Ctrl+X：剪切</li><li>Ctrl+Z：撤销</li><li>Ctrl+S：保存</li><li>Alt+F4：关闭窗口</li><li>Shift+DELET：永久删除（正常删除在回收站）</li><li>Ctrl+Shift+Esc &#x2F; 任务栏右键：打开任务管理器（死机必用）</li><li>Windows+R：运行（程序 &#x2F; 命令行）</li></ol><h1 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h1><ol><li>Ctrl+D：复制当前行到下一行（IntelliJ IDEA）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基本Dos命令</title>
      <link href="/2025/01/23/2025-1-23-%E5%9F%BA%E6%9C%ACDos%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/01/23/2025-1-23-%E5%9F%BA%E6%9C%ACDos%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="基本Dos命令"><a href="#基本Dos命令" class="headerlink" title="基本Dos命令"></a>基本Dos命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#盘符切换 e:</span></span><br><span class="line"><span class="comment">#查看当前目录所有文件 dir</span></span><br><span class="line"><span class="comment">#切换目录 cd (change directory)</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment">#切换上级目录</span></span><br><span class="line"><span class="comment">#推出终端 exit</span></span><br><span class="line"><span class="comment">#查看电脑ip ipconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开应用</span></span><br><span class="line">      calc 计算器</span><br><span class="line">      mspaint 画图</span><br><span class="line">      notepad 记事本</span><br><span class="line"><span class="comment">#ping 命令</span></span><br><span class="line">      ping www.baidu.com</span><br><span class="line"><span class="comment">#文件操作</span></span><br><span class="line">      md 创建目录名 (make directory)</span><br><span class="line">      rd 删除目录名 (remove directory)</span><br><span class="line">      <span class="built_in">cd</span>&gt; 创建文件名</span><br><span class="line">      del 删除文件名 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2025-1-14 日志</title>
      <link href="/2025/01/14/2025-1-14-2025-1-14-%E6%97%A5%E5%BF%97/"/>
      <url>/2025/01/14/2025-1-14-2025-1-14-%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="2025-1-14-碎碎念"><a href="#2025-1-14-碎碎念" class="headerlink" title="2025-1-14 碎碎念"></a>2025-1-14 碎碎念</h1><p>感觉dp好难，不是很好理解<br>dp[i][j]:</p><ul><li>i -&gt; 第i个(种)</li><li>j -&gt; j空间</li><li>dp[i][j] -&gt; 前i种，不超过j空间的情况下，最大价值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯滤波</title>
      <link href="/2025/01/06/2025-1-6-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"/>
      <url>/2025/01/06/2025-1-6-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h1><ul><li><p>用于图像处理中的预处理操作</p></li><li><p>将低像素进行锐化，使图像更清晰</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">INITIAL_KERNEL_SIZE = <span class="number">1</span></span><br><span class="line">INITIAL_SIGMA_VALUE = <span class="number">150</span></span><br><span class="line">MAX_SIGMA_VALUE = <span class="number">300</span></span><br><span class="line">MAX_KERNEL_SIZE = <span class="number">6</span></span><br><span class="line">WINDOW_NAME = <span class="string">&quot;Gaussian Blur Demo&quot;</span></span><br><span class="line">TRACKBAR_KERNEL_SIZE = <span class="string">&quot;Size&quot;</span></span><br><span class="line">TRACKBAR_SIGMA_VALUE = <span class="string">&quot;Sigma&quot;</span></span><br><span class="line"></span><br><span class="line">ksize = INITIAL_KERNEL_SIZE * <span class="number">2</span> + <span class="number">3</span></span><br><span class="line">sigma = INITIAL_SIGMA_VALUE / <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_kernel_size</span>(<span class="params">kernel_size</span>):</span><br><span class="line">    <span class="keyword">global</span> ksize</span><br><span class="line">    ksize = kernel_size * <span class="number">2</span> + <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(ksize, sigma)</span><br><span class="line">    apply_gaussian_blur()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_sigma_value</span>(<span class="params">sigma_value</span>):</span><br><span class="line">    <span class="keyword">global</span> sigma</span><br><span class="line">    sigma = sigma_value / <span class="number">10.0</span></span><br><span class="line">    <span class="built_in">print</span>(ksize, sigma)</span><br><span class="line">    apply_gaussian_blur()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_gaussian_blur</span>():</span><br><span class="line">    dst = cv.GaussianBlur(src, (ksize, ksize), sigma)</span><br><span class="line">    cv.imshow(WINDOW_NAME, dst)</span><br><span class="line"></span><br><span class="line">src = cv.imread(<span class="string">&quot;LofiSu1.jpg&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv.namedWindow(WINDOW_NAME)</span><br><span class="line"></span><br><span class="line">cv.createTrackbar(TRACKBAR_KERNEL_SIZE, WINDOW_NAME, INITIAL_KERNEL_SIZE, MAX_KERNEL_SIZE, update_kernel_size)</span><br><span class="line">cv.createTrackbar(TRACKBAR_SIGMA_VALUE, WINDOW_NAME, INITIAL_SIGMA_VALUE, MAX_SIGMA_VALUE, update_sigma_value)</span><br><span class="line"></span><br><span class="line">apply_gaussian_blur()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cv.waitKey(<span class="number">0</span>) == <span class="number">27</span>:</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2025/01/04/2025-1-4-My-First-Blog/"/>
      <url>/2025/01/04/2025-1-4-My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>今天是2025-1-4，大一上的期末周<br>每到期末周课就少起来了，对这一点我还感到挺开心的，就是考试和出成绩的时候会有些痛苦</p><p>至于为什么诞生了这篇博客：<br>1.自学后端开发的时候，b站大学的老师建议我搭建个人blog，来记录自己的计算机开发学习经历，感觉这还挺酷的<br>2.对于我们计算机学生而言，有三张脸：个人web（blog），GitHub，LinkedIn。<br>这三张脸是我们面对社会的最直接的脸面，无论是教授&#x2F;学者&#x2F;ceo&#x2F;cto，还是hr&#x2F;同事&#x2F;同学，他们都能通过这3张脸来认识你，了解你的兴趣，技术栈，个人能力，项目，paper等等。同时，我们展示这三张脸来向社会展示自己的能力，以争取工作&#x2F;研究学术&#x2F;创业的机会。<br>3.看到前辈的一些个人web，感觉好好看，单纯喜欢想自己做一个。</p><p>希望自己能坚持下来，不在于有多宏伟，多频繁的产出，但希望自己能在这里记录我学到的一些知识，一些看法，一些碎碎念，成为我这些年来的记忆。</p><p>文笔不好，事实上在现实生活中我本身就不是巧嘴滑舌的人<br>对我而言，仅仅只是作为一些记录<br>如果能对你有一点点的帮助，那再好不过了。</p><p>发现了一个需要注意的地方：<br>每次在vscode更新完文件配置需要在git上hexo三连：<br>hexo clean<br>hexo generate<br>hexo deploy<br>不然无法把自己更新的内容部署到vercel上</p><p>本地部署：<br>hexo clean<br>hexo generate<br>hexo server<br>即可</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
