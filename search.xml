<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/2025/04/04/2025-4-4-Vue/"/>
      <url>/2025/04/04/2025-4-4-Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>Vue是一套前端框架，免除原生JavaScript的DOM操作，简化书写</li><li>基于<strong>MVVM</strong>（Model-View-ViewModel）思想，实现数据的<strong>双向绑定</strong>，将编程的关注点放在数据上</li><li>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li></ul><style>.oxxddcshlbmt{zoom: 80%;}</style><img src="/2025/04/04/2025-4-4-Vue/MVVM.png" class="oxxddcshlbmt" alt="MVVM"><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>在 <code>&lt;head&gt;</code> 里面导入 Vue.js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>在JS代码区域，创建Vue核心对象，定义数据模型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,  <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>插值表达式：</strong></p><ul><li>形式：<code>&#123;&#123; 表达式 &#125;&#125;</code></li><li>内容：<ul><li>变量</li><li>三元运算符</li><li>函数调用</li><li>算术运算</li></ul></li></ul><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>指令：HTML 标签上带有 <code>v-</code> 前缀 的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>v-bind</code></td><td>为HTML标签绑定属性值，如设置 href , css样式等</td></tr><tr><td><code>v-model</code></td><td>在表单元素上创建双向数据绑定</td></tr><tr><td><code>v-on</code></td><td>为HTML标签绑定事件</td></tr><tr><td><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code></td><td>条件性的渲染某元素，判定为true时渲染,否则<strong>不渲染</strong></td></tr><tr><td><code>v-show</code></td><td>根据条件展示某元素，区别在于切换的是<strong>display属性</strong>的值</td></tr><tr><td><code>v-for</code></td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><p><strong>v-bind：</strong></p><ul><li><p>绑定标签：</p><ol><li><code>&lt;a v-bind:href=&quot;url&quot;&gt;link&lt;/a&gt;</code></li><li><code>&lt;a :href=&quot;url&quot;&gt;link&lt;/a&gt;</code></li></ol></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;https://www.zerd1y.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>v-model：</strong></p><ul><li><p>绑定标签：</p><ol><li><code>&lt;input type=&quot;text&quot; v-model=&quot;url&quot;&gt;</code></li></ol></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;https://www.zerd1y.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>v-on：</strong></p><ul><li><p>绑定标签：</p><ol><li><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;handle()&quot;&gt;</code></li><li><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;handle()&quot;&gt;</code></li></ol></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handle</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;我被点击了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>v-if、v-else-if、v-else：</strong></p><ul><li><p>绑定标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>v-show：</strong></p><ul><li><p>绑定标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>v-for：</strong></p><ul><li><p>绑定标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;addr in addrs&quot;</span>&gt;</span>&#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(addr,index) in addrs&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125; : &#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">addrs</span>:[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;西安&quot;</span>, <span class="string">&quot;成都&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期：指一个对象从创建到销毁的整个过程</p><p>生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法(钩子)</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td><strong>mounted</strong></td><td><strong>挂载完成</strong></td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><style>.jstgcxanhnyn{zoom:100%;}</style><img src="/2025/04/04/2025-4-4-Vue/VueLife.png" class="jstgcxanhnyn" alt="Vue生命周期"><p>**mounted：**挂载完成，Vue初始化成功，HTML页面渲染成功（发送请求到服务端，加载数据）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Vue挂载完毕,发送请求获取数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS心得</title>
      <link href="/2025/04/01/2025-4-1-CS%E5%BF%83%E5%BE%97/"/>
      <url>/2025/04/01/2025-4-1-CS%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p><em>持续更新……</em></p><ul><li>刷课：面向大厂实习面试学习（公开课反馈时间太长），API先玩熟练了，再基于语言特性深挖</li><li>《实践论》《矛盾论》</li><li><ol><li>中大厂：官网</li><li>小厂：boss、实习僧</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2025/03/31/2025-3-31-JavaWeb/"/>
      <url>/2025/03/31/2025-3-31-JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h1><h2 id="传统"><a href="#传统" class="headerlink" title="传统"></a>传统</h2><p>HTML、CSS、JS<br>-&gt; Ajax<br>-&gt; <del>jQuery</del><br>-&gt; MySQL -&gt; <del>JDBC</del><br>-&gt; <del>Servlet</del> -&gt; <del>JSP</del> -&gt; <del>EL &amp; JSTL</del><br>-&gt; <del>Cookie、Session</del><br>-&gt; Filter<br>-&gt; <del>Servlet案例</del><br>-&gt; Mybatis<br>-&gt; Spring -&gt; SpringMVC -&gt; SpringBoot  </p><h2 id="新型"><a href="#新型" class="headerlink" title="新型"></a>新型</h2><p>HTML、CSS、JS<br> -&gt; Ajax、Axios<br>-&gt; Vue、Element<br>-&gt; 前端工程化、Vue脚手架<br>-&gt; Maven<br>-&gt; SpringBoot<br>-&gt; SpringMVC<br>-&gt; MySQL -&gt; JDBC、Mybatis<br>-&gt; Web案例（SpringBoot+SpringMVC）<br>-&gt; 会话跟踪技术（Cookie、Session、JWT令牌技术）<br>-&gt; Filter、Interceptor（令牌的统一拦截校验）<br>-&gt; AOP<br>-&gt; SpringBoot原理</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>IDEA初次配置Maven：<a href="https://blog.csdn.net/m0_46491549/article/details/126578953?fromshare=blogdetail&sharetype=blogdetail&sharerId=126578953&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">2024IDEA配置Maven</a></li></ul><p>GroupId：<code>com.Lilyana</code></p><p>ArtifactId：<code>javaweb-01-maven</code></p><ul><li>创建一个干净的Maven项目：（[不使用Archetype Maven模板](<a href="https://www.cnblogs.com/ZengYoujiu/p/17135011.html">IDEA如何使用Maven不通过模板创建javaWeb项目 - Tartaglia - 博客园</a>)）</li></ul><p>new project -&gt; Build system 选 Maven-&gt; Java -&gt; 更改Name，GroupId（自动会改ArtifactId）-&gt; create</p><ul><li>配置Tomcat：</li></ul><p>Run -&gt; Edit Configurations -&gt; <code>+</code> -&gt; Tomcat Server：</p><ol><li>配置Application server：导入下载的Tomcat</li><li>配置Deployment：<code>+</code> -&gt; artifact 导入maven项目，Application context可选为空</li></ol><p><strong>Maven资源无法导出：</strong><a href="https://blog.csdn.net/qq_48717545/article/details/116394773?fromshare=blogdetail&sharetype=blogdetail&sharerId=116394773&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">Maven资源导出失败问题</a></p><p>**导入jar包后not found：**右边点击 <code>m</code> 进入Maven，左上角reload一下</p><p>maven web.xml更新为4.0版本：[Idea创建Maven Web工程的web.xml版本问题解决](Idea创建Maven Web工程的web.xml版本问题解决)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA2023版后不支持直接创建servlet，需要的话自己创建模板使用：<a href="idea2023/2024%E5%8F%B3%E9%94%AEnew%E7%9A%84%E6%97%B6%E5%80%99%E6%B2%A1%E6%9C%89Servlet%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">idea2023&#x2F;2024右键new的时候没有Servlet解决方案</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可能有用的网址</title>
      <link href="/2025/03/23/2025-3-23-%E5%8F%AF%E8%83%BD%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E5%9D%80/"/>
      <url>/2025/03/23/2025-3-23-%E5%8F%AF%E8%83%BD%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="可能有用的网址"><a href="#可能有用的网址" class="headerlink" title="可能有用的网址"></a>可能有用的网址</h1><p><em>水群看到记录下来的，无聊的时候哦还是要多多水群（bushi）</em></p><p><em>持续更新……</em></p><ul><li><p>虚拟接码平台：<a href="https://sms-activate.guru/cn">SMS-Activate是在线接受短信的虚拟号码服务</a></p></li><li><p>福大后端路线：<a href="https://github.com/west2-online/learn-java">west2-online&#x2F;learn-java: 福州大学西二在线工作室java方向考核指南</a>（来自28就业群）</p></li><li><p>开源之夏：<a href="https://summer-ospp.ac.cn/">开源软件供应链点亮计划-开源之夏2025</a></p></li><li><p>简历：<a href="https://rxresu.me/">https://rxresu.me/</a></p></li><li><p>LofiSu（GitHub）：<a href="https://github.com/LofiSu%EF%BC%88%E5%BC%80%E5%8F%91%E3%80%81%E9%87%8F%E5%8C%96%E3%80%81AIGC%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%89">https://github.com/LofiSu（开发、量化、AIGC学习路线）</a></p></li><li><p>LofiSu（Blog）：<a href="https://www.lofisu.chat/">https://www.lofisu.chat/</a></p></li><li><p>一本讲计网的好书（群友推荐）：<a href="https://hpbn.co/">High Performance Browser Networking (O’Reilly)</a></p></li><li><p>一本讲数据结构的好书：《大话数据结构》</p></li><li><p>前端路线：<a href="https://fe.mengchen.xyz/zh/roadMap.html">前端学习路线图 | 洞察前端</a>（来自前端就业群）</p></li><li><p>后端路线：<a href="https://mubu.com/doc/1SmZPfl51PH">黑尚大学 DarkHorse-SinoSiliconValley University Curriculum - 幕布</a>（来自后端就业群）</p></li><li><p>如何刷 leetcode：<a href="https://leetcode.cn/discuss/post/3510927/jiao-ni-ru-he-4ge-yue-gao-xiao-shua-man-1vswa/">论如何 4 个月高效刷满 500 题并形成长期记忆- 讨论 - 力扣（LeetCode）</a></p></li><li><p>知乎封神榜：<a href="https://l-m-sherlock.github.io/ZhiHuLegend/">ZhiHu Legend</a>（网站为知乎被封号大V集合：需要自身判断真伪的能力）</p></li><li><p>【项目】基于SpringBoot设计实现抖音：<a href="https://www.bilibili.com/video/BV18M411Z72D/?share_source=copy_web&vd_source=ca69f262d906a7bc2ed80189a3c178fc%EF%BC%88%E9%80%82%E5%90%88%E5%88%9A%E5%AD%A6%E4%B9%A0%E8%BF%871~2%E4%B8%AA%E9%A1%B9%E7%9B%AE%EF%BC%89">https://www.bilibili.com/video/BV18M411Z72D/?share_source=copy_web&amp;vd_source=ca69f262d906a7bc2ed80189a3c178fc（适合刚学习过1~2个项目）</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端实习-Tips</title>
      <link href="/2025/03/23/2025-3-23-%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0-Tips/"/>
      <url>/2025/03/23/2025-3-23-%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0-Tips/</url>
      
        <content type="html"><![CDATA[<h1 id="后端实习-Tips"><a href="#后端实习-Tips" class="headerlink" title="后端实习-Tips"></a>后端实习-Tips</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>算法：（每天至少2道）</strong></p><ul><li>leetcode：hot 100、剑指offer</li><li>代码随想录</li></ul><p><strong>八股：</strong></p><ul><li>javaguide</li><li>小林coding</li></ul><p><strong>四大件：</strong></p><ul><li>计算机网络：湖科大</li><li>操作系统：哈工大</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>学习路线：</p><ul><li><p><a href="https://blog.csdn.net/crazy1013/article/details/125405563?fromshare=blogdetail&sharetype=blogdetail&sharerId=125405563&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">学习路线（细致版-CSDN）</a></p></li><li><p><a href="https://www.bilibili.com/opus/494817843530680807?spm_id_from=333.1387.0.0">学习路线（粗略版-黑马）</a></p></li></ul><p>深入学习：<a href="%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%9E%E6%88%98%EF%BC%8Cjava%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%EF%BC%88%E6%B6%B5%E7%9B%96MybatisPlus%E3%80%81Docker%E3%80%81MQ%E3%80%81ES%E3%80%81Redis%E9%AB%98%E7%BA%A7%E7%AD%89%EF%BC%89_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1S142197x7/?vd_source=576643da9ada88d09d6bb8cd5b9f4066)">黑马推荐</a>下面官方评论第二条有相关资源</p><p><strong>JavaSE：</strong></p><ul><li>IO，反射，网络编程，并发编程可以后面学</li></ul><p>推荐资源：黑马（视频）、廖雪峰（文档）、《Java核心技术 卷一》（书籍）</p><p><strong>JavaWeb：</strong></p><ul><li>html + css + js</li><li>mysql</li><li>javaweb</li></ul><p>推荐资源：黑马（视频）、菜鸟教程（文档）</p><p><strong>Java框架：</strong></p><ul><li>SSM：spring，springmvc，Mybatis</li><li>Mybatis-plus，spring boot</li></ul><p>推荐资源：黑马（视频）</p><p><strong>中间件：</strong></p><ul><li>Redis</li></ul><p>推荐资源：黑马（视频）</p><p><strong>Java微服务：</strong></p><ul><li>springcloud</li><li>Docker，ES，MQ，k9s</li></ul><p>推荐资源：黑马（视频）</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>一个轮子，一个业务（微服务）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（C++）</title>
      <link href="/2025/03/22/2025-3-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C-%EF%BC%89/"/>
      <url>/2025/03/22/2025-3-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C-%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p><strong>S</strong>tandard <strong>T</strong>emplate <strong>L</strong>ibrary：</p><ul><li>容器（Containers）：<strong>容器</strong>是一种数据结构（如vector）</li><li>迭代器（Iterators）：用于访问数据结构</li><li>算法（Algorithms）：通过迭代器对数据结构操作的函数</li></ul><table><thead><tr><th>数据结构</th><th>描述</th><th>库</th></tr></thead><tbody><tr><td><code>vector</code></td><td>向量（动态数组）：末尾添加、删除</td><td><code>&lt;vector&gt;</code></td></tr><tr><td><code>list</code></td><td>链表：每个元素与下一个元素连接</td><td><code>&lt;list&gt;</code></td></tr><tr><td><code>stack</code></td><td>栈：后进先出</td><td><code>&lt;stack&gt;</code></td></tr><tr><td><code>queue</code></td><td>队列：先进先出</td><td><code>&lt;queue&gt;</code></td></tr><tr><td><code>deque</code></td><td>双端队列：两端都可</td><td><code>&lt;deque&gt;</code></td></tr><tr><td><code>set</code></td><td>集合：元素不重复，无序</td><td><code>&lt;set&gt;</code></td></tr><tr><td><code>map</code></td><td>映射：键值对</td><td><code>&lt;map&gt;</code></td></tr></tbody></table><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p><strong>库：</strong><code>&lt;vector&gt;</code></p><p><strong>创建：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; cars;</span><br><span class="line">vector&lt;string&gt; cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>访问、更改：</strong></p><ul><li>索引</li><li><code>.at()</code></li><li><code>.front()</code>：第一个</li><li><code>.back()</code>：最后一个</li></ul><p><strong>添加：</strong><code>.push_back()</code> 在末尾添加</p><p><strong>删除：</strong><code>.pop_back()</code> 删除末尾元素</p><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><p><strong>遍历：</strong></p><ul><li><code>for</code> + <code>.size()</code></li><li>for - each循环</li></ul><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><ul><li>可在开头、结尾添加和删除</li><li>不支持索引访问</li></ul><p><strong>库：</strong><code>&lt;list&gt;</code></p><p><strong>创建：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list&lt;string&gt; cars;</span><br><span class="line">list&lt;string&gt; cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>访问、更改：</strong></p><ul><li><code>.front()</code></li><li><code>.back()</code></li></ul><p><strong>添加：</strong></p><ul><li><code>.push_front()</code></li><li><code>.push_back()</code></li></ul><p><strong>删除：</strong></p><ul><li><code>.pop_front()</code></li><li><code>.pop_back()</code></li></ul><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><p><strong>遍历：</strong></p><ul><li><code>for</code> + <code>.size()</code></li><li>for - each</li></ul><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><ul><li><strong>LIFO：</strong> <strong>Last in, First Out</strong>，后进先出</li><li>只能访问堆栈顶部的元素</li></ul><p><strong>库：</strong><code>&lt;stack&gt;</code></p><p><strong>创建：</strong><code>stack&lt;string&gt; cars;</code>（只能这样）</p><p><strong>添加：</strong><code>.push()</code></p><p><strong>访问：</strong><code>.top()</code></p><p><strong>更改：</strong><code>.top</code></p><p><strong>删除：</strong><code>.pop()</code></p><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><ul><li><strong>FIFO：</strong> <strong>First in, First Out</strong>，先进先出</li><li>只能访问前面或后面的元素</li></ul><p><strong>库：</strong><code>&lt;queue&gt;</code></p><p><strong>创建：</strong><code>queue&lt;string&gt; cars;</code> 只能这样</p><p><strong>添加：</strong><code>.push()</code> 在队列末尾添加一个元素</p><p><strong>访问、更改：</strong></p><ul><li><code>.front()</code></li><li><code>.back()</code></li></ul><p><strong>删除：</strong><code>.pop()</code></p><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><ul><li>可以从两端（在前面和后面）添加和删除元素</li><li>可以通过索引号访问元素</li></ul><p><strong>库：</strong><code>&lt;deque&gt;</code></p><p><strong>创建：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;string&gt; cars;</span><br><span class="line">deque&lt;string&gt; cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>访问、更改：</strong></p><ul><li>索引</li><li><code>.at()</code></li><li><code>.front()</code></li><li><code>.back()</code></li></ul><p><strong>添加：</strong></p><ul><li><code>.push_front()</code></li><li><code>.push_back()</code></li></ul><p><strong>删除：</strong></p><ul><li><code>.pop_front()</code></li><li><code>.pop_back()</code></li></ul><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><p><strong>遍历：</strong></p><ul><li><code>for</code> + <code>.size()</code></li><li>for - each</li></ul><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ul><li>存储唯一元素，按<strong>升序</strong>自动排序</li><li>可以添加、删除，不能更改</li><li>不能按索引号访问（因为顺序基于排序而不是索引）</li></ul><p><strong>库：</strong><code>&lt;set&gt;</code></p><p><strong>创建：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; cars;</span><br><span class="line">set&lt;string&gt; cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>降序排序：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>添加：</strong><code>.insert()</code></p><p><strong>删除：</strong><code>.erase()</code></p><p><strong>删除所有元素：</strong><code>.clear()</code></p><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><p><strong>遍历：</strong> for - each</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ul><li>键值对：只能通过键访问，每个键<strong>唯一</strong></li><li>键按<strong>升序</strong>排序</li></ul><p><strong>库：</strong><code>&lt;map&gt;</code></p><p><strong>创建：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; people</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; people = &#123; &#123;<span class="string">&quot;John&quot;</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;Adele&quot;</span>, <span class="number">45</span>&#125;, &#123;<span class="string">&quot;Bo&quot;</span>, <span class="number">29</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><p><strong>访问、更改：</strong></p><ul><li>键：<code>[]</code></li><li><code>.at()</code></li></ul><p><strong>添加：</strong></p><ul><li><code>.[] = </code></li><li><code>.insert()</code></li></ul><p><strong>删除：</strong><code>.erase()</code></p><p><strong>删除所有元素：</strong><code>.clear()</code></p><p><strong>大小：</strong><code>.size()</code></p><p><strong>检查是否为空：</strong><code>.empty()</code></p><p><strong>检查是否存在键：</strong><code>.count()</code></p><p><strong>遍历：</strong></p><ul><li>for - each + <code>auto</code></li><li><code>.first</code> + <code>.second</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; people = &#123; &#123;<span class="string">&quot;John&quot;</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;Adele&quot;</span>, <span class="number">45</span>&#125;, &#123;<span class="string">&quot;Bo&quot;</span>, <span class="number">29</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> person : people) &#123;</span><br><span class="line">  cout &lt;&lt; person.first &lt;&lt; <span class="string">&quot; is: &quot;</span> &lt;&lt; person.second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>降序排序：</strong>（只能针对键）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>, greater&lt;string&gt;&gt; people = &#123; &#123;<span class="string">&quot;John&quot;</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;Adele&quot;</span>, <span class="number">45</span>&#125;, &#123;<span class="string">&quot;Bo&quot;</span>, <span class="number">29</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><ul><li>类似<strong>指针</strong>：指向数据结构来访问、更改，而不是赋值取值</li><li>迭代器的类型必须与数据结构的类型匹配</li></ul><p><strong>遍历：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (it = cars.<span class="built_in">begin</span>(); it != cars.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">  cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**.begin()：**返回一个迭代器：指向第一个元素</p><p>**.end()：**返回一个迭代器：指向最后一个元素的后一个位置</p><p>注意：<code>begin()</code> ， <code>end()</code> 是<strong>属于数据结构</strong>的<strong>函数</strong>（vector），他们<strong>不属于 Iterator</strong>本身。但它们与迭代器一起使用，来访问和迭代元素。</p><p>**auto：**让编译器自动确定正确的数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector&lt;string&gt;::iterator it = cars.begin();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it = cars.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = cars.<span class="built_in">begin</span>(); it != cars.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">  cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for-each vs iterator：</strong></p><ul><li>for-each：只读取，不修改</li><li>iterator：在迭代过程中添加或删除、反向迭代、跳过元素</li></ul><p><strong>反向迭代：</strong><code>rbegin()</code>，<code>rend</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = cars.<span class="built_in">rbegin</span>(); it != cars.<span class="built_in">rend</span>(); ++it) &#123;</span><br><span class="line">  cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历其他数据结构：</strong></p><ul><li>支持：vector，list，deque，map，set</li><li>不支持：stack，queue</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; people = &#123; &#123;<span class="string">&quot;John&quot;</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;Adele&quot;</span>, <span class="number">45</span>&#125;, &#123;<span class="string">&quot;Bo&quot;</span>, <span class="number">29</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = people.<span class="built_in">begin</span>(); it != people.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">  cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; is: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>排序：</strong><code>sort(numbers.begin(), numbers.end());</code> （升序）</p><p><strong>降序排序：</strong><code>sort(numbers.rbegin(), numbers.rend());</code></p><p><strong>搜索：</strong><code>find(start_iterator, end_iterator, value)</code></p><ul><li><p>查找</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">find</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>大于特定值的第一个元素：<code>upper_bound()</code>（需要先进行排序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">upper_bound</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>最小元素：<code>min_element()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">min_element</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li><li><p>最大元素：<code>max_element()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">max_element</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li></ul><p><strong>修改：</strong></p><ul><li><p>复制：<code>copy()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">copiedNumbers</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="built_in">copy</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), copiedNumbers.<span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure></li><li><p>填充：<code>fill()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">numbers</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="built_in">fill</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), <span class="number">35</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 速通</title>
      <link href="/2025/03/21/2025-3-21-C-%E9%80%9F%E9%80%9A/"/>
      <url>/2025/03/21/2025-3-21-C-%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<p><em>我需要在最短时间捡起 C++，以备刷题</em></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>应用：系统、图形用户界面、嵌入式系统、游戏开发</p></li><li><p>C 是 C++ 的子集（可粗略这样看）</p></li><li><p>C++ 为程序员提供了对系统资源和内存的高级控制</p></li></ul><p><strong>IDE：</strong> <strong>vscode</strong>，Code::Blocks，Eclipse，Visual Studio</p><p>**编译器：**gcc（g++）</p><h1 id="vscode-配置环境"><a href="#vscode-配置环境" class="headerlink" title="vscode 配置环境"></a>vscode 配置环境</h1><p>参见《命令行》Linux实践，配置过程完全一样</p><ul><li>提前下好编译器（网上博客很多推荐的）</li><li>除了连接wsl其他都一样</li></ul><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>输出：</strong><code>cout &lt;&lt; </code> （不会在输出末尾插入新行）</p><p><strong>输入：</strong><code>cin &gt;&gt;</code></p><p><strong>插入新行：</strong><code>\n</code>，<code>endl</code></p><p><strong>注释：</strong></p><ul><li>单行：<code>//</code></li><li>多行：<code>/**/</code></li></ul><p><strong>常量：</strong><code>const</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>整型：</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th></tr></thead><tbody><tr><td><code>int</code></td><td>4B</td><td>$-2^{31}$ ~ $2^{31}-1$：大约$2.1\times10^{9}$</td></tr><tr><td><code>unsigned int</code></td><td>4B</td><td>$0$ ~ $2^{32}-1$：大约 $4.2\times10^{9}$</td></tr><tr><td><code>long long</code></td><td>8B</td><td>$-2^{63}$ ~ $2^{63}-1$：大约$9.2\times10^{18}$</td></tr><tr><td><code>unsigned long long</code></td><td>8B</td><td>$0$ ~ $2^{64}-1$：大约$1.8\times10^{19}$</td></tr></tbody></table><p><strong>字符型：</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th></tr></thead><tbody><tr><td><code>char</code></td><td>1B</td><td>$-128$ ~ $127$</td></tr></tbody></table><p><strong>布尔型：</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th></tr></thead><tbody><tr><td><code>bool</code></td><td>1B</td><td><code>true</code>&#x2F;<code>false</code></td></tr></tbody></table><p><strong>浮点型：</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th></tr></thead><tbody><tr><td><code>double</code></td><td>8B</td><td>大约$10^{307}$，精度15位有效数字</td></tr><tr><td><code>float</code></td><td>4B</td><td>大约$10^{31}$，精度6位有效数字</td></tr></tbody></table><p><strong>字符串型</strong></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;=</code></td><td>按位与赋值</td></tr><tr><td>&#96;</td><td>&#x3D;&#96;</td></tr><tr><td><code>^=</code></td><td>按位异或赋值</td></tr><tr><td><code>&gt;&gt;=</code></td><td>右移赋值</td></tr><tr><td><code>&lt;&lt;=</code></td><td>左移赋值</td></tr></tbody></table><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><p>C++ 中的字符串实际上是一个对象</p><p><strong>头文件：</strong><code>#include &lt;string&gt;</code></p><p><strong>拼接：</strong></p><ul><li><code>+</code></li><li><code>append()</code></li></ul><p><strong>长度：</strong><code>length()</code> 或 <code>size()</code></p><p><strong>访问、更改：</strong></p><ul><li>索引 <code>[]</code></li><li><code>.at()</code></li></ul><p><strong>转义：</strong><code>\&#39;</code>，<code>\&quot;</code>，<code>\\</code></p><ul><li><code>\n</code>：换行</li><li><code>\t</code>：Tab</li></ul><p><strong>输入：</strong></p><ul><li><code>cin &gt;&gt;</code>：将空格（空格、制表符等）视为终止字符</li><li><code>getline(cin, fullname)</code>：读取一行文本</li></ul><p><strong>省略命名空间：</strong><code>using namespace std;</code> 竞赛必用</p><p><strong>C样式字符串：</strong><code>char greeting2[] = &quot;Hello&quot;;</code></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>声明：</strong></p><ul><li><code>string cars[4];</code> 省略数组元素</li><li><code>string cars[] = &#123;&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Ford&quot;&#125;;</code> 省略数组大小</li><li><code>int myNum[3] = &#123;10, 20, 30&#125;;</code></li></ul><p><strong>大小：</strong></p><ul><li><code>sizeof()</code> 返回 <strong>字节</strong></li><li>多少个元素：<code>sizeof(myNumbers) / sizeof(myNumbers[0]</code></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><strong>创建：</strong><code>struct</code> + 结构体名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> &#123;             <span class="comment">// Structure declaration</span></span><br><span class="line">  <span class="type">int</span> myNum;         <span class="comment">// Member (int variable)</span></span><br><span class="line">  string myString;   <span class="comment">// Member (string variable)</span></span><br><span class="line">&#125; myStruct1, myStruct2, myStruct3;       <span class="comment">// Structure variable</span></span><br></pre></td></tr></table></figure><p><strong>访问：</strong><code>.</code></p><p><strong>命名结构：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">myDataType</span> &#123; <span class="comment">// This structure is named &quot;myDataType&quot;</span></span><br><span class="line">  <span class="type">int</span> myNum;</span><br><span class="line">  string myString;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myDataType myVar;</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>enum 表示一组常量（不可更改的值）</p><p><strong>创建：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Level</span> &#123;</span><br><span class="line">  LOW,</span><br><span class="line">  MEDIUM,</span><br><span class="line">  HIGH</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>声明：</strong><code>enum Level myVar = HIGH;</code></p><p><strong>访问：</strong></p><ul><li>enum 第一项为0，第二项为1，以此类推</li><li>可以更改值</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><code>&amp;</code>：对现有变量的“引用”</p><p><strong>引用变量：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string food = <span class="string">&quot;Pizza&quot;</span>;</span><br><span class="line">string &amp;meal = food;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; food &lt;&lt; <span class="string">&quot;\n&quot;</span>;  <span class="comment">// Outputs Pizza</span></span><br><span class="line">cout &lt;&lt; meal &lt;&lt; <span class="string">&quot;\n&quot;</span>;  <span class="comment">// Outputs Pizza</span></span><br></pre></td></tr></table></figure><p><strong>获取地址：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string food = <span class="string">&quot;Pizza&quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &amp;food; <span class="comment">// Outputs 0x6dfed4</span></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针：将<strong>内存地址存储为其值的</strong>变量，指向相同类型的数据类型</p><p><strong>创建：</strong><code>*</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string food = <span class="string">&quot;Pizza&quot;</span>;  </span><br><span class="line">string* ptr = &amp;food;    </span><br><span class="line"></span><br><span class="line">cout &lt;&lt; food &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// Pizza</span></span><br><span class="line">cout &lt;&lt; &amp;food &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 0x5ffe80</span></span><br><span class="line">cout &lt;&lt; ptr &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 0x5ffe80</span></span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// Pizza</span></span><br><span class="line"></span><br><span class="line">*ptr = <span class="string">&quot;Hamburger&quot;</span>;</span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// Hamburger</span></span><br></pre></td></tr></table></figure><p><strong>解引用：</strong><code>*</code> </p><ul><li>使用指针来获取变量的值</li><li>修改原始变量的值</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>**重载：**相同的名称但具有不同的参数（数量和、类型）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myFunction</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">myFunction</span><span class="params">(<span class="type">float</span> x)</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">myFunction</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br></pre></td></tr></table></figure><p>**局部变量：**函数内</p><p>**全局变量：**都可访问（同名：1个函数内用 - 1个函数外用）</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p><strong>创建：</strong><code>class</code></p><p><strong>访问说明符：</strong><code>public</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;      </span><br><span class="line">  <span class="keyword">public</span>:            </span><br><span class="line">    <span class="type">int</span> myNum;       </span><br><span class="line">    string myString; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>内部定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;        </span><br><span class="line">  <span class="keyword">public</span>:              </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass myObj;     </span><br><span class="line">  myObj.<span class="built_in">myMethod</span>();  d</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>外部定义：<code>::</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;        </span><br><span class="line">  <span class="keyword">public</span>:              </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass myObj;     </span><br><span class="line">  myObj.<span class="built_in">myMethod</span>();  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>可以在类外部定义</p><ul><li>无参构造</li><li>含参构造</li></ul><h2 id="访问说明符"><a href="#访问说明符" class="headerlink" title="访问说明符"></a>访问说明符</h2><ul><li><code>public</code>：成员可从类外部访问</li><li><code>private</code>：无法从类外部访问（默认）</li><li><code>protected</code>：不能从类外部访问，可以在继承的类中访问</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>类的声明：<code>private</code></li><li><code>get</code>，<code>set</code> 方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> salary;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSalary</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">      salary = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Employee myObj;</span><br><span class="line">  myObj.<span class="built_in">setSalary</span>(<span class="number">50000</span>);</span><br><span class="line">  cout &lt;&lt; myObj.<span class="built_in">getSalary</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><code>:</code></p><p><strong>继承方式：</strong></p><ul><li><code>public</code>：父类的 <code>public</code> 成员仍然是 <code>public</code>，<code>protected</code> 仍然是 <code>protected</code></li><li><code>protected</code>：父类的 <code>public</code> 成员变为 <code>protected</code>，<code>protected</code> 保持不变</li><li><code>private</code>：父类的 <code>public</code> 和 <code>protected</code> 成员变为 <code>private</code></li></ul><p>父类的 <code>private</code> ：仍然<strong>存在于子类中</strong>，但<strong>无法直接访问</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Some content in parent class.&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyOtherClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myOtherFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Some content in another class.&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyChildClass</span>: <span class="keyword">public</span> MyClass, <span class="keyword">public</span> MyOtherClass &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyChildClass myObj;</span><br><span class="line">  myObj.<span class="built_in">myFunction</span>();</span><br><span class="line">  myObj.<span class="built_in">myOtherFunction</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>方法重写：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;The animal makes a sound \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;The pig says: wee wee \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;The dog says: bow wow \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><strong>调用库：</strong><code>#include &lt;iostream&gt;</code>，<code>#include &lt;fstream&gt;</code></p><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td><code>ofstream</code></td><td><strong>创建</strong>和<strong>写入</strong>文件</td></tr><tr><td><code>ifstream</code></td><td><strong>读取</strong>文件</td></tr><tr><td><code>fstream</code></td><td><strong>创建</strong>、<strong>读取</strong>和<strong>写入</strong>文件</td></tr></tbody></table><p><strong>创建：</strong><code>ofstream</code> 或 <code>fstream</code></p><p><strong>写入：</strong><code>MyFile &lt;&lt; &quot;...&quot;;</code></p><p><strong>关闭：</strong><code>MyFile.close();</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">ofstream <span class="title">MyFile</span><span class="params">(<span class="string">&quot;filename.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  MyFile &lt;&lt; <span class="string">&quot;Files can be tricky, but it is fun enough!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  MyFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取：</strong></p><ul><li><code>ifstream</code> 或 <code>fstream</code></li><li><code>while</code> + <code>getline</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string myText;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">MyReadFile</span><span class="params">(<span class="string">&quot;filename.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span> (MyReadFile, myText)) &#123;</span><br><span class="line">  cout &lt;&lt; myText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyReadFile.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><code>try</code>：定义代码块，在执行代码块时对其进行错误测试</li><li><code>throw</code>：检测到问题时引发异常</li><li><code>catch</code>：在 try 块中发生错误时要执行的代码块（与 <code>try</code> 成对出现）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">throw</span> exception; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> () &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>task_tracker_cli</title>
      <link href="/2025/03/19/2025-3-19-task-tracker-cli/"/>
      <url>/2025/03/19/2025-3-19-task-tracker-cli/</url>
      
        <content type="html"><![CDATA[<p><em>我的真正意义上的第一个项目，虽然说很大程度上借鉴了别人的智慧，但也算是一个个细节抠过来了</em></p><hr><blockquote><p><a href="https://github.com/lephuocloc1729/task_tracker_cli">https://github.com/lephuocloc1729/task_tracker_cli</a> 这个项目是怎么从零开始构建的？</p></blockquote><p>这个项目是一个从零开始构建的简单命令行任务管理应用，其构建过程大致可以归纳为以下几个步骤：</p><ol><li><strong>项目规划与需求定义</strong><ul><li>确定项目的目标：实现一个命令行界面的任务管理器，支持添加、更新、删除、标记（如进行中或完成）和列出任务。</li><li>设计数据存储方案：例如使用一个 JSON 文件（<code>tasks.json</code>）来存储任务数据。</li></ul></li><li><strong>创建 Git 仓库</strong><ul><li>在 GitHub 上新建仓库（如 <code>task_tracker_cli</code>）。</li><li>本地使用 <code>git init</code> 初始化仓库，然后关联远程仓库（例如使用 <code>git remote add origin ...</code> 命令）。</li></ul></li><li><strong>搭建项目结构</strong><ul><li>创建主要的 Java 源代码文件：<ul><li><strong><code>Task.java</code></strong>：定义任务对象的属性和方法。</li><li><strong><code>TaskManager.java</code></strong>：负责管理任务（例如添加、更新、删除任务以及与 <code>tasks.json</code> 文件的交互）。</li><li><strong><code>Status.java</code></strong>：定义任务状态（如 <code>todo</code>、<code>in progress</code>、<code>done</code>）的枚举或类。</li><li><strong><code>TaskCLIApp.java</code></strong>：主应用程序类，解析命令行参数并调用 <code>TaskManager</code> 提供的功能。</li></ul></li><li>添加辅助文件：<ul><li><strong><code>README.md</code></strong>：写上项目介绍、安装步骤和使用说明。</li><li><strong><code>.gitignore</code></strong>：过滤掉编译输出文件等不需要提交的内容。</li></ul></li></ul></li><li><strong>开发和测试</strong><ul><li>编写各个类的代码，确保它们能够协同工作，形成完整的任务管理功能。</li><li>在命令行下编译（例如使用 <code>javac TaskCLIApp.java Task.java TaskManager.java Status.java</code>）并运行程序，测试各项功能是否正常。</li></ul></li><li><strong>版本管理与提交</strong><ul><li>在开发过程中不断进行代码提交（<code>git commit</code>）来记录每次的修改。</li><li>调试无误后，将最终版本推送到 GitHub（例如使用 <code>git push -u origin main</code>）。</li></ul></li><li><strong>发布和文档完善</strong><ul><li>完善 <code>README.md</code>，详细说明如何安装、编译和运行程序。</li><li>如果需要，还可以添加使用示例和说明未来的改进方向。</li></ul></li></ol><p>总的来说，这个项目从零开始构建的流程包括了需求分析、项目初始化、代码开发、测试调试、版本管理以及文档编写。每一步都从最基础的设置开始，逐步实现并完善命令行任务管理器的功能。</p><hr><blockquote><p><a href="https://github.com/lephuocloc1729/task_tracker_cli">https://github.com/lephuocloc1729/task_tracker_cli</a> 我已经初始化仓库了，并创建了相应的文件，应该从哪里做起？</p></blockquote><p>根据你的描述，你已经初始化了仓库并创建了所需的文件，接下来的步骤可以按下面的流程进行：</p><ol><li><p><strong>构建核心功能</strong></p><ul><li><strong>定义数据模型</strong>：在 <code>Task.java</code> 中定义任务对象，包括任务描述、ID、状态等属性。</li><li><strong>设计状态管理</strong>：在 <code>Status.java</code> 或类似文件中定义任务的状态（例如：<code>todo</code>、<code>in progress</code>、<code>done</code>）。</li><li><strong>实现业务逻辑</strong>：在 <code>TaskManager.java</code> 中实现任务的添加、更新、删除、标记状态以及与持久化存储（如 <code>tasks.json</code>）交互的功能。</li><li><strong>创建主入口</strong>：在 <code>TaskCLIApp.java</code> 中编写命令行解析逻辑，根据用户输入调用 <code>TaskManager</code> 提供的各项功能。</li></ul></li><li><p><strong>编译和测试</strong></p><ul><li><p>使用命令如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac TaskCLIApp.java Task.java TaskManager.java Status.java</span><br></pre></td></tr></table></figure><p>编译你的代码。</p></li><li><p>在命令行中运行程序，验证各项功能是否按预期工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java TaskCLIApp &lt;<span class="built_in">command</span>&gt; [arguments]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>完善文档</strong></p><ul><li>更新 <code>README.md</code> 文件，写清楚项目的功能、安装步骤、编译方法以及使用示例，方便自己和其他人了解项目。</li></ul></li><li><p><strong>版本管理</strong></p><ul><li><p>定期提交代码更新，并推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Implement core features and basic CLI functionality&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>这样，你就能从零开始逐步构建一个完整的命令行任务管理应用。每一步都确保模块化开发和测试，最终形成一个功能齐全、易于维护的项目。</p><blockquote><p>困难：JSON字符串转换（不用框架）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2025/03/16/2025-3-16-MySQL/"/>
      <url>/2025/03/16/2025-3-16-MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>笔记：<a href="https://blog.csdn.net/qq_47540091/article/details/121875715?fromshare=blogdetail&sharetype=blogdetail&sharerId=121875715&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">MySQL</a></p><p><strong>DataBase：<strong>简称</strong>DB</strong></p><p>概念：长期存放在计算机内，有组织，可共享的大量数据的集合</p><p>作用：保存，安全管理数据（增删改查）</p><ul><li>关系型数据库（SQL）：<ul><li>MySQL , Oracle , SQL Server , SQLite , DB2</li><li>通过外键关联来建立表与表之间的关系</li></ul></li><li>非关系型数据库（NOSQL）：<ul><li>Redis , MongoDB</li><li>数据以对象的形式存储，对象之间的关系通过每个对象自身的属性来决定</li></ul></li></ul><p><strong>DBMS：<strong>数据库管理系统 ( <strong>D</strong>ata</strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p><p><strong>SQL：</strong></p><ul><li>SQL 是处理关系数据库的标准语言，用于插入、搜索、更新和删除数据库记录。</li><li>SQL 关键字<strong>不区分大小写：</strong><code>select</code> 与 <code>SELECT</code> 相同</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>卸载：<a href="https://blog.csdn.net/weixin_56952690/article/details/129678685">教你彻底卸载MySQL 并重装（保姆级教程 ）_mysql怎么卸载干净重装-CSDN博客</a></p><p>安装：<a href="https://blog.csdn.net/wer24_25/article/details/139959655?ops_request_misc=%7B%22request_id%22:%2239e79f5a02a0754389a0a6edc727a316%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=39e79f5a02a0754389a0a6edc727a316&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-139959655-null-null.142%5Ev102%5Epc_search_result_base1&utm_term=mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">MySQL超详细安装配置教程(亲测有效)_mysql安装教程-CSDN博客</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><em>推荐使用压缩版</em></p><p><strong>压缩包：</strong><a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p>接下来就只有2步需要改正，其他都和上面的教程一样：</p><ul><li><p><strong>按照上面教程来，直到初始化mysql：</strong><code>mysqld --initialize --console</code>（用这条命令，不要用教程的，在终端里直接看密码，看不懂给AI看）</p></li><li><p><strong>接下来继续按教程，直到修改密码：</strong></p><ol><li><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的新密码&#39;;</code></li><li><code>FLUSH PRIVILEGES;</code></li></ol></li></ul><p><em>我的密码：101024</em></p><h2 id="IDEA-连接数据库"><a href="#IDEA-连接数据库" class="headerlink" title="IDEA 连接数据库"></a>IDEA 连接数据库</h2><ol><li>右边Database</li><li>左上角 <code>+</code> -&gt; Data Source -&gt; MySQL</li><li>填写user，password</li><li>URL后面加上 <code>?serverTimezone=UTC</code></li><li>Apply -&gt; OK</li></ol><p>如果驱动出现问题：左上角 <code>Driver</code> -&gt; My SQL -&gt; 选择MySQL Connect&#x2F;J版本 -&gt; Apply -&gt; OK</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><ol><li>**第一范式：**每列的原子性（不可再分的最小数据单元）</li><li>**第二范式：**每个表只描述一件事情（前提满足第一范式）</li><li>**第三范式：**每一列数据都和主键直接相关（前提满足第二范式）</li></ol><p><strong>规范化 vs 性能：</strong></p><ul><li>性能比规范化更重要</li><li>通过添加额外字段,以大量减少搜索时间</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><table><thead><tr><th>名称</th><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>DDL（数据定义语言）</td><td>定义、管理数据库，数据表</td><td>create，drop，alter</td></tr><tr><td>DML（数据操作语言）</td><td>操作数据</td><td>insert，update，delete</td></tr><tr><td>DQL（数据查询语言）</td><td>查询数据</td><td>select</td></tr><tr><td>DCL（数据控制语言）</td><td>管理数据库语言、权限，数据更改</td><td>grant，commit，rollback</td></tr></tbody></table><p>以 <code>school</code> 为数据库名为例</p><p><strong>连接数据库：</strong><code>mysql -uroot -p101024</code></p><p><strong>创建数据库：</strong><code>create database [if not exists] school;</code></p><p><strong>删除数据库：</strong><code>drop database [if exists] school;</code></p><p><strong>查看所有数据库：</strong><code>show databases;</code></p><p><strong>打开数据库：</strong><code>use school</code></p><p><strong>查看数据库中所有表：</strong><code>show tables;</code></p><p><strong>显示<code>student</code>表的信息：</strong><code>describe student;</code></p><p><strong>退出：</strong><code>exit;</code></p><p><strong>注释：</strong><code>--</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">   &#x27;字段名1&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">   &#x27;字段名2&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">   &#x27;字段名n&#x27; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `student`(</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;d&#x27;,</span><br><span class="line">`name` VARCHAR(30) NOT NULL DEFAULT &#x27;anonymity&#x27; COMMENT &#x27;name&#x27;,</span><br><span class="line">`pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;password&#x27;,</span><br><span class="line">`sex` VARCHAR(10) NOT NULL DEFAULT &#x27;male&#x27; COMMENT &#x27;sex&#x27;,</span><br><span class="line">`birthday` DATETIME DEFAULT NULL COMMENT &#x27;birthday&#x27;,</span><br><span class="line">`address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;address&#x27;,</span><br><span class="line">`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;email&#x27;,</span><br><span class="line">PRIMARY KEY(`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p><strong>查看数据库定义：</strong><code>show create database school</code></p><p><strong>查看数据表定义：</strong><code>show create table student</code></p><p><strong>显示表结构：</strong><code>desc student</code></p><p><strong>查看 mysql 支持引擎：</strong><code>show engines</code>（InnoDB，MyISAM）</p><table><thead><tr><th>功能</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务处理</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大（约2倍）</td></tr></tbody></table><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>数值类型：</strong></p><table><thead><tr><th>类型</th><th>描述</th><th>大小</th></tr></thead><tbody><tr><td><code>tinyint</code></td><td>非常小</td><td>1B</td></tr><tr><td><code>smallint</code></td><td>较小</td><td>2B</td></tr><tr><td><code>mediumint</code></td><td>中等大小</td><td>3B</td></tr><tr><td><strong><code>int</code></strong>（常用）</td><td>标准</td><td>4B</td></tr><tr><td><code>bigint</code></td><td>较大</td><td>8B</td></tr><tr><td><code>float</code></td><td>单精度</td><td>4B</td></tr><tr><td><strong><code>double</code></strong>（常用）</td><td>双精度</td><td>8B</td></tr><tr><td><code>decimal</code></td><td>字符串型浮点数（金融计算）</td><td>取决于总位数和小数位数</td></tr></tbody></table><p><strong>字符串型：</strong></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>char</code></td><td>0 $\leq$ M $\leq$ 255</td></tr><tr><td><strong><code>varchar</code></strong>（常用）</td><td>0 $\leq$ M $\leq$ 65535</td></tr><tr><td><code>tinytext</code></td><td>微型文本串</td></tr><tr><td><strong><code>text</code></strong>（常用）</td><td>文本串</td></tr></tbody></table><p><strong>日期时间：</strong></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>YYYY-MM-DD</td></tr><tr><td><code>TIME</code></td><td>hh:mm:ss</td></tr><tr><td><code>DATETIME</code></td><td>YY-MM-DD hh:mm:ss</td></tr><tr><td><code>TIMESTAMP</code></td><td>YYYYMMDDhhmmss</td></tr><tr><td><code>YEAR</code></td><td>YYYY</td></tr></tbody></table><p><strong>null：</strong></p><ul><li>“没有值” 或 “未知值”</li><li>不要用NULL进行算术运算 , 结果仍为NULL</li></ul><h1 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h1><p>**Unsigned：**无符号，该数据列不允许负数</p><p>**Zerofill：**0填充</p><p>**auto_increment：**自增</p><ul><li>通常用于设置<strong>主键</strong> , 且为整数类型</li><li>可定义起始值和步长</li></ul><p><strong>null 和 not null：</strong></p><ul><li>null：没有值</li><li>not null：必须有值</li></ul><p>**default：**设置默认值</p><p><strong>其他：</strong></p><ol><li>id：主键</li><li>`version&#96;：乐观锁</li><li>is_delete：伪删除</li><li>gmt_create：创建时间</li><li>gmt_update：修改时间</li></ol><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><p>所有的数据库文件都存在 data目录下，本质是文件，一个文件夹对应一个数据库</p><p>**表名：**用 <em>&#96;</em> 包裹（反引号）</p><p>**字段名：**用 <code>&#39;</code> 包裹（单引号）</p><p><strong>修改表名：</strong><code>alter table student rename as student1</code></p><p><strong>增加表的字段：</strong><code>alter table student1 add age int</code></p><p><strong>修改表的字段：</strong></p><ul><li>修改约束：<code>alter table student1 modify age varchar(11)</code></li><li>重命名：<code>alter table student1 change age age1 int</code></li></ul><p><strong>删除字段：</strong><code>alter table student1 drop age1</code></p><p><strong>删除表：</strong><code>drop table if exists student1</code></p><h1 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h1><p>将<strong>主表</strong>的值放入<strong>从表</strong>来表示关联，所使用的值是主表的主键值，此时，从表中保存这些值的属性称为外键(<strong>foreign key</strong>)</p><p>作用：保持数据一致性</p><p>**创建：**定义外键，添加约束</p><ol><li><p>创建时定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE parent (</span><br><span class="line">    id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line">CREATE TABLE child (</span><br><span class="line">    id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    parent_id INT NOT NULL,</span><br><span class="line">    PRIMARY KEY (id),</span><br><span class="line">    KEY `FK_parent_id` (`parent_id`),</span><br><span class="line">    CONSTRAINT `FK_parent_id` FOREIGN KEY (`parent_id`) REFERENCES `parent`(`id`)</span><br><span class="line">        ON DELETE CASCADE</span><br><span class="line">        ON UPDATE CASCADE</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></li><li><p>创建后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE parent (</span><br><span class="line">    id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line">CREATE TABLE child (</span><br><span class="line">    id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    parent_id INT NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line">ALTER TABLE child ADD KEY `FK_parent_id` (`parent_id`);</span><br><span class="line"></span><br><span class="line">ALTER TABLE child</span><br><span class="line">ADD CONSTRAINT `FK_parent_id` FOREIGN KEY (`parent_id`) REFERENCES `parent`(`id`)</span><br><span class="line">    ON DELETE CASCADE</span><br><span class="line">    ON UPDATE CASCADE;</span><br></pre></td></tr></table></figure></li></ol><p><strong>显式添加外键索引：</strong><code>KEY FK_parent_id (parent_id)</code></p><p><strong>主从表同时操作：</strong><code>ON DELETE CASCADE</code>，<code>ON UPDATE CASCADE</code>（否则操作父表外键会被拒绝）</p><p>外键不建议使用：数据库操作麻烦</p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><p><strong>插入语句：</strong></p><ol><li><code>insert into 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;,...)</code></li><li>不写字段会一一匹配</li><li>插入多条数据：<code>values</code> 后用英文逗号隔开</li></ol><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p><strong>修改数据：</strong></p><ol><li><code>UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHERE condition];</code></li><li>不指定条件，修改所有数据</li></ol><h2 id="where-逻辑操作符"><a href="#where-逻辑操作符" class="headerlink" title="where 逻辑操作符"></a>where 逻辑操作符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td></tr><tr><td><code>&lt;&gt;</code> 或 <code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>BETWEEN</code></td><td>在某个范围之间</td></tr><tr><td><code>AND</code></td><td>且</td></tr><tr><td><code>OR</code></td><td>或</td></tr><tr><td><code>NOT</code></td><td>非</td></tr></tbody></table><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p><strong>删除数据：</strong><code>DELETE FROM 表名 [WHERE condition];</code></p><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><p><strong>清空表所有数据：</strong><code>TRUNCATE [TABLE] table_name;</code></p><p><strong>区别：</strong></p><ul><li>truncate：重新设置auto_increment；不会影响事务</li><li>delete：<ul><li>InnoDB：自增列从1开始</li><li>MyISAM：继续从上一个增量开始</li></ul></li></ul><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><strong>语法：</strong><code>[]</code> 为可选；<code>&#123;&#125;</code> 为必选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT]</span><br><span class="line">&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;</span><br><span class="line">FROM table_name [as table_alias]</span><br><span class="line">  [left | right | inner join table_name2]  </span><br><span class="line">  [WHERE ...]  </span><br><span class="line">  [GROUP BY ...]  </span><br><span class="line">  [HAVING]  </span><br><span class="line">  [ORDER BY ...]  </span><br><span class="line">  [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];</span><br></pre></td></tr></table></figure><p><strong>查询所有学生信息：</strong><code>SELECT * FROM student;</code></p><p>查询版本：<code>SELECT VERSION();</code></p><p>查询自增步长：<code>SELECT @@auto_increment_increment;</code></p><h2 id="as"><a href="#as" class="headerlink" title="as"></a>as</h2><p><strong>给列取别名：</strong><code>SELECT studentno AS num,studentname AS name FROM student;</code></p><p><strong>给表取别名：</strong><code>SELECT studentno AS num,studentname AS name FROM student AS s;</code>（不会对结果产生影响，在代码中方便指代字段名属于哪个表）</p><h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p><strong>去重：</strong><code>SELECT DISTINCT </code>studentno<code> FROM result;</code></p><h2 id="where-模糊查询"><a href="#where-模糊查询" class="headerlink" title="where 模糊查询"></a>where 模糊查询</h2><table><thead><tr><th>操作符</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>IS NULL</code></td><td><code>a IS NULL</code></td><td>为null，返回true</td></tr><tr><td><code>IS NOT NULL</code></td><td><code>a IS NOT NULL</code></td><td>不为null，返回true</td></tr><tr><td><code>BETWEEN</code></td><td><code>a BETWEEN b AND c</code></td><td>a 范围在 b 与 c 之间，返回true</td></tr><tr><td><code>LIKE</code></td><td><code>a LIKE b</code></td><td>a 匹配 b，返回true</td></tr><tr><td><code>IN</code></td><td><code>a IN (a1, a2, a3, ...)</code></td><td>a等于a1, a2中某一个，返回true</td></tr></tbody></table><p><strong>通配符：</strong></p><ul><li><code>%</code>：替代零个、一个或多个字符</li><li><code>_</code>：替代单个字符</li></ul><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td><code>a%</code></td><td>以a开头</td></tr><tr><td><code>%a</code></td><td>以a结尾</td></tr><tr><td><code>%or%</code></td><td>or在任意位置</td></tr><tr><td><code>_r%</code></td><td>r在第二个位置</td></tr><tr><td><code>a_%_%</code></td><td>以a开头，总共至少有3个字符</td></tr><tr><td><code>a%o</code></td><td>以a开头，以o结尾</td></tr></tbody></table><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul><li><code>INNER JOIN</code>：返回在两个表中具有匹配值的记录</li><li><code>LEFT JOIN</code>：返回左表中的所有记录，以及右表中的匹配记录</li><li><code>RIGHT JOIN</code>：返回右表中的所有记录，以及左表中的匹配记录</li><li><code>CROSS JOIN</code>：返回两个表中的所有记录（结果集的行数将是两个表行数的乘积）</li></ul><style>.onajnihfcufu{zoom:100%;}</style><img src="/2025/03/16/2025-3-16-MySQL/mysql_join.png" class="onajnihfcufu" alt="mysql_join"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>呈现父子关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `category` (</span><br><span class="line">`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#x27;主题id&#x27;,</span><br><span class="line">`pid` INT(10) NOT NULL COMMENT &#x27;父id&#x27;,</span><br><span class="line">`categoryName` VARCHAR(50) NOT NULL COMMENT &#x27;主题名字&#x27;,</span><br><span class="line">PRIMARY KEY (`categoryid`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)</span><br><span class="line">VALUES(&#x27;2&#x27;,&#x27;1&#x27;,&#x27;信息技术&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;1&#x27;,&#x27;软件开发&#x27;),</span><br><span class="line">(&#x27;4&#x27;,&#x27;3&#x27;,&#x27;数据库&#x27;),</span><br><span class="line">(&#x27;5&#x27;,&#x27;1&#x27;,&#x27;美术设计&#x27;),</span><br><span class="line">(&#x27;6&#x27;,&#x27;3&#x27;,&#x27;web开发&#x27;),</span><br><span class="line">(&#x27;7&#x27;,&#x27;5&#x27;,&#x27;ps技术&#x27;),</span><br><span class="line">(&#x27;8&#x27;,&#x27;2&#x27;,&#x27;办公信息&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT a.categoryName AS &#x27;父栏目&#x27;,b.categoryName AS &#x27;子栏目&#x27;</span><br><span class="line">FROM category AS a,category AS b</span><br><span class="line">WHERE a.`categoryid`=b.`pid`</span><br></pre></td></tr></table></figure><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p><strong>升序：</strong><code>ASC</code>（默认）</p><p><strong>降序：</strong><code>DESC</code></p><h1 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h1><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><strong>绝对值：</strong><code>SELECT ABS(-8);</code></p><p><strong>向上取整：</strong><code>SELECT CEILING(9.4);</code></p><p><strong>向下取整：</strong><code>SELECT FLOOR(9.4);</code></p><p><strong>随机数0~1：</strong><code> SELECT RAND();</code></p><p><strong>返回符号：</strong><code>SELECT SIGN(0);</code>（负数返回-1,正数返回1,0返回0）</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>MySQL字符串从1开始</p><p><strong>长度：</strong><code>SELECT CHAR_LENGTH(&#39;...&#39;);</code></p><p><strong>合并：</strong><code>SELECT CONCAT(&#39;I&#39;,&#39;love&#39;,&#39;coding&#39;);</code></p><p><strong>替换：</strong><code>SELECT INSERT(&#39;ILoveCodingHelloWorld&#39;,1,2,&#39;VeryLove&#39;);</code>*从某个位置开始替换某个长度）</p><p><strong>小写：</strong><code>LOWER(&#39;ILoveCoding&#39;);</code></p><p><strong>大写：</strong><code>UPPER(&#39;ILoveCoding&#39;);</code></p><p><strong>从左边截取：</strong><code>LEFT(&#39;hello,world&#39;,5);</code></p><p><strong>从右边截取：</strong><code>RIGHT(&#39;hello,world&#39;,5);</code></p><p><strong>替换字符串：</strong><code>REPLACE(&#39;ILoveCodingHelloWorld&#39;,&#39;Love&#39;,&#39;VeryLove&#39;);</code></p><p><strong>截取字符串：</strong><code>SUBSTR(&#39;ILoveCodingHelloWorld&#39;,6,11);</code></p><p><strong>返回第一次出现的索引：</strong><code>INSTR(&#39;ILoveCoding&#39;,&#39;L&#39;);</code></p><p><strong>反转：</strong><code>REVERSE(&#39;ILoveCoding&#39;)&#39;</code></p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p><strong>当前日期：</strong><code>SELECT CURRENT_DATE();</code></p><p><strong>当前日期：</strong><code>SELECT CURDATE();</code></p><p><strong>当前日期和时间：</strong><code>SELECT NOW();</code></p><p><strong>当前日期和时间：</strong><code>SELECT LOCALTIME();</code></p><p><strong>当前日期和时间：</strong><code>SELECT SYSDATE(); ;</code></p><p><strong>年月日，时分秒：</strong></p><p><code>SELECT YEAR(NOW()); </code></p><p><code>SELECT MONTH(NOW());</code></p><p><code>SELECT DAY(NOW());</code></p><p><code>SELECT HOUR(NOW());</code></p><p><code>SELECT MINUTE(NOW());</code></p><p><code>SELECT SECOND(NOW());</code></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><strong>满足条件的记录总和：</strong><code>count()</code></p><p><strong>列总和：</strong><code>sum()</code></p><p><strong>列平均值：</strong><code>avg()</code></p><p><strong>最大值：</strong><code>max()</code></p><p><strong>最小值：</strong><code>min()</code></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="ACID-原则"><a href="#ACID-原则" class="headerlink" title="ACID 原则"></a>ACID 原则</h2><ul><li>**原子性：**要么全部完成，要么全部不完成</li><li>**一致性：**系统处于一致（转账总钱不变多）</li><li>**隔离性：**隔离状态执行事务</li><li>**持久性：**完成后，数据更改持久保存在数据库中</li></ul><h2 id="隔离产生的问题"><a href="#隔离产生的问题" class="headerlink" title="隔离产生的问题"></a>隔离产生的问题</h2><ul><li>**脏读：**读取了另一个没提交的事务</li><li>**不可重复读：**一个事务内读取表中的某一行数据,多次读取结果不同</li><li>**虚读（幻读）：**一个事务内读取到了别的事务插入的数据,导致前后读取不—致</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><code>SET autocommit = 0;</code>：关闭自动提交</li><li><code>START TRANSACTION;</code>：开始一个事务</li><li>进行事务操作</li><li><code>COMMIT;</code>：提交事务 （<code>rollback</code>：回滚）</li><li><code>SET autocommit = 1;</code>：恢复自动提交</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `shop`CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">USE `shop`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `account` (</span><br><span class="line">    `id` INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `name` VARCHAR(32) NOT NULL,</span><br><span class="line">    `cash` DECIMAL(9,2) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account (`name`,`cash`)</span><br><span class="line">VALUES(&#x27;A&#x27;,2000.00),(&#x27;B&#x27;,10000.00)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET autocommit = 0; </span><br><span class="line">START TRANSACTION;  </span><br><span class="line">UPDATE account SET cash=cash-500 WHERE `name`=&#x27;A&#x27;;</span><br><span class="line">UPDATE account SET cash=cash+500 WHERE `name`=&#x27;B&#x27;;</span><br><span class="line">COMMIT; </span><br><span class="line"># rollback;</span><br><span class="line">SET autocommit = 1; </span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>帮助MySQL高效获取数据的数据结构</p><p><strong>删除索引：</strong><code>DROP INDEX 索引名 ON 表名字;</code></p><p><strong>删除主键索引：</strong><code>ALTER TABLE 表名 DROP PRIMARY KEY;</code></p><p><strong>显示索引信息：</strong><code>SHOW INDEX FROM student;</code></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>唯一的标识，主键不可重复</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>避免重复的列出现</p><p>**和主键索引的区别：**唯一索引可以重，主键索引只能有一个（多个列都可以标识位唯一索引）</p><ol><li><p>创建时添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Grade`(</span><br><span class="line">  `GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  `GradeName` VARCHAR(32) NOT NULL UNIQUE</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>创建后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNIQUE KEY `GradeID` (`GradeID`)</span><br></pre></td></tr></table></figure></li></ol><h3 id="常规索引"><a href="#常规索引" class="headerlink" title="常规索引"></a>常规索引</h3><p>默认：index  或 key 关键字设置</p><p>不宜添加太多常规索引</p><ol><li><p>创建时添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `result`(</span><br><span class="line">  `studentno` INT(4) NOT NULL,</span><br><span class="line">  `subjectno`INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  INDEX/KEY `ind` (`studentNo`,`subjectNo`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>创建后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`);</span><br></pre></td></tr></table></figure></li></ol><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><ul><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><ol><li><p>创建时添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (</span><br><span class="line">字段名1 数据类型 [完整性约束条件…],</span><br><span class="line">字段名2 数据类型 [完整性约束条件…],</span><br><span class="line">[UNIQUE | FULLTEXT | SPATIAL ]  INDEX | KEY  [索引名] (字段名[(长度)] [ASC |DESC])</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建后添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名 (字段名[(长度)] [ASC |DESC]) ;</span><br></pre></td></tr></table></figure></li></ol><h2 id="准则"><a href="#准则" class="headerlink" title="准则"></a>准则</h2><ol><li>不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ol><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><ol><li>hash</li><li>btree</li></ol><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p><strong>刷新权限：</strong><code>FLUSH PRIVILEGE</code></p><p><strong>增加用户：</strong><code>CREATE USER &#39;用户名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p><strong>重命名：</strong><code>RENAME USER &#39;用户名&#39; TO &#39;用户名&#39;;</code></p><p><strong>设置密码：</strong><code>SET PASSWORD = PASSWORD(&#39;密码&#39;)</code></p><p><strong>为指定用户设置密码：</strong><code>SET PASSWORD FOR &#39;用户名&#39; = PASSWORD(&#39;密码&#39;)</code></p><p><strong>删除用户：</strong><code>DROP USER &#39;用户名&#39;</code></p><p><strong>分配权限：</strong><code>GRANT 权限列表 ON 库名.表名 TO &#39;用户名&#39;</code></p><ul><li><code>all privileges</code>：所有权限</li><li><code>*.*</code>：所有库的所有表</li></ul><p><strong>查看权限：</strong><code>SHOW GRANTS FOR &#39;用户名&#39;</code></p><p><strong>撤销权限：</strong><code>REVOKE 权限列表 ON 库名.表名 FROM &#39;用户名&#39;</code></p><p><strong>权限类型：</strong><a href="https://blog.csdn.net/chushiyan/article/details/107586971">mysql用户权限管理：查看用户权限、授予用户权限、收回用户权限_show grant-CSDN博客</a></p><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p><strong>导出表：</strong><code>mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件.sql</code></p><p><strong>导出所有表：</strong><code>mysqldump -u用户名 -p密码 库名 &gt; 文件.sql</code></p><p><strong>导出一个库：</strong><code>mysqldump -u用户名 -p密码 -B 库名 &gt; 文件.sql</code></p><p><strong>导入：</strong><code>mysql -u 用户名 -p 数据库名 &lt; 文件.sql</code></p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>见文首博客</p><ol><li>下载MySQL驱动 <code>.jar</code> 包</li><li>idea建立项目，在项目目录下新建 <code>lib</code> 文件夹</li><li>复制 <code>.jar</code> 文件到 <code>lib</code> 目录下</li><li>右击 <code>lib</code> 目录，点击 <code>Add as library...</code></li></ol><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `jdbcStudy` CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">USE `jdbcStudy`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `users`(</span><br><span class="line"> `id` INT PRIMARY KEY,</span><br><span class="line"> `NAME` VARCHAR(40),</span><br><span class="line"> `PASSWORD` VARCHAR(40),</span><br><span class="line"> `email` VARCHAR(60),</span><br><span class="line"> birthday DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `users`(`id`,`NAME`,`PASSWORD`,`email`,`birthday`)</span><br><span class="line">VALUES(&#x27;1&#x27;,&#x27;zhangsan&#x27;,&#x27;123456&#x27;,&#x27;zs@sina.com&#x27;,&#x27;1980-12-04&#x27;),</span><br><span class="line">(&#x27;2&#x27;,&#x27;lisi&#x27;,&#x27;123456&#x27;,&#x27;lisi@sina.com&#x27;,&#x27;1981-12-04&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;wangwu&#x27;,&#x27;123456&#x27;,&#x27;wangwu@sina.com&#x27;,&#x27;1979-12-04&#x27;)</span><br></pre></td></tr></table></figure><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>加载驱动（反射）：<code>Class.forName</code></li><li>连接数据库：<code>Connection</code></li><li>获取对象：<code>Statement</code></li><li>执行SQL，获取结果：<code>ResultSet</code></li><li>释放连接：<code>.close()</code></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FisrtDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);  <span class="comment">// 固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.用户信息和 url</span></span><br><span class="line">        <span class="comment">// useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span><span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;101024&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.连接成功,数据库对象  Connection 代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行 SQL 的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行 SQL 的对象去执行 SQL,可能存在结果,查看返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql); <span class="comment">// 返回的结果集，封装了全部查询结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span> + resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> + resultSet.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span> + resultSet.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span> + resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birth=&quot;</span> + resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;==================================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h4><p><strong>Driver：</strong> 源码自动调用<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><strong>URL：</strong></p><ul><li>MySQL：<ol><li><code>jdbc:mysql://主机地址:端口号/数据库名？参数1&amp;参数2&amp;参数3</code></li><li>端口：3306</li></ol></li><li>Oracle：<ol><li><code>jdbc:oralce:thin:@localhost:1521:sid</code></li><li>端口：1521</li></ol></li></ul><p>**Connection：**代表数据库</p><ul><li>自动提交：<code>connection.setAutocommito();</code></li><li>事务提交：<code>connection.commit();</code></li><li>事务回滚：<code>connection.rollback();</code></li></ul><h4 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h4><p><strong>Statement：</strong></p><ul><li>查询：<code>statement.executeQuery();</code>（返回ResultSet）</li><li>执行任何SQL：<code>statement.execute();</code></li><li>更新、插入、删除：<code>statement.executeUpdate();</code>（返回受影响的行数）</li></ul><h4 id="获取结果"><a href="#获取结果" class="headerlink" title="获取结果"></a>获取结果</h4><p><strong>ResultSet</strong></p><p>获取数据类型：</p><ul><li><code>resultSet.getObject()</code></li><li><code>resultset.getString();</code></li><li><code>resultse. getInt();</code></li><li><code>resultset.getFloat();</code></li><li><code>resultset.getDate();</code></li><li><code>resultset.getObject();</code></li></ul><p>遍历：</p><ul><li><code>resultset.next();</code>：下一个数据</li><li><code>resultset.previous();</code>：前一行</li><li><code>resultset.absolute(row);</code>：指定行</li><li><code>resultset.beforefirst();</code>：最前面</li><li><code>resultset.aftertaste();</code>：最后面</li></ul><h4 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h4><p><code>connection.close();</code></p><p><code>statement.close();</code></p><p><code>resultSet.close();</code></p><p>编辑工具类</p><h2 id="Statement-对象"><a href="#Statement-对象" class="headerlink" title="Statement 对象"></a>Statement 对象</h2><p>Statement对象用于向数据库发送sqL语句</p><p><code>statement.executeUpdate()</code>：向数据库发送增、删、改的sql语句，返回一个整数（更改了几行）</p><p><code>statement.executeQuery()</code>：向数据库发送查询语句，返回查询结果的 ResultSet对象</p><p>**注意：**无法阻止SQL注入，见PreparedStatement</p><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><p><strong>增：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn. createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; insert into user(…) values(…)&quot;</span></span><br><span class="line"><span class="type">int</span> num= st.executeUpdate(sq1);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    system.out. printIn(<span class="string">&quot;插入成功!!!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from user where id=l&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   system.out.printIn(<span class="string">&quot;删除成功!!!&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name=&#x27;&#x27; where name =&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate(sql)</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">system.out.printIn(<span class="string">&quot;修改成功!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id=l&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql)</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型,分别调用rs的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><p><strong>配置文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">101024</span></span><br></pre></td></tr></table></figure><p><strong>加载、连接、释放工具：</strong>（反射）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Statement-CRUD"><a href="#Statement-CRUD" class="headerlink" title="Statement CRUD"></a>Statement CRUD</h3><p><strong>增：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CRUD;</span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获收数据库连接</span></span><br><span class="line">            st = conn.createStatement();       <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(id,`NAME`,`PASSWORD`,`email`,`birthday`)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES(4,&#x27;blue&#x27;,&#x27;123456&#x27;,&#x27;24736743@qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CRUD;</span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获收数据库连接</span></span><br><span class="line">            st = conn.createStatement();       <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM users WHERE id = 4&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CRUD;</span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获收数据库连接</span></span><br><span class="line">            st = conn.createStatement();       <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE users SET `NAME` = &#x27;kuangshen&#x27;, `email` = &#x27;12345678@qq.com&#x27; WHERE id = 1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CRUD;</span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获收数据库连接</span></span><br><span class="line">            st = conn.createStatement();       <span class="comment">// 获取SQL的执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users where id = 1&quot;</span>; <span class="comment">// SQL</span></span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(sql); <span class="comment">// 查询完会返回一个结果集</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement-CRUD"><a href="#PreparedStatement-CRUD" class="headerlink" title="PreparedStatement CRUD"></a>PreparedStatement CRUD</h3><p>防止 SQL 注入</p><p><strong>增：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plusCRUD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">//使用 ? 占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译SQL,先写sqL,然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 注意点:  sqL.Date   数据库    java.sql.Date</span></span><br><span class="line">            <span class="comment">//         utiL.Date   Java    new Date().getTime()获得时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plusCRUD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">//使用 ? 占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from users where id=?&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译SQL,先sqL,然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plusCRUD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">//使用 ? 占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update users set `NAME` = ? where id = ?&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译SQL,先sqL,然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setString(<span class="number">1</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            st.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plusCRUD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id=?&quot;</span>;  <span class="comment">// 编写SQL</span></span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译</span></span><br><span class="line"></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);   <span class="comment">// 传递参数</span></span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery();   <span class="comment">// 执行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>防止SQL注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plusCRUD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">plusSQL</span>注入 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//正常登录</span></span><br><span class="line">        login(<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        login(<span class="string">&quot;&#x27;&#x27; or 1=1&quot;</span>,<span class="string">&quot;&#x27;&#x27; or 1=1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录业务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();  <span class="comment">// 获收数据库连接</span></span><br><span class="line">            <span class="comment">// PreparedStatement 的 SQL注入的本质,把传递进米的参数当做字符</span></span><br><span class="line">            <span class="comment">//假设其中在在转义字符,比如说&#x27;会被直接转义</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where `NAME`=? and `PASSWORD`=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>,username);</span><br><span class="line">            st.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><ol><li>开启事务：<code>conn.setAutoCommit(false);</code></li><li>提交事务：<code>conn.commit();</code></li><li>定义回滚：<code>catch</code> 语句中默认失败回滚</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span>  <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 关闭数据库的自动提交,自动会开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);  <span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - 100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// int x = 1/0;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + 100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 如果失败，默认回滚</span></span><br><span class="line"><span class="comment">//            try &#123;                       //如果失败，回滚事务（显式定义）</span></span><br><span class="line"><span class="comment">//                conn.rollback();</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException e1) &#123;</span></span><br><span class="line"><span class="comment">//                e1.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><p>数据库连接 — 执行完毕 — 释放</p><p>连接 - 释放：十分浪费系统资源</p><p>池化技术：<strong>准备一些预先的资源，过来就连接预先准备好的</strong></p><p>开源数据源：</p><ol><li>DBCP</li><li>C3P0</li><li>Druid</li></ol><p>配置：（例子）</p><ul><li>最小连接数：10</li><li>最大连接数：15</li><li>等待超时：100ms</li></ul><p>核心：实现接口 <code>dataSource</code></p><h2 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h2><p>**导入：**3个包 <code>commons-dbcp</code>、<code>commons-pool</code>、<code>commons-logging</code></p><ol><li><a href="https://blog.csdn.net/qq_45523411/article/details/121517140?fromshare=blogdetail&sharetype=blogdetail&sharerId=121517140&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">导入DBCP</a></li><li>现在还需要再导入 <code>commons-logging</code> 包：<a href="https://commons.apache.org/proper/commons-logging/download_logging.cgi?spm=5176.28103460.0.0.297c451eT2KAV4&file=download_logging.cgi">Download Apache Commons Logging – Apache Commons Logging</a></li></ol><p><strong>配置文件：</strong><code>dbcpconfig.properties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">101024</span></span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">maxActive=<span class="number">50</span></span><br><span class="line"></span><br><span class="line">maxIdle=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">minIdle=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">maxWait=<span class="number">60000</span></span><br><span class="line"></span><br><span class="line">connectionProperties=useUnicode=<span class="literal">true</span>;characterEncoding=gbk</span><br><span class="line"></span><br><span class="line">defaultAutoCommit=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">defaultReadOnly=</span><br><span class="line"></span><br><span class="line">defaultTransactionIsolation=READ_UNCOMMITTED</span><br></pre></td></tr></table></figure><p><strong>加载、连接、释放工具：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DBCP.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils_DBCP</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtils_DBCP.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcpconfig.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            <span class="comment">// 创建数据源 工厂 -- &gt; 创建</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DBCP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DBCP.utils.JdbcUtils_DBCP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDBCP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils_DBCP.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">//使用 ? 占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译SQL,先写sqL,然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 注意点:  sqL.Date   数据库    java.sql.Date</span></span><br><span class="line">            <span class="comment">//         utiL.Date   Java    new Date().getTime()获得时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils_DBCP.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><p><strong>导入：</strong><code>c3p0</code>、<code>mchange-commons-java </code>包 <a href="https://blog.csdn.net/qq_71443736/article/details/134918481?fromshare=blogdetail&sharetype=blogdetail&sharerId=134918481&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">导入c3p0</a></p><p><strong>配置文件：</strong><code>c3p0-config.xml</code>（在 <code>src</code> 目录下建）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">    &lt;!--默认配置--&gt;</span><br><span class="line">    &lt;<span class="keyword">default</span>-config&gt;</span><br><span class="line">        &lt;!--数据库驱动--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;!--数据库的url--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=UTC&lt;/property&gt;</span></span><br><span class="line">        &lt;!--用户名写自己的--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;user&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;!--密码写自己的--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span>&gt;<span class="number">101024</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireIncrement&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--初始连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;initialPoolSize&quot;</span>&gt;<span class="number">10</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最大连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxPoolSize&quot;</span>&gt;<span class="number">20</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最小连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minPoolSize&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">    &lt;/<span class="keyword">default</span>-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><p><strong>加载、连接、释放工具：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> C3P0.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils_C3P0</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据源 工厂 -- &gt; 创建</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(); <span class="comment">// 不写参数代表默认的数据源</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> C3P0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> C3P0.utils.JdbcUtils_C3P0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestC3P0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils_C3P0.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 区别</span></span><br><span class="line">            <span class="comment">//使用 ? 占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">//预编译SQL,先写sqL,然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 注意点:  sqL.Date   数据库    java.sql.Date</span></span><br><span class="line">            <span class="comment">//         utiL.Date   Java    new Date().getTime()获得时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils_C3P0.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2025/03/13/2025-3-13-Git/"/>
      <url>/2025/03/13/2025-3-13-Git/</url>
      
        <content type="html"><![CDATA[<p><em>[推荐教程](<a href="https://liaoxuefeng.com/books/git/introduction/index.html">简介 - Git教程 - 廖雪峰的官方网站</a>)</em></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><em>目前世界上最先进的分布式版本控制系统（没有之一）</em></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>你要用Microsoft Word写过长篇大论：</p><ul><li>想删除一个段落，又怕将来想恢复找不回来怎么办？-＞手动保存一大堆版本</li><li>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找</li><li>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删</li><li>有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她，一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难</li></ul><p><em>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</em></p><p><em>由此诞生了Git，结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪</em></p><h2 id="集中式-vs-分布式"><a href="#集中式-vs-分布式" class="headerlink" title="集中式 vs 分布式"></a>集中式 vs 分布式</h2><h3 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h3><p>版本库集中存放在中央服务器，工作前要先从中央服务器取得最新的版本，结束后再把自己的活推送给中央服务器</p><ul><li>缺点：必须联网才能工作</li></ul><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><ul><li><p>没有“中央服务器”，每个人的电脑上都是一个完整的版本库（工作时不需要联网）</p></li><li><p>安全性要高很多</p></li><li><p>强大的分支管理</p></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h1 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h1><ul><li>所有的版本控制系统，只能跟踪文本文件的改动（<code>.txt</code>文件，网页，程序代码）</li><li>图片、视频这些二进制文件，能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来（如图片从100KB改成了120KB，但不知道改了什么）</li></ul><p><strong>注意：<strong>Windows系统不要使用自带的</strong>记事本</strong>编辑任何文本文件，因为Windows保存UTF-8编码的文件时会在每个文件开头添加了0xefbbbf，产生奇怪bug</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;文件名&gt;</span><br><span class="line">$ git commit -m <span class="string">&quot;提交说明&quot;</span></span><br></pre></td></tr></table></figure><p>一次添加所有改动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h2 id="显示差异"><a href="#显示差异" class="headerlink" title="显示差异"></a>显示差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><strong>简化输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>类似<code>1094adb...</code>的是<code>commit id</code>（版本号）</p><ul><li><code>HEAD</code>：表示当前版本（最新的提交）<code>1094adb...</code></li><li><code>HEAD^</code>：上一个版本</li><li><code>HEAD^^</code>：上上一个版本</li></ul><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><h2 id="回到过去版本"><a href="#回到过去版本" class="headerlink" title="回到过去版本"></a>回到过去版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><ul><li><code>--hard</code>：回退到上个版本的已提交状态</li><li><code>--soft</code>：回退到上个版本的未提交状态</li><li><code>--mixed</code>：回退到上个版本已添加但未提交的状态</li></ul><p>**注意：**回退后查看<code>git log</code>未来的版本会消失</p><h2 id="回到未来版本"><a href="#回到未来版本" class="headerlink" title="回到未来版本"></a>回到未来版本</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>找到<code>append GPL</code>的<code>commit id</code>：<code>1094adb...</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><em>找不到新版本的<code>commit id</code></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><style>.eedponiiekpi{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/git_head1-1743815415924-6.png" class="eedponiiekpi" alt="git_head1"><p>改为指向<code>add distributed</code>：</p><style>.rlmdwbbycjco{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/git_head2-1743815375779-4.png" class="rlmdwbbycjco" alt="git_head2"><p>同时把工作区的文件更新</p><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p>工作区：（Working Directory），即电脑里能看到的目录</p><style>.wblmyudlxium{zoom:80%;}</style><img src="/2025/03/13/2025-3-13-Git/working_directory.png" class="wblmyudlxium" alt="working_directory"><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p>版本库：（Repository）工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的<strong>暂存区</strong>，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><style>.gcuwsgqjpahm{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/repository.png" class="gcuwsgqjpahm" alt="repository"><ul><li><code>git add</code>：实际上是把文件修改添加到暂存区</li><li><code>git commit</code>：提交更改，实际上是把暂存区的所有内容提交到当前分支</li></ul><p><strong>工作流程：<strong>需要提交的文件修改通通放到</strong>暂存区</strong>，然后，一次性提交暂存区的所有修改。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>对<code>readme.txt</code>做个修改，在工作区新增一个<code>LICENSE</code>文本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">LICENSE</span><br></pre></td></tr></table></figure><p><code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，状态是<code>Untracked</code></p><p>用两次命令<code>git add</code>把<code>readme.txt</code>和<code>LICENSE</code>都添加后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   LICENSE</span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><p>现在的暂存区：</p><style>.gtyxnbtarnuw{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/stage1.png" class="gtyxnbtarnuw" alt="stage1"><p>提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;understand how stage works&quot;</span></span><br><span class="line">[master e43a48b] understand how stage works</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><style>.ussmmoyfmnew{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/stage2.png" class="ussmmoyfmnew" alt="stage2"><h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><h2 id="管理修改-1"><a href="#管理修改-1" class="headerlink" title="管理修改"></a>管理修改</h2><p><strong>关键：Git跟踪并管理的是修改，而非文件</strong>，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="工作区-1"><a href="#工作区-1" class="headerlink" title="工作区"></a>工作区</h3><p><em>改乱了工作区某个文件的内容，想直接丢弃工作区的修改</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>把<code>readme.txt</code>文件在工作区的修改全部撤销</p><ul><li><code>readme.txt</code>自修改后还没有被放到暂存区：修改就回到和版本库一模一样的状态</li><li><code>readme.txt</code>已经添加到暂存区后，又作了修改：撤销修改回到添加到暂存区后的状态</li></ul><p>**原则：**让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态</p><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p><em>不但改乱了工作区某个文件的内容，还添加到了暂存区</em></p><p>**第一步：**用命令<code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉（unstage），重新放回工作区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">Mreadme.txt</span><br></pre></td></tr></table></figure><p>**第二步：**按工作区操作</p><h3 id="版本库-1"><a href="#版本库-1" class="headerlink" title="版本库"></a>版本库</h3><p><em>错误已经提交到版本库</em></p><p>参考版本回退</p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>已经添加一个新文件<code>test.txt</code>到Git并且提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add test.txt&quot;</span></span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure><h2 id="文件管理器中删除"><a href="#文件管理器中删除" class="headerlink" title="文件管理器中删除"></a>文件管理器中删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> test.txt</span><br></pre></td></tr></table></figure><p>但是，Git的工作区和版本库会不一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="从版本库中删除文件"><a href="#从版本库中删除文件" class="headerlink" title="从版本库中删除文件"></a>从版本库中删除文件</h2><p>情况一：确实要从版本库中删除该文件</p><ol><li><code>git remove</code></li><li><code>git commit</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> test.txt</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;test.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;remove test.txt&quot;</span></span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><h3 id="恢复删除文件"><a href="#恢复删除文件" class="headerlink" title="恢复删除文件"></a>恢复删除文件</h3><p>情况二：不小心删错了</p><p>误删的文件恢复到最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p><em>GitHub是一个提供Git仓库托管服务的神奇网站</em></p><ul><li><p>创建ssh key：</p><p>ssh key在用户主目录下的<code>.ssh</code>目录下的<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><code>id_rsa</code>是私钥，不能泄露出去</p><p><code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></li><li><p>登录GitHub：</p><p>-＞Account setting -＞SSH Key ：填上名字，粘贴<code>id_rsa.pub</code>文件的内容</p></li></ul><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p><em>在本地创建了一个Git仓库后，在GitHub也创建一个Git仓库，并且让这两个仓库进行远程同步，这样GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</em></p><p>GitHub右上角 -＞ Create a new repo -＞填写仓库名，其他保持默认设置 -＞ Create repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure><ul><li>把<code>git@github.com:michaelliao/learngit.git</code>换成自己仓库的链接</li><li><code>origin</code>：（默认）是远程仓库的名字，可以修改（如<code>github</code>）</li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p><code>git push origin master</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 20, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (15/15), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure><p>把当前分支<code>master</code>推送到远程</p><p><code>-u</code>参数：Git会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，以后的推送或者拉取时可简化命令</p><p>（只有在这个分支下工作可以简化命令为<code>git push</code>，<code>git pull</code>）</p><ul><li>注意：现在本地仓库的主分支一般都为<code>main</code></li></ul><h2 id="SSH-警告"><a href="#SSH-警告" class="headerlink" title="SSH 警告"></a>SSH 警告</h2><p>第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;github.com (xx.xx.xx.xx)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>输入<code>yes</code>回车即可</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;github.com&#x27;</span> (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><p><code>git remote rm &lt;name&gt;</code></p><p><code>git remote -v</code>：查看远程库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learn-git.git (push)</span><br><span class="line"></span><br><span class="line">$ git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure><p>此处的“删除”是指解除了本地和远程的绑定关系，并不是物理上删除了远程库，远程库本身并没有任何改动。</p><p>要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p><code>git clone</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:michaelliao/gitskills.git</span><br><span class="line">Cloning into <span class="string">&#x27;gitskills&#x27;</span>...</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p><em>假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</em><br><em>有了分支，你可以创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</em></p><p>在版本回退里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个<strong>分支</strong>。在Git里，这个分支叫<strong>主分支</strong>，即<code>master</code>分支。（现在是<code>main</code>）</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><style>.jkwiaxvmmido{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_start.png" class="jkwiaxvmmido" alt="branch_start"><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><h3 id="创建后"><a href="#创建后" class="headerlink" title="创建后"></a>创建后</h3><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><style>.paxcxyyqxsxe{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_create.png" class="paxcxyyqxsxe" alt="branch_creat"><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化</p><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><style>.etdmdpvyqfup{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_move.png" class="etdmdpvyqfup" alt="branch_move"><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><style>.tfuejlxmelkk{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_merge.png" class="tfuejlxmelkk" alt="branch_merge"><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><style>.vdicchtjyosq{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_delete.png" class="vdicchtjyosq" alt="branch_delete"><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p><code>git checkout -b &lt;name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><p><code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h2><p><code>git branch</code></p><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>提交文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;branch test&quot;</span></span><br><span class="line">[dev b17d20e] branch <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p><code>git checkout master</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><style>.fvdbtbxnonhe{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_checkout.png" class="fvdbtbxnonhe" alt="branch_checkoout"><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>创建并切换到新的<code>dev</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure><p>直接切换到已有的<code>master</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch maste</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p><code>git merge &lt;name&gt;</code></p><p><code>git merge</code>命令用于合并指定分支到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><ul><li><code>Fast-forward</code>：这次合并是“快进模式”</li></ul><p>合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p><code>git branch -d &lt;name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p><code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><style>.yjgqdukigrvm{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/conflict.png" class="yjgqdukigrvm" alt="conflict"><p>这种情况下，Git无法执行“快速合并”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure><p><code>git status</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>直接进入文档编辑器，改变冲突部分为最终的文档，再提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><style>.eksohfishokb{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/conflict_solve.png" class="eksohfishokb" alt="conflict_solve"><p>最后，删除<code>feature1</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure><h2 id="查看分支历史"><a href="#查看分支历史" class="headerlink" title="查看分支历史"></a>查看分支历史</h2><p><code>git log --graph</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch <span class="built_in">test</span></span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure><ul><li><code>--graph</code>：在日志旁以<code>ASCII</code>图形显示分支与合并历史</li><li><code>--pretty</code>：自定义格式化显示历史提交信息<ol><li><code>oneline</code>：一行显示，只显示哈希值和提交说明</li></ol></li><li><code>--abbrev-commit</code>：仅显示<code>SHA-1</code>校验和的前几个字符，而非所有的40个字符</li></ul><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>通常，合并分支时，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><h2 id="–no-ff-方式的-merge"><a href="#–no-ff-方式的-merge" class="headerlink" title="–no-ff 方式的 merge"></a>–no-ff 方式的 merge</h2><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br><span class="line">Switched to a new branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;add merge&quot;</span></span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p><code>git log</code>查看分支历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure><style>.tflzobicxuju{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/--no-ff.png" class="tflzobicxuju" alt="--no-ff"><h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><ul><li><code>master</code>分支：非常稳定，仅用来发布新版本，平时不能在上面工作</li><li><code>dev</code>分支：不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</li><li>自己的分支：你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并</li></ul><style>.tdypsuituqsq{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/branch_strategy.png" class="tdypsuituqsq" alt="branch_strategy"><h2 id="bug-分支"><a href="#bug-分支" class="headerlink" title="bug 分支"></a>bug 分支</h2><p><em>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，当前正在<code>dev</code>上进行的工作还没有提交</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><h3 id="储藏当前工作"><a href="#储藏当前工作" class="headerlink" title="储藏当前工作"></a>储藏当前工作</h3><p><code>git stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch <span class="string">&#x27;issue-101&#x27;</span></span><br><span class="line"><span class="comment"># 修复bug并提交</span></span><br><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;fix bug 101&quot;</span></span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> <span class="comment"># 合并bug分支并删除</span></span><br><span class="line"> $ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">$ git merge --no-ff -m <span class="string">&quot;merged bug fix 101&quot;</span> issue-101</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><h3 id="回到当前工作"><a href="#回到当前工作" class="headerlink" title="回到当前工作"></a>回到当前工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><ul><li><p><code>git status</code>：无法查看被储藏的工作</p></li><li><p><code>git stash list</code>：查看被储藏的工作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><ul><li><code>git stash pop</code>：恢复同时把<code>stash</code>内容删去</li><li><code>git stash apply</code>：恢复，不删除<code>stash</code>内容（删除需要用<code>git stash drop</code>）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure><ul><li>恢复指定的<code>stash</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><h3 id="在其他分支上修复同样的-bug"><a href="#在其他分支上修复同样的-bug" class="headerlink" title="在其他分支上修复同样的 bug"></a>在其他分支上修复同样的 bug</h3><p><code>git cherry-pick &lt;commit id&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><h2 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h2><p><em>软件开发中，总有无穷无尽的新的功能要不断添加进来。</em></p><p><em>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</em></p><p><em>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新分支准备开发</span></span><br><span class="line">$ git switch -c feature-vulcan</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature-vulcan&#x27;</span></span><br><span class="line"><span class="comment"># 开发完毕</span></span><br><span class="line">$ git add vulcan.py</span><br><span class="line">$ git status</span><br><span class="line">On branch feature-vulcan</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   vulcan.py</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add feature vulcan&quot;</span></span><br><span class="line">[feature-vulcan 287773e] add feature vulcan</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 vulcan.py</span><br><span class="line"><span class="comment"># 切回dev，准备合并</span></span><br><span class="line">$ git switch dev</span><br><span class="line"><span class="comment"># 接到上级命令，因经费不足，新功能必须取消！</span></span><br><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch <span class="string">&#x27;feature-vulcan&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D feature-vulcan&#x27;</span>.</span><br></pre></td></tr></table></figure><h3 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h3><p>支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><p>从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code></p><h2 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h2><ul><li><code>git remote</code></li><li><code>git remote -v</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到<code>push</code>的地址</p><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>推送分支：把该分支上的所有本地提交推送到远程库，推送时，要指定本地分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line"><span class="comment"># 推送其他分支</span></span><br><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><p><strong>需要推送的分支：</strong></p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h2 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:michaelliao/learngit.git</span><br><span class="line">Cloning into <span class="string">&#x27;learngit&#x27;</span>...</span><br><span class="line">remote: Counting objects: 40, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (21/21), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class="line">Receiving objects: 100% (40/40), <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (14/14), <span class="keyword">done</span>.</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li><code>clone</code>时只能把远程库的<code>master</code>分支clone下来</li></ul><p><strong>创建远程<code>origin</code>的<code>dev</code>分支到本地</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p>现在可以在dev分支上工作，并push到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add env&quot;</span></span><br><span class="line">[dev 7a5e5dd] add <span class="built_in">env</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure><h2 id="推送冲突"><a href="#推送冲突" class="headerlink" title="推送冲突"></a>推送冲突</h2><p><em>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送出现失败</em></p><p>**解决方法：**先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><p>注意：不能直接在本地分支<code>git pull</code></p><ol><li><p>设置上游分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch <span class="string">&#x27;dev&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;dev&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure><ul><li><code>origin/dev</code>：远程分支名</li><li><code>dev</code>：本地分支名</li></ul></li><li><p>再pull</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add/add): Merge conflict <span class="keyword">in</span> env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure></li><li><p>合并有冲突：按解决冲突的方法解决后push</p></li></ol><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><strong>适用情况：</strong></p><ul><li>发生推送冲突，需要先pull，在本地合并冲突，再push</li><li>多次pull-合并-push会造成分支历史（git log）增加很多没用的东西，很乱很复杂</li></ul><p>**目的：**简化分支历史，让Git的提交历史一条直线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对hello.py这个文件做了两次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 582d922 (HEAD -&gt; master) add author</span><br><span class="line">* 8875536 add comment</span><br><span class="line">* d1be385 (origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix <span class="built_in">env</span> conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add <span class="built_in">env</span></span><br><span class="line">| * | 7bd91f1 add new <span class="built_in">env</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 尝试推送</span></span><br><span class="line">$ git push origin master</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;git@github.com:michaelliao/learngit.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">&#x27;git pull ...&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br><span class="line"><span class="comment"># 说明有人先于我们推送了远程分支。按照经验，先pull一下</span></span><br><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From github.com:michaelliao/learngit</span><br><span class="line">   d1be385..f005ed4  master     -&gt; origin/master</span><br><span class="line"> * [new tag]         v1.0       -&gt; v1.0</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> hello.py | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"><span class="comment"># 用git status查看状态</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 3 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="comment"># 用git log 看看</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e0ea545 (HEAD -&gt; master) Merge branch <span class="string">&#x27;master&#x27;</span> of github.com:michaelliao/learngit</span><br><span class="line">|\  </span><br><span class="line">| * f005ed4 (origin/master) <span class="built_in">set</span> <span class="built_in">exit</span>=1</span><br><span class="line">* | 582d922 add author</span><br><span class="line">* | 8875536 add comment</span><br><span class="line">|/  </span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>发现问题：<strong>提交历史分叉</strong></p><ul><li><code>git rebase</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase</span><br><span class="line">First, rewinding <span class="built_in">head</span> to replay your work on top of it...</span><br><span class="line">Applying: add comment</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Applying: add author</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">Mhello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 (origin/master) <span class="built_in">set</span> <span class="built_in">exit</span>=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>分叉的提交变成一条直线</p><p>原理：Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后（即重新git pull之后），这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的。</p><p>最后，通过push操作把本地分支推送到远程</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p><em>发布一个版本时，我们通常先在版本库中打一个标签（tag）。这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</em></p><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><ol><li>切换到需要打标签的分支上：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>git tag &lt;name&gt;</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure><h3 id="对之前的版本创建标签"><a href="#对之前的版本创建标签" class="headerlink" title="对之前的版本创建标签"></a>对之前的版本创建标签</h3><p><code>git tag &lt;name&gt; &lt;commit id&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch <span class="built_in">test</span></span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br><span class="line"></span><br><span class="line">$ git tag v0.9 f52c633</span><br></pre></td></tr></table></figure><h3 id="创建带有说明的标签"><a href="#创建带有说明的标签" class="headerlink" title="创建带有说明的标签"></a>创建带有说明的标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span> 1094adb</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>：指定标签名</li><li><code>-m</code>：指定说明文字</li></ul><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>查看所有标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>查看标签信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h2><p><code>git push origin &lt;tagname&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure><p><strong>一次性推送全部尚未推送到远程的本地标签：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>git tag -d &lt;name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag <span class="string">&#x27;v0.1&#x27;</span> (was f15b0dd)</span><br></pre></td></tr></table></figure><p><strong>标签已经推送到远程：</strong></p><ol><li><p>先从本地删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag <span class="string">&#x27;v0.9&#x27;</span> (was f52c633)</span><br></pre></td></tr></table></figure></li><li><p>从远程删除</p><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure></li></ol><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><em>如何参与一个开源项目?</em></p><h2 id="Fork-项目"><a href="#Fork-项目" class="headerlink" title="Fork 项目"></a>Fork 项目</h2><p>比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap%EF%BC%8C%E7%82%B9%E2%80%9CFork%E2%80%9D%E5%B0%B1%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8B%E5%85%8B%E9%9A%86%E4%BA%86%E4%B8%80%E4%B8%AAbootstrap%E4%BB%93%E5%BA%93">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库</a></p><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>然后，从自己的账号下clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:michaelliao/bootstrap.git</span><br></pre></td></tr></table></figure><p>**一定要从自己的账号下clone仓库，这样你才能推送修改。**如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><style>.glscstvmoxvp{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/use_github.png" class="glscstvmoxvp" alt="use_github"><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。</p><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><p>使用Gitee和使用GitHub类似，我们在Gitee上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -&gt; 菜单“设置”，然后在左侧菜单选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去</p><h2 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origingit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><ol><li>删除已有的GitHub远程库，再关联Gitee的远程库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git remote -v</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">origingit@gitee.com:liaoxuefeng/learngit.git (push)</span><br></pre></td></tr></table></figure><ol start="2"><li>关联多个仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">git remote -v</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">giteegit@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">githubgit@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到GitHub，使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure><p>如果要推送到Gitee，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><style>.tytymlgpusns{zoom:67%;}</style><img src="/2025/03/13/2025-3-13-Git/gitee_github.png" class="tytymlgpusns" alt="gitee_github">]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行</title>
      <link href="/2025/03/12/2025-3-12-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2025/03/12/2025-3-12-%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="GUI、CLI"><a href="#GUI、CLI" class="headerlink" title="GUI、CLI"></a>GUI、CLI</h2><p><em>CSGO就不是命令行软件</em></p><ul><li><strong>GUI：</strong> *Command-Line Interface，命令行界面，*命令行界面用鼠标双击会跳窗口的软件</li><li><strong>CLI：</strong> <em>Graphical User Interface，图形用户界面</em>在终端里敲键盘才能用的软件</li></ul><table><thead><tr><th>Type</th><th>GUI</th><th>CLI</th></tr></thead><tbody><tr><td>浏览器</td><td>Chrome&#x2F;Firefox</td><td>w3m&#x2F;lynx</td></tr><tr><td>图像处理</td><td>PhotoShop</td><td>ImageMagick</td></tr><tr><td>视频编辑</td><td>Pr&#x2F;Davinci resolve</td><td>FFmpeg</td></tr><tr><td>文本编辑</td><td>VSCode&#x2F;Sublime</td><td>Vim&#x2F;TECO</td></tr></tbody></table><h2 id="为什么要使用命令行"><a href="#为什么要使用命令行" class="headerlink" title="为什么要使用命令行"></a>为什么要使用命令行</h2><p>因为我们用计算机的目的不同：程序员要写程序</p><ul><li><strong>而命令行比GUI更高效</strong></li></ul><p>比如<code>apt install gcc</code>一行就能安装完整的C语言编译工具</p><h3 id="example：-比较两个文件是否相同"><a href="#example：-比较两个文件是否相同" class="headerlink" title="*example：*比较两个文件是否相同"></a>*example：*比较两个文件是否相同</h3><ul><li><p>命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文本文件的比较：vimdiff file1 file2</span><br><span class="line">非文本文件的比较：diff file1 file2</span><br><span class="line">很大的文件：<span class="built_in">md5sum</span> file1 file2</span><br></pre></td></tr></table></figure></li><li><p>GUI：</p><p>先找一个有这个功能的软件，然后下载，然后安装，然后看看怎么用，然后比较</p></li></ul><p><strong>更重要的是，有些复杂的事情GUI几乎做不了</strong></p><h3 id="example：-列出一个C语言项目中所有被包含过的头文件"><a href="#example：-列出一个C语言项目中所有被包含过的头文件" class="headerlink" title="*example：*列出一个C语言项目中所有被包含过的头文件"></a>*example：*列出一个C语言项目中所有被包含过的头文件</h3><ul><li><p>GUI：</p><p><strong>好像没法做</strong></p></li><li><p>命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.[ch]&quot;</span> | xargs <span class="built_in">cat</span> | grep <span class="string">&quot;^#include&quot;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> </span><br></pre></td></tr></table></figure></li></ul><p><strong>命令行的优点：</strong></p><ol><li>每个小工具只做一件事</li><li>小工具采用文本进行输入输出，从而易于使用</li><li>通过小工具之间的组合来解决复杂问题</li></ol><h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><ul><li>Vim &#x2F; Emacs</li></ul><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>[菜鸟教程](<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程</a>)</p><p>特点：命令式编程。Vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ul><li><code>h,j,k,l</code>：左，下，上，右</li><li><code>i</code>：切换到输入模式，在光标当前位置开始输入文本</li><li><code>x</code>：删除当前光标所在处的字符。</li><li><code>:</code>：切换到底线命令模式，以在最底一行输入命令。</li><li><code>a</code>：进入插入模式，在光标下一个位置开始输入文本。</li><li><code>o</code>：在当前行的下方插入一个新行，并进入插入模式。</li><li><code>O</code>：在当前行的上方插入一个新行，并进入插入模式。</li><li><code>dd</code>：剪切当前行。</li><li><code>yy</code>：复制当前行。</li><li><code>p</code>：（小写）粘贴剪贴板内容到光标下方。</li><li><code>P</code>：（大写）粘贴剪贴板内容到光标上方。</li><li><code>u</code>：撤销上一次操作。</li><li><code>Ctrl + r</code>：重做上一次撤销的操作。</li><li><code>:w</code>：保存文件。</li><li><code>:q</code>：退出 Vim 编辑器。</li><li><code>:q!</code>：强制退出Vim 编辑器，不保存修改。</li></ul><h3 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><p>[Emacs教程——知乎](<a href="https://zhuanlan.zhihu.com/p/385214753">专业 Emacs 入门（一） - 知乎</a>)</p><p>**为什么有必要了解一些Emacs键位：**因为一些发行版自带的终端不支持Vim键位而支持Emacs快捷键</p><ul><li><code>Ctrl+a</code>：跳转句首</li><li><code>Ctrl+e</code>：跳转句末</li><li><code>Alt+f</code>、<code>Alt+b</code>：在单词间跳转</li><li><code>Alt+c</code>：跳转到下一个单词，并将前一个单词的首字母大写</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p><a href="https://blog.csdn.net/wzk4869/article/details/132855372?fromshare=blogdetail&sharetype=blogdetail&sharerId=132855372&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">Linux常用命令</a></p><ul><li><p><code>ls</code>：列出当前目录中的文件和子目录</p></li><li><p><code>touch &lt;filename&gt;</code> ：创建新文件</p></li><li><p><code>echo &lt;string&gt;</code>：输出字符串</p></li><li><p><code>rm</code>：删除文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file_name</span><br><span class="line"><span class="built_in">rm</span> -r directory_name  <span class="comment"># 递归删除目录及其内容</span></span><br></pre></td></tr></table></figure></li><li><p><code>mkdir</code>：创建新目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> directory_name</span><br></pre></td></tr></table></figure></li><li><p><code>mv</code>：移动或重命名文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old_name new_name</span><br></pre></td></tr></table></figure></li><li><p><code>pwd</code>：显示当前工作目录的路径</p></li><li><p><code>cat</code>：连接和显示文件内容</p></li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul><li><p><code>Ctrl+z</code>：将一个正在前台执行的命令挂起</p></li><li><p><code>bg</code>：将一个在后台暂停的命令，变成继续执行</p></li><li><p><code>jobs</code>：查看当前有多少在后台运行的命令</p></li><li><p><code>fg</code>：将后台中的命令调至前台继续运行</p></li><li><p><code>kill -9 &lt;PID&gt;</code>：强制结束进程</p></li><li><p><code>ps aux</code>：显示所有进程</p></li><li><p><code>top</code>：实时监视系统资源（<code>Ctrl+c</code>退出）</p></li><li><p><code>htop</code>：更友好的进程监视器（<code>Ctrl+c</code>退出）</p></li></ul><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重定向</span><br><span class="line">管道</span><br><span class="line">xargs</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><em>改变目的地</em></p><p>改变命令的标准输入、标准输出和标准错误的默认目的地</p><p>输入重定向：</p><ul><li><code>&lt;</code>：将文件的内容作为命令的输入</li></ul><p>输出重定向：</p><ul><li><code>&gt;</code>：将命令的输出重定向到文件中（覆盖原有内容</li><li><code>&gt;&gt;</code>：将命令的输出追加到文件末尾</li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p><em>连接输入输出</em></p><p><code>|</code>：用于连接程序间输入输出的缓冲区，将一个命令的标准输出（stdout）直接连接到另一个命令的标准输入</p><ul><li><p><code>|</code>左边命令的输出就会作为<code>|</code>右边命令的输入</p></li><li><p>可连续使用</p><p><em>example：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 /bin 目录下的文件数量</span></span><br><span class="line"><span class="built_in">ls</span> /bin | <span class="built_in">wc</span> -l</span><br><span class="line">&gt; 907</span><br></pre></td></tr></table></figure></li></ul><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p><code>xargs</code>：将标准输入转变为命令的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a.c b.c c.c&quot;</span> | xargs  <span class="built_in">rm</span></span><br><span class="line"><span class="built_in">rm</span> <span class="string">&quot;a.c b.c c.c&quot;</span></span><br></pre></td></tr></table></figure><h2 id="通配符、正则表达式"><a href="#通配符、正则表达式" class="headerlink" title="通配符、正则表达式"></a>通配符、正则表达式</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th>通配符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配多个字符</td><td><code>*.txt</code>匹配所有以<code>.txt</code>结尾的文件</td></tr><tr><td><code>?</code></td><td>匹配任意单个字符</td><td><code>file?.txt</code>匹配<code>file1.txt</code>，<code>filea.txt</code></td></tr><tr><td><code>[]</code></td><td>匹配括号中的任意字符</td><td><code>file[1-2].txt</code>匹配<code>file1.txt</code>，<code>file2.txt</code>，<code>file3.txt</code></td></tr><tr><td><code>[!]</code></td><td>匹配不在括号中的任意字符</td><td><code>file[!1-3].txt</code>匹配除<code>file1.txt</code>，<code>file2.txt</code>，<code>file3.txt</code>的文件</td></tr><tr><td><code>&#123;&#125;</code></td><td>匹配指定的字符串</td><td><code>file&#123;1,2&#125;.txt</code>匹配<code>file1.txt</code>，<code>file2.txt</code></td></tr></tbody></table><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><code>POSIX</code> &#x2F; <code>Python</code> &amp; <code>Perl</code> &#x2F; <code>grep</code> &amp; <code>egrep</code>使用规范不一样，这里先略过</p><h2 id="阅读文档"><a href="#阅读文档" class="headerlink" title="阅读文档"></a>阅读文档</h2><blockquote><p>东西好多，我记不住&#x2F;学不会怎么办？</p></blockquote><p>最重要的Linux命令：<code>man</code></p><ul><li>查阅命令&#x2F;库函数&#x2F;系统文件等内容的手册</li><li><code>man man</code>：学习如何RTFM（Read The Friendly Manual）</li><li><code>man ls</code>：查看如何使用<code>ls</code>命令</li></ul><p>如何学习正则表达式？：<code>man 7 regex</code></p><blockquote><p>手册上没有怎么办？</p></blockquote><p>基本上不太可能，如果真的没有：</p><ul><li>Search The Friendly Web（Google、StackOverflow）</li><li>Ask The Friendly LLM（ChatGPT）</li><li>Read The Source Code</li></ul><h2 id="自动化、脚本"><a href="#自动化、脚本" class="headerlink" title="自动化、脚本"></a>自动化、脚本</h2><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>我们通过小工具的组合来解决复杂问题</p><p><em>example：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.[ch]&quot;</span> | xargs <span class="built_in">cat</span> | grep <span class="string">&quot;^#include&quot;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> </span><br></pre></td></tr></table></figure><ul><li><code>find . -name &quot;\*.[ch]&quot;</code>：在当前目录查找所有以<code>.c</code>、<code>.h</code>结尾的文件，并将结果通过管道传给下一条命令</li><li><code>xargs cat</code>：运用<code>xargs</code>打印这些内容，并将结果通过管道传给下一条命令</li><li><code>grep &quot;^#include&quot;</code>：用<code>grep</code>查找所有以<code>#include</code>开头的内容，并将结果通过管道传给下一条命令</li><li><code>sort</code>：对上面的结果进行排序，并将结果通过管道传给下一条命令</li><li><code>uniq</code>：对上面的结果进行去重</li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>把命令写到一个文件里面</p><ul><li>可以重复执行，不用每次都手动输入了</li><li>可以被其他脚本调用，自动化工作</li><li>效率提升</li></ul><p><strong>Windows 批处理文件 &#x2F; Powershell：</strong></p><ul><li><p><a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/">Introduction to PowerShell - Training | Microsoft Learn</a></p></li><li><p><a href="https://learn.microsoft.com/en-us/powershell/">PowerShell Documentation - PowerShell | Microsoft Learn</a></p></li></ul><h2 id="Unix-Bash-Zsh-Fish"><a href="#Unix-Bash-Zsh-Fish" class="headerlink" title="Unix Bash&#x2F;Zsh&#x2F;Fish"></a>Unix Bash&#x2F;Zsh&#x2F;Fish</h2><p><em>Unix 是一种操作系统的设计理念和技术规范，Bash、Zsh 和 Fish 都是 Unix 系统（包括 Linux 和 macOS）中使用的命令行解释器（shell）</em></p><ul><li><strong>Bash：</strong> Linux 系统中默认的 Shell，bash 的特点是简单而实用</li><li>**Zsh：**zsh 是一个功能更为强大的 Shell，提供命令补全、自动纠错、语法高亮等丰富的特性，可定制性也更好</li><li><strong>Fish：</strong>（Friendly Interactive Shell）相对于 bash 和 zsh 来说比较新的 Shell。主要特点是易于使用、友好、可定制性好等。它提供了很好的操作体验，包括语法高亮、命令补全等功能。</li></ul><h2 id="命令行的本质"><a href="#命令行的本质" class="headerlink" title="命令行的本质"></a>命令行的本质</h2><p>工具类型的分布：</p><p>大部分是可执行文件（ELF），小部分是脚本</p><h1 id="Linux-实践"><a href="#Linux-实践" class="headerlink" title="Linux 实践"></a>Linux 实践</h1><h2 id="在-Windows-上运行-Linux"><a href="#在-Windows-上运行-Linux" class="headerlink" title="在 Windows 上运行 Linux"></a>在 Windows 上运行 Linux</h2><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><p><em>Windows Subsystem for Linux</em></p><ul><li><strong>性能</strong>：由于WSL直接在Windows内核之上运行Linux二进制文件，它提供了接近原生的性能，特别是在I&#x2F;O操作方面有了显著改进（尤其是在WSL 2中）。</li><li><strong>易用性</strong>：非常易于安装和使用，只需通过Microsoft Store下载所需的Linux发行版并按照提示进行设置即可。</li><li><strong>资源使用</strong>：因为不需要虚拟化整个操作系统，所以资源消耗相对较低。</li><li><strong>适用场景</strong>：适合需要在Windows环境中运行Linux命令行工具的开发者，特别是对于那些想要快速启动Linux环境而无需管理完整虚拟机的人。</li></ul><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p><em>如 VMware, VirtualBox</em></p><ul><li><strong>性能</strong>：虽然现代虚拟化技术已经相当高效，但与WSL相比，虚拟机仍然会带来一定的性能开销，尤其是在图形处理和I&#x2F;O密集型任务中。</li><li><strong>易用性</strong>：安装过程较为复杂，需要配置虚拟硬盘、内存分配等参数，不过一旦设置完成，用户体验与实际物理机相似。</li><li><strong>资源使用</strong>：需要更多的系统资源，包括CPU、内存和磁盘空间，因为它实际上是在模拟一个完整的操作系统环境。</li><li><strong>适用场景</strong>：适用于需要在一个完全隔离的环境中测试软件或运行Linux桌面应用的情况。</li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li><strong>性能</strong>：Docker容器共享主机系统的内核，因此其性能损失极小，非常适合部署应用程序和服务。</li><li><strong>易用性</strong>：对于熟悉容器概念的用户来说，Docker易于使用且功能强大，但它可能对初学者不太友好。</li><li><strong>资源使用</strong>：比虚拟机更轻量，因为它不虚拟化整个操作系统层。</li><li><strong>适用场景</strong>：主要用于开发和部署应用程序，尤其是微服务架构的应用程序。</li></ul><h3 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h3><p><em>Dual Boot：双系统启动</em></p><ul><li><strong>性能</strong>：提供完全的原生Linux体验，没有性能损失。</li><li><strong>易用性</strong>：安装过程复杂，涉及硬盘分区和引导加载程序配置，而且每次只能运行一个操作系统。</li><li><strong>资源使用</strong>：取决于你如何分配硬盘空间给两个系统，通常需要为每个系统预留足够的存储空间。</li><li><strong>适用场景</strong>：适合那些需要全面访问Linux功能，包括硬件支持、图形界面等，并愿意接受切换操作系统的不便之处的用户。</li></ul><h2 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h2><h3 id="开启CPU虚拟化"><a href="#开启CPU虚拟化" class="headerlink" title="开启CPU虚拟化"></a>开启CPU虚拟化</h3><p>Windows搜索栏 -＞ 任务管理器 -＞ 性能 -＞ CPU</p><h3 id="开启Windows功能"><a href="#开启Windows功能" class="headerlink" title="开启Windows功能"></a>开启Windows功能</h3><p>Windows搜索栏 -＞ 控制面板 -＞ 程序 -＞ 程序和功能 -＞启用或关闭Windows功能 </p><p>打开：</p><ol><li>适用于Linux的Windows子系统</li><li>虚拟机平台（Virtual Machine Platform）</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows搜索栏 -＞ 命令提示符 -＞右键“以管理员身份运行”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --install --web-download </span><br><span class="line"><span class="comment"># 默认下载Ubuntu</span></span><br></pre></td></tr></table></figure><p>下载其他Linux版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --online</span><br><span class="line">wsl --install &lt;版本名称&gt; --web-download</span><br></pre></td></tr></table></figure><p>后按提示启动Ubuntu，设置用户名、密码</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister &lt;版本名称&gt;</span><br></pre></td></tr></table></figure><h2 id="Linux配置-VSCode-C-C-开发环境"><a href="#Linux配置-VSCode-C-C-开发环境" class="headerlink" title="Linux配置 VSCode C&#x2F;C++开发环境"></a>Linux配置 VSCode C&#x2F;C++开发环境</h2><p>[Linux&#x2F;Ubuntu中VSCode配置C++&#x2F;C环境](Linux&#x2F;Ubuntu中Vs Code配置C++&#x2F;C环境)</p><ol><li>安装扩展WSL</li></ol><ul><li><code>sudo apt update</code>：更新软件包列表及其版本</li><li><code>sudo apt install build-essential gdb</code>：包括但不限于 GCC (GNU Compiler Collection)、G++ (GCC 的 C++ 编译器)、make 等</li></ul><ol><li><p>远程资源管理器 -＞ WSL目标 -＞连接Ubuntu</p></li><li><p>安装插件：（运行）</p><ul><li>C&#x2F;C++ （C&#x2F;C++ Extension Pack）</li><li>Code Runner</li></ul><p>先写一段代码运行，并选择编译器，自动生成.vscode文件</p></li><li><p>配置调试文件</p><p>（现在除非是自定义调试，其实可以不需要了，直接右上角调试即可）</p><p>在.vscode下配置文件<code>launch.json</code>，<code>tasks.json</code>（没有就新建）</p><p>launch.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>task.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;relative&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样你就可以用左边的运行和调试了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赛博扫盲</title>
      <link href="/2025/03/11/2025-3-11-%E8%B5%9B%E5%8D%9A%E6%89%AB%E7%9B%B2/"/>
      <url>/2025/03/11/2025-3-11-%E8%B5%9B%E5%8D%9A%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><em>大学里和未来大多数人没有回答和解决你问题的义务，提问的路径丰富而复杂，提问的质量直接影响回答的好坏</em></p><h2 id="怎么提问题"><a href="#怎么提问题" class="headerlink" title="怎么提问题"></a>怎么提问题</h2><ul><li>**反应现场：**我遇到了什么？</li><li>**复现操作：**我是如何让这种情况产生的？</li><li>**表达需求：**我想要什么？</li></ul><h3 id="反应现场"><a href="#反应现场" class="headerlink" title="反应现场"></a>反应现场</h3><p><strong>截屏截取</strong>问题对应的提示（用什么截屏：微信、QQ、<code>prtsc</code>、第三方软件如snipaste）</p><p>截屏应该范围足够大且足够清晰，框住问题信息，这样对方才能一次性从一张图上获取尽量多的信息（问题发生时你在做什么、软件在做什么、系统是什么情况……）</p><h3 id="复现操作"><a href="#复现操作" class="headerlink" title="复现操作"></a>复现操作</h3><p>复述问题产生的过程：</p><ul><li>我在哪几个操作后出现问题？</li><li>问题是突然产生的还是在我操作后产生的？</li><li>在问题出现前有没有值得注意的现象？</li><li>我在问题发生前后干了什么？</li></ul><h3 id="表达需求"><a href="#表达需求" class="headerlink" title="表达需求"></a>表达需求</h3><p>表达自己的需求：我使用这个软件是要干什么？</p><p>是要去解决这个问题，还是仅仅不予理会？毕竟很多问题并不阻碍我们工作</p><h2 id="向谁提问题"><a href="#向谁提问题" class="headerlink" title="向谁提问题"></a>向谁提问题</h2><p><em>上网查找合适的解决方案</em></p><ul><li>浏览器搜索：Google、Edge、百度（屏蔽广告用AdGuard插件）</li><li>论坛：StackOverflow、CSDN（慎用）</li><li>AI：ChatGPT、通义千问</li><li>官方文档</li><li>个人博客</li><li>GitHub上搜索相关项目</li></ul><p>在请求他人帮助时应该遵循基本的社交礼仪，毕竟大多数的被提问者没有义务回答问题。</p><h2 id="避免的提问方式"><a href="#避免的提问方式" class="headerlink" title="避免的提问方式"></a>避免的提问方式</h2><p>一句笼统地话</p><p>看不清的照片</p><p>明显搜索引擎可以解决的问题（知识性）</p><h2 id="合适的提问方式"><a href="#合适的提问方式" class="headerlink" title="合适的提问方式"></a>合适的提问方式</h2><ul><li>完整的信息（界面、环境、提示报错信息）</li><li>完整的操作（问题前后的操作）</li><li>完整的需求（错误影响了什么，我的目的）</li></ul><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p><strong>中央处理器</strong>（Intel、AMD）</p><p>CPU的性能是多个因素综合的结果，并不与某个因素呈线性相关。每个品牌都会随时间一代代更新，每代都有不同的系列，有的系列高端，有的系列低端；每个系列也都有自己的不同型号，有的型号性能强，有的型号性能弱。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><em>example: 16 + 512</em></p><p>存储，断电丢失，读写快速</p><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><p>读写慢，断电不消失，硬盘的分区（C: D:）</p><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>**Windows：**广泛使用，适用于大多数商业软件和游戏，兼容性强</p><p>**MacOS：**苹果公司开发，用户界面优雅，集成度高，适合创意工作，但软件选择相对较少</p><p>**Linux：**开源操作系统，有多个发行版（Ubuntu，Debian）强大、灵活，适合开发和服务器使用，但用户界面和软件可能需要更多配置</p><h2 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h2><p>扩展名：可以人为改变（告诉操作系统应该通过什么方式打开文件）</p><p>**压缩文件：**如 <code>.zip</code>、<code>.rar</code>，用于打包多个文件，减少存储空间和传输时间</p><p>**PDF：**用于呈现文档，不论设备和操作系统如何，格式保持一致</p><p><strong>Word：</strong><code>.docx</code>，微软Word的文档格式，广泛用于文本处理</p><p><strong>Excel：</strong><code>.xlsx</code>，用于创建电子表格，进行数据分析和计算</p><h2 id="文件夹、路径和目录"><a href="#文件夹、路径和目录" class="headerlink" title="文件夹、路径和目录"></a>文件夹、路径和目录</h2><p><em>CSDN:<a href="https://blog.csdn.net/qianduanshuo/article/details/90612917?fromshare=blogdetail&sharetype=blogdetail&sharerId=90612917&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">学习链接</a></em></p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>文件在硬盘上真正存在的路径</p><ul><li><p>完整URL地址：如<code>https://www.zerd1y.com</code></p></li><li><p>完整盘符：如<code>C:\Users\15063\Desktop\1.txt</code></p></li></ul><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p> 相对于自己的目标文件位置</p><ul><li><code>./</code>：当前文件所在目录</li><li><code>../</code>：当前前文件所在目录的上一级目录</li><li><code>../../</code>：当前文件所在目录的上上级目录</li></ul><h2 id="可执行文件和快捷方式"><a href="#可执行文件和快捷方式" class="headerlink" title="可执行文件和快捷方式"></a>可执行文件和快捷方式</h2><p><code>.exe</code>：双击就能运行（executable）</p><p>快捷方式：可看成某个指向具体文件的单向<strong>指针</strong>，删掉快捷方式不会影响软件本身</p><h2 id="压缩软件"><a href="#压缩软件" class="headerlink" title="压缩软件"></a>压缩软件</h2><p>基本原理：字典换元</p><p>格式：<code>.zip</code>、<code>.rar</code>，前者免费，后者压缩率高</p><p>右击压缩、解压缩</p><ul><li>**WinRAR：**功能强大，支持多种压缩格式（唯一可以生成rar格式）。但收费，国内免费版有广告</li><li>**windows资源管理器：**电脑自带</li><li>**7-zip&#x2F;Nanazip：**开源，压缩率高，支持多种格式</li><li>国产压缩软件：流氓</li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li>Chrome：谷歌开发，速度快，资源丰富。内核开源：Chromium</li><li>Windows预制：IE（老，支持查）–＞ Edge（chrome内核）</li><li>Firefox：开源，隐私保护好，扩展丰富</li><li>Safari：苹果开发，MacOS和iOS设备默认浏览器，优化良好</li><li>其他国产浏览器：不推荐（半流氓）</li></ul><p>善用浏览器插件：如AdGuard屏蔽广告</p><h1 id="保护电脑"><a href="#保护电脑" class="headerlink" title="保护电脑"></a>保护电脑</h1><h2 id="软件寻找和安装"><a href="#软件寻找和安装" class="headerlink" title="软件寻找和安装"></a>软件寻找和安装</h2><p>优先考虑：官网</p><p>安装时修改路径：软件默认安装在C盘，自定义安装</p><h2 id="防毒软件"><a href="#防毒软件" class="headerlink" title="防毒软件"></a>防毒软件</h2><p>底线：永远不要在一台电脑上安装多于一个杀毒软件</p><p>我不安装，国产的杀毒软件基本都是流氓软件，平时上网注意即可</p><h2 id="软件卸载"><a href="#软件卸载" class="headerlink" title="软件卸载"></a>软件卸载</h2><ul><li>设置 - 应用 - 卸载</li><li>找到文件中的<code>uninstaller</code>运行</li><li>用卸载软件：如 geek</li></ul><h2 id="拯救C盘"><a href="#拯救C盘" class="headerlink" title="拯救C盘"></a>拯救C盘</h2><ul><li>下载安装时修改默认路径</li><li>移动文件夹</li><li>定期清理</li><li>分区调整</li></ul><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p>虚拟机（VM）：允许在同一台物理计算机上运行多个操作系统实例，提供隔离的测试环境。</p><p>例如使用 VirtualBox，VMware，WSL，Docker+vscode可以在Windows系统上运行Linux系统，黑苹果。</p><p>在操作系统课程种需要在虚拟机的Linux系统中进行实验。</p><h1 id="魔法与科学"><a href="#魔法与科学" class="headerlink" title="魔法与科学"></a>魔法与科学</h1><p><em>禁区</em></p><p><em>安全、低价、高速不可共存</em></p><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><h2 id="编程语言的发展"><a href="#编程语言的发展" class="headerlink" title="编程语言的发展"></a>编程语言的发展</h2><h3 id="机器语言（二进制代码）"><a href="#机器语言（二进制代码）" class="headerlink" title="机器语言（二进制代码）"></a>机器语言（二进制代码）</h3><p>特点：计算机能够直接理解和执行的最底层语言，由0和1组成。每条机器指令都是具体硬件架构（如x86、ARM）的专属代码</p><p>挑战：编写机器语言程序困难且易错，调试和维护也十分复杂</p><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p>特点：汇编语言是对机器语言的抽象，使用符号代替机器码的二进制表示。汇编语言比机器语言更易读，但仍然与特定硬件紧密相关。</p><p>优势：和机器语言相比，可读性和可维护性更强，编写和理解相对容易一些</p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p>特点：如Java、C等，提供更接近人类自然语言的语法和抽象，使编程更加直观和高效。它们不再直接与硬件交互，而是通过编译器或解释器来转化成机器语言</p><p>优势：易于学习和使用，支持复杂的数据结构和抽象，同时提升了编程效率和代码的可维护性</p><h2 id="现代IDE"><a href="#现代IDE" class="headerlink" title="现代IDE"></a>现代IDE</h2><p>集成开发环境（Integrated Development Environment）：如 Visual Studio Code、PyCharm、IntelliJ IDEA等提供了全面的开发支持，包括代码编辑、调试、版本控制、项目管理等功能。</p><p>插件支持：IDE通常支持各种插件，允许开发者扩展功能，如支持不同编程语言、框架、工具等</p><p>个性化：IDE可以高度自定义，包括主题、快捷键、代码格式化规则等，提供个性化的开发体验</p><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><p><em>由<strong>人工</strong>来实现一种类似人类的*<em>智能</em></em>，并让机器能够模拟和呈现它，从而让机器也具有识别、决策、判断，甚至分析、学习和创造的能力*</p><h2 id="从租金问题理解AI"><a href="#从租金问题理解AI" class="headerlink" title="从租金问题理解AI"></a>从租金问题理解AI</h2><p>参见深度学习博客（线性回归那一块）</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p><em>Baidu：<a href="%5BWindows%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%5D(https://baike.baidu.com/item/Windows%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/407192#5)">常用快捷键</a></em></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="Ctrl-键"><a href="#Ctrl-键" class="headerlink" title="Ctrl 键"></a>Ctrl 键</h3><ul><li><code>Ctrl+S</code>：保存</li><li><code>Ctrl+C</code>：复制</li><li><code>Ctrl+V</code>：粘贴</li><li><code>Ctrl+A</code>：全选</li><li><code>Ctrl+F</code>：查找</li><li><code>Crtl+Z</code>：撤销</li><li><code>Ctrl+X</code>：剪切</li><li><code>Alt+Tab</code>：切换程序（摸鱼切屏专用）</li><li><code>Alt+F4</code>：关闭窗口</li><li><strong><code>Shift+DELET</code>：永久删除（正常删除在回收站）</strong></li><li><code>Ctrl+Shift+Esc</code> &#x2F; 任务栏右键：打开任务管理器（死机必用）</li></ul><h3 id="Win-键"><a href="#Win-键" class="headerlink" title="Win 键"></a>Win 键</h3><ul><li><code>Win+R</code>：打开“运行”对话框</li><li><code>Win+向左/向右键</code>：将窗口左移&#x2F;右移</li><li><code>win+L</code>：一键锁屏</li></ul><h3 id="Fn-键"><a href="#Fn-键" class="headerlink" title="Fn 键"></a>Fn 键</h3><p><em>按需要自己查找</em></p><h3 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h3><ul><li><code>Ctrl+D</code>：复制当前行到下一行（IntelliJ IDEA）</li><li><code>Ctrl+左键</code>：查看源码、API（IntelliJ IDEA）</li><li><code>alt+enter</code>：自动生成变量名（IntelliJ IDEA）</li><li><code>ctrl+alt+s</code>：Settings（IntelliJ IDEA）</li><li><code>ctrl+0</code>：重写父类方法<em>override</em>（IntelliJ IDEA）</li><li><code>Ctrl+shift+P</code>：调整配置（vscode）</li><li><code>shift+alt+F</code>：代码格式化（vscode）</li><li><code>shift+home</code>：选中该行（sqlyog）</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><code>PrtSc</code>：截图（键盘右上角）</li></ul><h1 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h1><p>**SumatraPDF：**轻量级 PDF 阅读器 <a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer">Sumatra PDF reader download page</a></p><p>**WizTree：**超快的磁盘空间分析工具 <a href="https://www.diskanalyzer.com/download">Download WizTree</a></p><p>**Everything：**超快速的文件搜索工具 <a href="https://www.voidtools.com/zh-cn/downloads/">下载 - voidtools</a></p><p>**Powertoys：**增强 Windows 功能的工具集 <a href="https://github.com/microsoft/PowerToys">Releases · microsoft&#x2F;PowerToys</a></p><p>**Geek：**轻量级卸载工具 <a href="https://geekuninstaller.com/download">Geek Uninstaller - Download</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛博扫盲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归的从零开始实现（深度学习）</title>
      <link href="/2025/03/10/2025-3-10-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/10/2025-3-10-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><em>虽然现代的深度学习框架几乎可以自动化地进行所有这些工作，但从零开始实现可以确保我们真正知道自己在做什么。 同时，了解更细致的工作原理将方便我们自定义模型、自定义层或自定义损失函数</em></p><h1 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h1><p><em>为了简单起见，我们将<strong>根据带有噪声的线性模型构造一个人造数据集。</strong></em></p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p><strong>使用这个有限样本的数据集来恢复这个模型的参数</strong></p><p>生成一个包含1000个样本的数据集，每个样本包含从标准正态分布中采样的2个特征。</p><p>使用线性模型参数$\mathbf{w} &#x3D; [2, -3.4]^\top$、$b &#x3D; 4.2$和噪声项$\epsilon$生成数据集及其标签：<br>$$<br>\mathbf{y}&#x3D; \mathbf{X} \mathbf{w} + b + \mathbf\epsilon<br>$$<br>$\epsilon$可以视为模型预测和标签时的潜在观测误差。在这里我们认为标准假设成立，即$\epsilon$服从均值为0的正态分布。为了简化问题，我们将标准差设为0.01。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">synthetic_data</span>(<span class="params">w, b, num_examples</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成y=Xw+b+噪声&quot;&quot;&quot;</span></span><br><span class="line">    X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples, <span class="built_in">len</span>(w)))</span><br><span class="line">    y = torch.matmul(X, w) + b</span><br><span class="line">    y += torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, y.shape)</span><br><span class="line">    <span class="keyword">return</span> X, y.reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features, labels = synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;features:&#x27;</span>, features[<span class="number">0</span>],<span class="string">&#x27;\nlabel:&#x27;</span>, labels[<span class="number">0</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">features: tensor([0.6942, 2.7783]) </span></span><br><span class="line"><span class="string">label: tensor([-3.8680])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">d2l.set_figsize()</span><br><span class="line">d2l.plt.scatter(features[:, <span class="number">1</span>].detach().numpy(), labels.detach().numpy(), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/linear_regression_scratch.png" alt="linear_regression_scratch"></p><ul><li><code>random</code>：用于生成随机数</li><li><code>X</code>：形状为 <code>(num_examples, len(w))</code> 的特征矩阵，每一行是一个样本。</li><li><code>y</code>：形状为 <code>(num_examples, 1)</code> 的标签列向量，符合 <code>y = Xw + b + 噪声</code>。</li><li><code>torch.matmul</code> 进行矩阵乘法（包括点积、矩阵-向量乘法和矩阵-矩阵乘法）</li><li><code>y += torch.normal(0, 0.01, y.shape)</code>：添加均值为 0，标准差为 0.01 的噪声</li><li><code>reshape(-1, 1)</code>：-1表示自动推导</li><li><code>true_w = [2, -3.4]</code>：设定真实权重</li><li><code>true_b = 4.2</code>：设定真实偏置项</li><li><code>eatures, labels = synthetic_data(true_w, true_b, 1000)</code>：<ul><li>生成 1000 个样本，每个样本有 2 个特征。</li><li><code>features</code> 形状是 <code>(1000, 2)</code>，<code>labels</code> 形状是 <code>(1000, 1)</code>。</li></ul></li><li><code>d2l.set_figsize()</code>：设置 Matplotlib 图像大小</li><li><code>d2l.plt.scatter(features[:, 1].detach().numpy(), labels.detach().numpy(), 1);</code>：<ul><li><code>features[:, 1]</code>：取所有样本的第二个特征（<code>x2</code>）。</li><li><code>labels</code>：对应的标签值。</li><li><code>.detach().numpy()</code>：将 PyTorch 张量转换为 NumPy 数组，方便 Matplotlib 处理。</li><li><code>plt.scatter(..., ..., 1)</code>：绘制散点图，点大小设为 <code>1</code>。</li></ul></li><li><code>plt.scatter(x, y, s=None, c=None, marker=None, alpha=None, ...)</code>：<ul><li><code>x</code>：散点图的 <strong>横坐标数据</strong>（可以是列表或 NumPy&#x2F;PyTorch 张量）。</li><li><code>y</code>：散点图的 <strong>纵坐标数据</strong>（可以是列表或 NumPy&#x2F;PyTorch 张量）。</li><li><code>s</code>：散点的大小（<code>1</code> 表示散点非常小）。</li><li><code>c</code>：散点的颜色（可以是单个颜色或一个颜色数组）。</li><li><code>marker</code>：散点的形状（如 <code>&#39;o&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;x&#39;</code>）。</li><li><code>alpha</code>：透明度（取值 <code>0~1</code>，<code>1</code> 表示不透明，<code>0.5</code> 表示半透明）。</li></ul></li></ul><h1 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h1><p><em>训练模型时要对数据集进行遍历，每次抽取一小批量样本，并使用它们来更新我们的模型</em></p><p>由于这个过程是训练机器学习算法的基础，所以有必要定义一个函数， 该函数能<strong>打乱数据集中的样本并以小批量方式</strong>获取数据。</p><p><strong>定义一个<code>data_iter</code>函数， 该函数接收批量大小、特征矩阵和标签向量作为输入，生成大小为<code>batch_size</code>的小批量</strong>。 每个小批量包含一组特征和标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># 这些样本是随机读取的，没有特定的顺序</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        batch_indices = torch.tensor(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class="line">        </span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">    <span class="built_in">print</span>(X, <span class="string">&#x27;\n&#x27;</span>, y)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[-0.2324,  1.5688],</span></span><br><span class="line"><span class="string">        [ 1.6030, -0.7080],</span></span><br><span class="line"><span class="string">        [ 1.5979, -1.5452],</span></span><br><span class="line"><span class="string">        [ 1.6035,  0.0764],</span></span><br><span class="line"><span class="string">        [-0.6566,  1.9275],</span></span><br><span class="line"><span class="string">        [-0.3860, -0.6425],</span></span><br><span class="line"><span class="string">        [ 0.3464, -0.0370],</span></span><br><span class="line"><span class="string">        [-0.9739,  1.1018],</span></span><br><span class="line"><span class="string">        [ 1.1537, -0.4979],</span></span><br><span class="line"><span class="string">        [-1.1189, -1.1404]]) </span></span><br><span class="line"><span class="string"> tensor([[-1.6054],</span></span><br><span class="line"><span class="string">        [ 9.8046],</span></span><br><span class="line"><span class="string">        [12.6415],</span></span><br><span class="line"><span class="string">        [ 7.1550],</span></span><br><span class="line"><span class="string">        [-3.6645],</span></span><br><span class="line"><span class="string">        [ 5.5992],</span></span><br><span class="line"><span class="string">        [ 4.9946],</span></span><br><span class="line"><span class="string">        [-1.5033],</span></span><br><span class="line"><span class="string">        [ 8.1968],</span></span><br><span class="line"><span class="string">        [ 5.8229]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>num_examples = len(features)</code>：获取数据集中样本的总数（1000 个）。</p></li><li><p><code>indices = list(range(num_examples))</code>：创建一个从 <code>0</code> 到 <code>num_examples-1</code> 的索引列表。</p></li><li><p><code>andom.shuffle(indices)</code>：<strong>随机打乱索引</strong>，确保每次抽取的数据是无序的（随机性）。</p><p>（<strong>不会返回新的列表，而是就地修改原列表</strong>）</p></li><li><p><strong><code>for i in range(0, num_examples, batch_size)</code></strong>：</p><ul><li><code>range(0, num_examples, batch_size)</code>：从 <code>0</code> 开始，每次跳 <code>batch_size</code> 个样本。</li><li>这样可以保证每次选取 <strong><code>batch_size</code> 个数据点</strong>，直到遍历完整个数据集。</li></ul></li><li><p><strong><code>batch_indices = torch.tensor(indices[i: min(i + batch_size, num_examples)])</code></strong>：</p><ul><li><code>indices[i: min(i + batch_size, num_examples)]</code>：<ul><li>取出当前批次的 <code>batch_size</code> 个索引。</li><li><code>min(i + batch_size, num_examples)</code> 确保不会超出数据集范围。</li></ul></li><li><code>torch.tensor(...)</code>：将索引列表转换为 PyTorch 张量。</li></ul></li><li><p><strong><code>yield features[batch_indices], labels[batch_indices]</code></strong>：</p><ul><li><code>features[batch_indices]</code>：按照随机索引，取出对应的<strong>特征值</strong>。</li><li><code>labels[batch_indices]</code>：按照随机索引，取出对应的<strong>标签值</strong>。</li><li><code>yield</code> 让函数成为 <strong>生成器</strong>，每次调用它时都会返回一个新的 batch 数据。</li></ul></li><li><table><thead><tr><th>关键字</th><th>作用</th><th>运行后函数是否终止</th><th>适用于</th></tr></thead><tbody><tr><td><code>return</code></td><td>直接返回值</td><td>终止函数</td><td>普通函数</td></tr><tr><td><code>yield</code></td><td>返回一个值，下次继续执行</td><td><strong>不会终止</strong>，记住当前状态</td><td>生成器</td></tr></tbody></table></li><li><p><code>data_iter(batch_size, features, labels)</code> 生成一个 <strong>批量数据的迭代器</strong>。</p><p><code>for X, y in ...</code> 获取每个小批量数据：</p><ul><li><code>X</code> 是当前 batch 的 <strong>特征张量</strong>，形状 <code>(10, 2)</code>（10 个样本，每个样本 2 个特征）。</li><li><code>y</code> 是当前 batch 的 <strong>标签张量</strong>，形状 <code>(10, 1)</code>（10 个样本，每个样本 1 个标签）。</li></ul><p><code>break</code> 只打印 <strong>第一个 batch</strong>，否则会继续遍历整个数据集。</p></li></ul><h1 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h1><p><strong>在我们开始用小批量随机梯度下降优化我们的模型参数之前</strong>， <strong>我们需要先有一些参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=(<span class="number">2</span>,<span class="number">1</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在初始化参数之后，我们的任务是更新这些参数，直到这些参数足够拟合我们的数据。</p><ul><li><p><code>torch.normal(0, 0.01, size=(2,1))</code></p><ul><li><p>生成一个<strong>2×1 的张量</strong>（即 2 行 1 列的矩阵）。</p></li><li><p>数据服从<strong>均值 0，标准差 0.01</strong> 的正态分布（高斯分布）。</p></li><li><p>这样做的目的是初始化 <code>w</code> <strong>接近 0 的随机值</strong>，而不是全 0，防止梯度更新时陷入零梯度问题。</p></li></ul></li><li><p><code>requires_grad=True</code>：<strong>让 PyTorch 记录 <code>w</code> 的梯度</strong>，用于后续反向传播计算 <code>∇w</code>。</p></li><li><p><code>torch.zeros(1, requires_grad=True)</code>：</p><ul><li><p><code>torch.zeros(1)</code>：这部分代码创建了一个大小为 <code>(1,)</code> 的张量，其中唯一的元素是 <code>0</code>。这个张量表示模型的偏置 <code>b</code>，在初始化时设置为 <code>0</code>。</p></li><li><p><code>1</code> 表示张量的大小为 1（即只有一个元素）。</p></li></ul></li></ul><h1 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h1><p>接下来，我们必须<strong>定义模型，将模型的输入和参数同模型的输出关联起来。</strong></p><p>要计算线性模型的输出，我们只需计算输入特征$\mathbf{X}$和模型权重$\mathbf{w}$的矩阵-向量乘法后加上偏置$b$。注意，上面的$\mathbf{Xw}$是一个向量，而$b$是一个标量。（<strong>广播机制</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;线性回归模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> torch.matmul(X, w) + b</span><br></pre></td></tr></table></figure><h1 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h1><p>这里我们使用<strong>平方损失函数</strong>。 在实现中，我们需要将真实值<code>y</code>的形状转换为和预测值<code>y_hat</code>的形状相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;均方损失&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><code>y.reshape(y_hat.shape)</code>：目的是将 <code>y</code> 的形状转换为和 <code>y_hat</code> 相同的形状。这是因为 <code>y</code> 和 <code>y_hat</code> 在训练时可能不是完全相同的形状，比如一个是列向量，一个是行向量。通过 <code>reshape</code>，我们确保两者的形状一致，便于进行差值计算。</li></ul><h1 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h1><p>该函数接受模型参数集合、学习速率和批量大小作为输入。每 一步更新的大小由学习速率<code>lr</code>决定。 </p><p>因为我们计算的损失是一个批量样本的总和，所以我们用批量大小（<code>batch_size</code>） 来规范化步长，这样步长大小就不会取决于我们对批量大小的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小批量随机梯度下降&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">            param -= lr * param.grad / batch_size</span><br><span class="line">            param.grad.zero_()         </span><br></pre></td></tr></table></figure><ul><li><p><code>sgd(params, lr, batch_size)</code>：这是实现小批量随机梯度下降的函数。</p><ul><li><code>params</code>：包含所有模型参数（如权重和偏置）的列表。</li><li><code>lr</code>：学习率（Learning Rate），它控制每次参数更新的步长。</li><li><code>batch_size</code>：小批量的大小，表示一次训练中使用的样本数量。</li></ul></li><li><p><code>with torch.no_grad()</code>：在更新参数时，禁用梯度计算。</p><ul><li>在 PyTorch 中，默认情况下，操作会记录梯度用于反向传播（反向传播会计算梯度）。而在更新参数时，我们不需要计算梯度，所以使用 <code>torch.no_grad()</code> 来确保更新过程不会干扰梯度计算，节省内存并加速计算。</li></ul></li><li><p><code>for param in params</code>：对所有模型参数进行迭代（例如，权重和偏置）。</p></li><li><p><code>param -= lr * param.grad / batch_size</code>：这是参数更新的公式</p><ul><li><p><code>param.grad</code>：该参数的梯度，即损失函数相对于该参数的导数。这个值告诉我们该如何调整参数以减小损失。</p></li><li><p><code>lr</code>：学习率，它决定了更新的步长。较高的学习率会导致参数大幅度调整，较低的学习率会使调整幅度较小。</p></li><li><p><code>/ batch_size</code>：因为我们采用的是小批量梯度下降，所以在计算梯度时是基于一个批次的样本，而不是整个数据集。为了使得每个样本对梯度的影响一致，需要除以 <code>batch_size</code>（批次大小），得到平均梯度。</p></li><li><p><code>param -= ...</code>：更新规则：减去梯度的方向，因为我们要减少损失，梯度下降的方向是朝着损失减小的方向调整参数。</p></li></ul></li><li><p><code>param.grad.zero_()</code>：每次参数更新之后，将参数的梯度清零。</p><ul><li>在 PyTorch 中，梯度是累加的。每次执行反向传播时，梯度会加到现有的梯度上。为了避免梯度累加影响下一次更新，我们需要在每次更新参数后清除梯度。<code>zero_()</code> 是一个原地操作，用于将 <code>param.grad</code> 清零。</li></ul></li></ul><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>在每次迭代中，我们读取一小批量训练样本，并通过我们的模型来获得一组预测。 计算完损失后，我们开始反向传播，存储每个参数的梯度。 最后，我们调用优化算法<code>sgd</code>来更新模型参数。</p><p>概括一下，我们将执行以下循环：</p><ul><li>初始化参数</li><li>重复以下训练，直到完成<ul><li>计算梯度$\mathbf{g} \leftarrow \partial_{(\mathbf{w},b)} \frac{1}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} l(\mathbf{x}^{(i)}, y^{(i)}, \mathbf{w}, b)$</li><li>更新参数$(\mathbf{w}, b) \leftarrow (\mathbf{w}, b) - \eta \mathbf{g}$</li></ul></li></ul><p>在每个<em>迭代周期</em>（epoch）中，我们使用<code>data_iter</code>函数遍历整个数据集， 并将训练数据集中所有样本都使用一次（假设样本数能够被批量大小整除）。 这里的迭代周期个数<code>num_epochs</code>和学习率<code>lr</code>都是超参数，分别设为3和0.03。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line">net = linreg</span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = loss(net(X, w, b), y)  <span class="comment"># X和y的小批量损失</span></span><br><span class="line">        <span class="comment"># 因为l形状是(batch_size,1)，而不是一个标量。l中的所有元素被加到一起，</span></span><br><span class="line">        <span class="comment"># 并以此计算关于[w,b]的梯度</span></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用参数的梯度更新参数</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">epoch 1, loss 0.041277</span></span><br><span class="line"><span class="string">epoch 2, loss 0.000166</span></span><br><span class="line"><span class="string">epoch 3, loss 0.000049</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w的估计误差: <span class="subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b的估计误差: <span class="subst">&#123;true_b - b&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w的估计误差: tensor([ 0.0006, -0.0006], grad_fn=&lt;SubBackward0&gt;)</span></span><br><span class="line"><span class="string">b的估计误差: tensor([0.0007], grad_fn=&lt;RsubBackward1&gt;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><ul><li><p><code>lr</code> 是学习率，控制每次参数更新的步长。</p></li><li><p><code>num_epochs</code> 是训练的轮数，表示数据集会被遍历多少次。</p></li><li><p><code>net</code> 是线性回归模型，假设是通过 <code>linreg</code> 函数定义的。这个模型会使用 <code>w</code> 和 <code>b</code> 作为参数。</p></li><li><p><code>loss</code> 是损失函数，选择的是均方误差（squared loss）。</p></li></ul><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><ul><li><code>for epoch in range(num_epochs)</code>：循环遍历每一轮（epoch）。在每一轮中，所有训练数据都会被分批次处理。</li><li><code>for X, y in data_iter(batch_size, features, labels)</code>：这个循环遍历数据集的每个小批量（mini-batch）。<code>X</code> 和 <code>y</code> 分别是该批次的特征和标签。</li><li><code>l = loss(net(X, w, b), y)</code>：对于当前小批量数据，通过线性回归模型 <code>net(X, w, b)</code> 预测输出，并计算损失函数的值 <code>l</code>。其中，<code>net(X, w, b)</code> 计算的是预测结果，<code>y</code> 是真实标签。</li><li><code>l.sum().backward()</code>：计算损失函数关于 <code>w</code> 和 <code>b</code> 的梯度。<code>l.sum()</code> 是把所有批次样本的损失加和，以确保每次反向传播的梯度是整个批次的平均值。</li><li><code>sgd([w, b], lr, batch_size)</code>：使用小批量随机梯度下降（SGD）方法来更新参数 <code>w</code> 和 <code>b</code>。这个函数会根据学习率 <code>lr</code> 和批次大小 <code>batch_size</code> 来调整 <code>w</code> 和 <code>b</code> 的值。</li></ul><h2 id="评估损失"><a href="#评估损失" class="headerlink" title="评估损失"></a>评估损失</h2><ul><li><code>with torch.no_grad()</code>：在评估损失时，不需要计算梯度，因为我们只关心损失的值，而不需要更新参数。</li><li><code>train_l = loss(net(features, w, b), labels)</code>：计算整个数据集的损失（训练集的损失），以评估当前模型的性能。</li><li><code>print(f&#39;epoch &#123;epoch + 1&#125;, loss &#123;float(train_l.mean()):f&#125;&#39;)</code>：输出当前轮次的平均损失。</li></ul><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><ul><li><p><code>true_w</code> 和 <code>true_b</code> 是线性回归模型的真实参数（生成数据时使用的参数）。</p></li><li><p><code>w.reshape(true_w.shape)</code>：确保 <code>w</code> 的形状与 <code>true_w</code> 一致。</p></li><li><p><code>true_w - w.reshape(true_w.shape)</code> 和 <code>true_b - b</code>：计算模型估计的参数与真实参数之间的误差，并输出。</p></li></ul><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">synthetic_data</span>(<span class="params">w, b, num_examples</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成y=Xw+b+噪声&quot;&quot;&quot;</span></span><br><span class="line">    X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples, <span class="built_in">len</span>(w)))</span><br><span class="line">    y = torch.matmul(X, w) + b</span><br><span class="line">    y += torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, y.shape)</span><br><span class="line">    <span class="keyword">return</span> X, y.reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features, labels = synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;features:&#x27;</span>, features[<span class="number">0</span>],<span class="string">&#x27;\nlabel:&#x27;</span>, labels[<span class="number">0</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">features: tensor([0.6942, 2.7783]) </span></span><br><span class="line"><span class="string">label: tensor([-3.8680])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">d2l.set_figsize()</span><br><span class="line">d2l.plt.scatter(features[:, <span class="number">1</span>].detach().numpy(), labels.detach().numpy(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># 这些样本是随机读取的，没有特定的顺序</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        batch_indices = torch.tensor(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class="line">        </span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">    <span class="built_in">print</span>(X, <span class="string">&#x27;\n&#x27;</span>, y)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[-0.2324,  1.5688],</span></span><br><span class="line"><span class="string">        [ 1.6030, -0.7080],</span></span><br><span class="line"><span class="string">        [ 1.5979, -1.5452],</span></span><br><span class="line"><span class="string">        [ 1.6035,  0.0764],</span></span><br><span class="line"><span class="string">        [-0.6566,  1.9275],</span></span><br><span class="line"><span class="string">        [-0.3860, -0.6425],</span></span><br><span class="line"><span class="string">        [ 0.3464, -0.0370],</span></span><br><span class="line"><span class="string">        [-0.9739,  1.1018],</span></span><br><span class="line"><span class="string">        [ 1.1537, -0.4979],</span></span><br><span class="line"><span class="string">        [-1.1189, -1.1404]]) </span></span><br><span class="line"><span class="string"> tensor([[-1.6054],</span></span><br><span class="line"><span class="string">        [ 9.8046],</span></span><br><span class="line"><span class="string">        [12.6415],</span></span><br><span class="line"><span class="string">        [ 7.1550],</span></span><br><span class="line"><span class="string">        [-3.6645],</span></span><br><span class="line"><span class="string">        [ 5.5992],</span></span><br><span class="line"><span class="string">        [ 4.9946],</span></span><br><span class="line"><span class="string">        [-1.5033],</span></span><br><span class="line"><span class="string">        [ 8.1968],</span></span><br><span class="line"><span class="string">        [ 5.8229]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">w = torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=(<span class="number">2</span>,<span class="number">1</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;线性回归模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> torch.matmul(X, w) + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;均方损失&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小批量随机梯度下降&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">            param -= lr * param.grad / batch_size</span><br><span class="line">            param.grad.zero_()         </span><br><span class="line">            </span><br><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line">net = linreg</span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = loss(net(X, w, b), y)  <span class="comment"># X和y的小批量损失</span></span><br><span class="line">        <span class="comment"># 因为l形状是(batch_size,1)，而不是一个标量。l中的所有元素被加到一起，</span></span><br><span class="line">        <span class="comment"># 并以此计算关于[w,b]的梯度</span></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用参数的梯度更新参数</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">epoch 1, loss 0.041277</span></span><br><span class="line"><span class="string">epoch 2, loss 0.000166</span></span><br><span class="line"><span class="string">epoch 3, loss 0.000049</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w的估计误差: <span class="subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b的估计误差: <span class="subst">&#123;true_b - b&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w的估计误差: tensor([ 0.0006, -0.0006], grad_fn=&lt;SubBackward0&gt;)</span></span><br><span class="line"><span class="string">b的估计误差: tensor([0.0007], grad_fn=&lt;RsubBackward1&gt;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归（深度学习）</title>
      <link href="/2025/03/08/2025-3-8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/08/2025-3-8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><em>回归</em>（regression）是能为一个或多个自变量与因变量之间关系建模的一类方法</p><p><em>线性回归</em>（linear regression）</p><h1 id="线性回归的基本元素"><a href="#线性回归的基本元素" class="headerlink" title="线性回归的基本元素"></a>线性回归的基本元素</h1><ol><li>线性模型</li><li>损失函数</li><li>解析解</li><li>随机梯度下降</li><li>用模型进行预测</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>根据房屋的面积（平方英尺）和房龄（年）来估算房屋价格（美元）。</p><ul><li><em>训练数据集</em>（training data set） 或<em>训练集</em>（training set）：房屋的销售价格、面积和房龄</li><li><em>样本</em>（sample）&#x2F;<em>数据点</em>（data point）或<em>数据样本</em>（data instance）：每行数据</li><li><em>标签</em>（label）或<em>目标</em>（target）：试图预测的目标（比如预测房屋价格）</li><li><em>特征</em>（feature）或<em>协变量</em>（covariate）：预测所依据的自变量（面积和房龄）</li></ul><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>$$<br>\mathrm{price} &#x3D; w_{\mathrm{area}} \cdot \mathrm{area} + w_{\mathrm{age}} \cdot \mathrm{age} + b<br>$$</p><ul><li><em>权重</em>（weight）：$w_{\mathrm{area}}$和$w_{\mathrm{age}}$</li><li><em>偏置</em>（bias）、<em>偏移量</em>（offset）或<em>截距</em>（intercept）：$b$</li></ul><p>机器学习领域，我们通常使用的是高维数据集，建模时采用线性代数表示法：<br>$$<br>\hat{y} &#x3D; w_1  x_1 + … + w_d  x_d + b<br>$$</p><p>$$<br>\hat{y} &#x3D; \mathbf{w}^\top \mathbf{x} + b<br>$$</p><p>向量$\mathbf{x}$对应于单个数据样本的特征。用符号表示的矩阵$\mathbf{X} \in \mathbb{R}^{n \times d}$可以很方便地引用我们整个数据集的$n$个样本:<br>$$<br>{\hat{\mathbf{y}}} &#x3D; \mathbf{X} \mathbf{w} + b<br>$$<br>过程中的求和将使用广播机制</p><p>我们很难找到一个有$n$个样本的真实数据集，其中对于所有的$1 \leq i \leq n$，$y^{(i)}$完全等于$\mathbf{w}^\top \mathbf{x}^{(i)}+b$。无论我们使用什么手段来观察特征$\mathbf{X}$和标签$\mathbf{y}$，都可能会出现少量的观测误差。因此，即使确信特征与标签的潜在关系是线性的，我们也会加入一个噪声项来考虑观测误差带来的影响。</p><p>在开始寻找最好的<em>模型参数</em>（model parameters）$\mathbf{w}$和$b$之前，我们还需要两个东西：<br>（1）一种模型质量的度量方式；<br>（2）一种能够更新模型以提高模型预测质量的方法。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><em>损失函数</em>（loss function）能够量化目标的<em>实际</em>值与<em>预测</em>值之间的差距</p><p>平方误差函数：<br>$$<br>l^{(i)}(\mathbf{w}, b) &#x3D; \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2<br>$$<br>由于平方误差函数中的二次方项， 估计值$\hat{y}^{(i)}$和观测值$y^{(i)}$之间较大的差异将导致更大的损失。 为了度量模型在整个数据集上的质量，我们需计算在$n$训练集个样本上的损失均值（也等价于求和）：<br>$$<br>L(\mathbf{w}, b) &#x3D;\frac{1}{n}\sum_{i&#x3D;1}^n l^{(i)}(\mathbf{w}, b) &#x3D;\frac{1}{n} \sum_{i&#x3D;1}^n \frac{1}{2}\left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right)^2<br>$$</p><p>我们希望寻找一组参数（$\mathbf{w}^<em>, b^</em>$），这组参数能最小化在所有训练样本上的总损失：<br>$$<br>\mathbf{w}^<em>, b^</em> &#x3D; \operatorname*{argmin}_{\mathbf{w}, b}\  L(\mathbf{w}, b)<br>$$</p><h2 id="解析解"><a href="#解析解" class="headerlink" title="解析解"></a>解析解</h2><p>线性回归的解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）。</p><p>解析解可以进行很好的数学分析，但解析解对问题的限制很严格，导致它无法广泛应用在深度学习里。</p><h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><p><em>梯度下降</em>（gradient descent）： 这种方法几乎可以优化所有深度学习模型。 它通过不断地在损失函数递减的方向上更新参数来降低误差</p><p>梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）。</p><p>但实际中的执行可能会非常慢：因为在每一次更新参数之前，我们必须遍历整个数据集。 因此，我们通常会在每次需要计算更新的时候随机抽取一小批样本， 这种变体叫做<em>小批量随机梯度下降</em>（minibatch stochastic gradient descent）。</p><p>在每次迭代中，我们首先随机抽样一个小批量$\mathcal{B}$，它是由固定数量的训练样本组成的。然后，我们计算小批量的平均损失关于模型参数的导数（也可以称为梯度）。最后，我们将梯度乘以一个预先确定的正数$\eta$，并从当前参数的值中减掉：<br>$$<br>(\mathbf{w},b) \leftarrow (\mathbf{w},b) - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_{(\mathbf{w},b)} l^{(i)}(\mathbf{w},b)<br>$$<br>即：<br>$$<br>\mathbf{w} \leftarrow \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_{\mathbf{w}} l^{(i)}(\mathbf{w}, b) &#x3D; \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right)<br>$$</p><p>$$<br>b \leftarrow b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_b l^{(i)}(\mathbf{w}, b) &#x3D; b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right)<br>$$</p><ul><li><em>批量大小</em>（batch size）：$|\mathcal{B}|$</li><li><em>学习率</em>（learning rate）：$\eta$</li><li><em>超参数</em>（hyperparameter）：批量大小和学习率（可以调整但不在训练过程中更新的参数）</li></ul><h2 id="用模型预测"><a href="#用模型预测" class="headerlink" title="用模型预测"></a>用模型预测</h2><p>通过房屋面积$x_1$和房龄$x_2$来估计一个（<strong>未包含在训练数据中</strong>的）新房屋价格</p><h1 id="矢量化加速"><a href="#矢量化加速" class="headerlink" title="矢量化加速"></a>矢量化加速</h1><p>在训练我们的模型时，我们经常希望能够同时处理整个小批量的样本。 为了实现这一点，需要(<strong>我们对计算进行矢量化， 从而利用线性代数库，而不是在Python中编写开销高昂的for循环</strong>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">n = <span class="number">10000</span></span><br><span class="line">a = torch.ones([n])</span><br><span class="line">b = torch.ones([n])</span><br><span class="line"><span class="comment"># 定义一个计时器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span>:  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录多次运行时间&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.times = []</span><br><span class="line">        <span class="variable language_">self</span>.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;启动计时器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.tik = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;停止计时器并将时间记录在列表中&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.times.append(time.time() - <span class="variable language_">self</span>.tik)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.times[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">avg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回平均时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="variable language_">self</span>.times) / <span class="built_in">len</span>(<span class="variable language_">self</span>.times)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回时间总和&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="variable language_">self</span>.times)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cumsum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回累计时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> np.array(<span class="variable language_">self</span>.times).cumsum().tolist()</span><br></pre></td></tr></table></figure><ul><li><code>__init__</code>：在 Python 类中，<code>__init__</code> 是 <strong>构造函数</strong>，用于 <strong>初始化类的实例</strong>。当你创建一个类的对象时，<code>__init__</code> 方法会自动运行，为对象赋初始值</li><li><code>np.array(self.times)</code>：把 <code>self.times</code>（一个 Python 列表）转换为 NumPy 数组，方便进行数值运算</li><li><code>.cumsum()</code>：<strong>计算累计和</strong>，即前面的所有数相加</li><li><code>.tolist()</code>：<strong>把 NumPy 数组转换回 Python 列表</strong>，以便在 Python 代码中更容易使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c = torch.zeros(n)</span><br><span class="line">timer = Timer()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    c[i] = a[i] + b[i]</span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;timer.stop():<span class="number">.5</span>f&#125;</span> sec&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;0.09661 sec&#x27;</span></span><br><span class="line"></span><br><span class="line">timer.start()</span><br><span class="line">d = a + b</span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;timer.stop():<span class="number">.5</span>f&#125;</span> sec&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;0.00021 sec&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.zeros(n)</code>: 创建长度为 <code>n</code> 的全零张量 <code>c</code>。</li><li><code>timer = Timer()</code>: 创建 <code>Timer</code> 计时器，并自动启动</li><li><code>timer.stop()</code>: 停止计时并返回运行时间</li><li><code>f&#39;&#123;timer.stop():.5f&#125; sec&#39;</code>: 格式化时间，保留 5 位小数<ul><li><strong><code>f&#39;...&#39;</code></strong>：<strong>f-string</strong>（格式化字符串），用于插入变量值</li><li><strong><code>&#123;&#125;</code></strong>：<strong>占位符</strong>，用于插入变量或表达式的计算结果</li><li><strong><code>:.5f</code></strong>：格式化输出，<code>.</code>：表示小数点；<code>5</code>：保留 <strong>5 位小数</strong>；<code>f</code>：表示 <strong>浮点数格式</strong></li></ul></li><li><code>timer.start()</code>: <strong>重新启动计时器</strong></li></ul><h1 id="正态分布与平方损失"><a href="#正态分布与平方损失" class="headerlink" title="正态分布与平方损失"></a>正态分布与平方损失</h1><p>正态分布（normal distribution），也称为<em>高斯分布</em>（Gaussian distribution）</p><p>若随机变量$x$具有均值$\mu$和方差$\sigma^2$（标准差$\sigma$），其正态分布概率密度函数如下：<br>$$<br>p(x) &#x3D; \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (x - \mu)^2\right)<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">normal</span>(<span class="params">x, mu, sigma</span>):</span><br><span class="line">    p = <span class="number">1</span> / math.sqrt(<span class="number">2</span> * math.pi * sigma**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> p * np.exp(-<span class="number">0.5</span> / sigma**<span class="number">2</span> * (x - mu)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次使用numpy进行可视化</span></span><br><span class="line">x = np.arange(-<span class="number">7</span>, <span class="number">7</span>, <span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值和标准差对</span></span><br><span class="line">params = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>)]</span><br><span class="line">d2l.plot(x, [normal(x, mu, sigma) <span class="keyword">for</span> mu, sigma <span class="keyword">in</span> params], xlabel=<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">         ylabel=<span class="string">&#x27;p(x)&#x27;</span>, figsize=(<span class="number">4.5</span>, <span class="number">2.5</span>),</span><br><span class="line">         legend=[<span class="string">f&#x27;mean <span class="subst">&#123;mu&#125;</span>, std <span class="subst">&#123;sigma&#125;</span>&#x27;</span> <span class="keyword">for</span> mu, sigma <span class="keyword">in</span> params])</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/normal_distribution.png" alt="normal_distribution"></p><p>均方误差损失函数（简称均方损失）可以用于线性回归的一个原因是： 我们假设了观测中包含噪声，其中噪声服从正态分布。 噪声正态分布如下式:<br>$$<br>y &#x3D; \mathbf{w}^\top \mathbf{x} + b + \epsilon<br>$$<br>其中，$\epsilon \sim \mathcal{N}(0, \sigma^2)$</p><p>我们现在可以写出通过给定的$\mathbf{x}$观测到特定$y$的<em>似然</em>（likelihood）：<br>$$<br>P(y \mid \mathbf{x}) &#x3D; \frac{1}{\sqrt{2 \pi \sigma^2}} \exp\left(-\frac{1}{2 \sigma^2} (y - \mathbf{w}^\top \mathbf{x} - b)^2\right)<br>$$<br>根据极大似然估计法，参数$\mathbf{w}$和$b$的最优值是使整个数据集的<em>似然</em>最大的值：<br>$$<br>P(\mathbf y \mid \mathbf X) &#x3D; \prod_{i&#x3D;1}^{n} p(y^{(i)}|\mathbf{x}^{(i)})<br>$$<br>根据极大似然估计法选择的估计量称为<em>极大似然估计量</em>。虽然使许多指数函数的乘积最大化看起来很困难，但是我们可以在不改变目标的前提下，通过最大化似然对数来简化。由于历史原因，优化通常是说最小化而不是最大化。我们可以改为<em>最小化负对数似然</em>$-\log P(\mathbf y \mid \mathbf X)$。由此可以得到的数学公式是：<br>$$<br>-\log P(\mathbf y \mid \mathbf X) &#x3D; \sum_{i&#x3D;1}^n \frac{1}{2} \log(2 \pi \sigma^2) + \frac{1}{2 \sigma^2} \left(y^{(i)} - \mathbf{w}^\top \mathbf{x}^{(i)} - b\right)^2<br>$$<br>现在我们只需要假设$\sigma$是某个固定常数就可以忽略第一项，因为第一项不依赖于$\mathbf{w}$和$b$。现在第二项除了常数$\frac{1}{\sigma^2}$外，其余部分和前面介绍的均方误差是一样的。幸运的是，上面式子的解并不依赖于$\sigma$。因此，在高斯噪声的假设下，最小化均方误差等价于对线性模型的极大似然估计。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率（深度学习）</title>
      <link href="/2025/03/07/2025-3-7-%E6%A6%82%E7%8E%87%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/07/2025-3-7-%E6%A6%82%E7%8E%87%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>简单地说，机器学习就是做出预测</p><p>概率是一种灵活的语言，用于说明我们的确定程度，并且它可以有效地应用于广泛的领域中</p><h1 id="基本概率论"><a href="#基本概率论" class="headerlink" title="基本概率论"></a>基本概率论</h1><h2 id="掷骰子"><a href="#掷骰子" class="headerlink" title="掷骰子"></a>掷骰子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.distributions <span class="keyword">import</span> multinomial</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">fair_probs = torch.ones([<span class="number">6</span>]) / <span class="number">6</span></span><br><span class="line">multinomial.Multinomial(<span class="number">1</span>, fair_probs).sample() <span class="comment"># tensor([0., 0., 0., 1., 0., 0.])</span></span><br><span class="line"></span><br><span class="line">multinomial.Multinomial(<span class="number">10</span>, fair_probs).sample() <span class="comment"># tensor([1., 2., 2., 1., 1., 3.])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果存储为32位浮点数以进行除法</span></span><br><span class="line">counts = multinomial.Multinomial(<span class="number">1000</span>, fair_probs).sample()</span><br><span class="line">counts / <span class="number">1000</span>  <span class="comment"># 相对频率作为估计值</span></span><br><span class="line"><span class="comment"># tensor([0.1820, 0.1790, 0.1600, 0.1510, 0.1770, 0.1510])</span></span><br></pre></td></tr></table></figure><h3 id="创建公平骰子的概率分布"><a href="#创建公平骰子的概率分布" class="headerlink" title="创建公平骰子的概率分布"></a>创建公平骰子的概率分布</h3><ul><li><p><code>torch.distributions.multinomial</code>：用于多项式分布采样（类似投掷骰子的实验）</p></li><li><p><code>fair_probs = torch.ones([6]) / 6</code>：</p><ul><li><code>torch.ones([6])</code> 生成一个全为 <code>1</code> 的长度为 <code>6</code> 的张量（对应于 6 个骰子面）</li><li><code>/ 6</code> 让每个面出现的概率都是 <code>1/6</code>，表示 <strong>公平骰子</strong></li></ul></li><li><pre><code class="language-python">torch.distributions.Multinomial(total_count, probs).sample(sample_shape=torch.Size([]))<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - `total_count`：整数，表示 **一次实验中进行的独立试验次数**（比如投掷几次骰子）</span><br><span class="line">  - `probs`：张量，表示 **每个类别（骰子面）的概率分布**（必须是非负数，且和为 1）</span><br><span class="line">  - `sample_shape`（可选）：生成多个样本的形状，通常不需要指定</span><br><span class="line"></span><br><span class="line">### 投掷10次骰子</span><br><span class="line"></span><br><span class="line">- `Multinomial(10, fair_probs).sample()` **相当于投掷 10 次骰子**，统计每个面的出现次数</span><br><span class="line"></span><br><span class="line">## 绘图</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">counts = multinomial.Multinomial(10, fair_probs).sample((500,))</span><br><span class="line">cum_counts = counts.cumsum(dim=0)</span><br><span class="line">estimates = cum_counts / cum_counts.sum(dim=1, keepdims=True)</span><br><span class="line"></span><br><span class="line">d2l.set_figsize((6, 4.5))</span><br><span class="line">for i in range(6):</span><br><span class="line">    d2l.plt.plot(estimates[:, i].numpy(),</span><br><span class="line">                 label=(&quot;P(die=&quot; + str(i + 1) + &quot;)&quot;))</span><br><span class="line">d2l.plt.axhline(y=0.167, color=&#x27;black&#x27;, linestyle=&#x27;dashed&#x27;)</span><br><span class="line">d2l.plt.gca().set_xlabel(&#x27;Groups of experiments&#x27;)</span><br><span class="line">d2l.plt.gca().set_ylabel(&#x27;Estimated probability&#x27;)</span><br><span class="line">d2l.plt.legend();</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><img src="/../img/screenshot/probability_test.png" alt="图像"></p><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><ul><li><code>multinomial.Multinomial(10, fair_probs).sample((500,))</code>：<ul><li><strong><code>10</code></strong>：每次实验投掷 10 次骰子</li><li><strong><code>fair_probs</code></strong>：每个面出现的概率是 <code>1/6</code></li><li><strong><code>sample((500,))</code></strong>：表示<strong>重复实验 500 组</strong>，结果 <code>counts</code> 是一个形状 <code>(500, 6)</code> 的张量，其中每一行表示 <strong>10 次投掷后各个面出现的次数</strong>。</li></ul></li></ul><h3 id="计算累积出现次数"><a href="#计算累积出现次数" class="headerlink" title="计算累积出现次数"></a>计算累积出现次数</h3><ul><li><code>cum_counts = counts.cumsum(dim=0)</code>：<ul><li><code>cumsum(dim=0)</code> <strong>按行累加</strong>，即 <strong>计算前 <code>n</code> 组实验的累计次数</strong></li><li><code>cum_counts[i]</code> <strong>表示前 <code>i+1</code> 组实验中各个骰子面出现的总次数</strong></li></ul></li></ul><h3 id="计算每个面的估计概率"><a href="#计算每个面的估计概率" class="headerlink" title="计算每个面的估计概率"></a>计算每个面的估计概率</h3><ul><li><code>estimates = cum_counts / cum_counts.sum(dim=1, keepdims=True)</code>：<ul><li><code>cum_counts.sum(dim=1, keepdims=True)</code> 计算<strong>每组实验的总投掷次数</strong></li><li><strong>每个面的累计出现次数</strong> ÷ <strong>总投掷次数</strong> &#x3D; <strong>估计概率</strong></li></ul></li></ul><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><ul><li><p><code>d2l.set_figsize((6, 4.5))</code>：<strong>设置绘图大小</strong>，<code>(6, 4.5)</code> 表示宽 <code>6</code>、高 <code>4.5</code></p></li><li><pre><code class="language-python">for i in range(6):    d2l.plt.plot(estimates[:, i].numpy(),                 label=(&quot;P(die=&quot; + str(i + 1) + &quot;)&quot;))</code></pre></li><li><p><code>estimates[:, i].numpy()</code>：<strong>取出第 <code>i</code> 列的所有行数据，并转换为 NumPy 数组</strong>，以便 Matplotlib 可以绘制图像</p><ul><li><code>estimates</code> 是一个 <strong>张量（Tensor）</strong>，它的形状是 <code>(500, 6)</code></li><li>索引 <code>[:, i]</code>：<ol><li><code>:</code> 代表 <strong>取所有行</strong>（即 500 组实验）</li><li><code>i</code> 代表 <strong>取第 <code>i</code> 列</strong>（即骰子第 <code>i+1</code> 面的估计概率）</li><li><strong>结果是一个 <code>(500,)</code> 形状的张量</strong>，表示 <strong>随着实验次数增加，骰子第 <code>i+1</code> 面的估计概率变化</strong></li></ol></li><li><code>.numpy()</code>：<code>estimates[:, i]</code> 是一个 PyTorch <strong>张量（Tensor）</strong>，但 Matplotlib <strong>只能绘制 NumPy 数组</strong>，所以 <code>.numpy()</code> <strong>将其转换为 NumPy 数组</strong>，方便绘制</li><li><code>label=(&quot;P(die=&quot; + str(i + 1) + &quot;)&quot;)</code>： 添加图例，例如 <code>P(die=1)</code>、<code>P(die=2)</code> 等</li></ul></li></ul><h3 id="添加参考线"><a href="#添加参考线" class="headerlink" title="添加参考线"></a>添加参考线</h3><ul><li><code>d2l.plt.axhline(y=0.167, color=&#39;black&#39;, linestyle=&#39;dashed&#39;)</code>：画一条 <strong>y&#x3D;0.167</strong> 的 <strong>水平虚线</strong>（<code>1/6 ≈ 0.167</code>），表示<strong>理论概率</strong></li></ul><h3 id="设置坐标轴和图例"><a href="#设置坐标轴和图例" class="headerlink" title="设置坐标轴和图例"></a>设置坐标轴和图例</h3><ul><li><code>set_xlabel(&#39;Groups of experiments&#39;)</code>：x 轴表示 <strong>实验次数</strong></li><li><code>set_ylabel(&#39;Estimated probability&#39;)</code>：y 轴表示 <strong>每个面的估计概率</strong></li><li><code>plt.legend()</code>：显示图例（不同面的概率曲线）</li><li><code>d2l.plt.gca()</code> 是 <strong><code>matplotlib.pyplot.gca()</code></strong> 的调用方式，它的作用是 <strong>获取当前的坐标轴（Axes）对象</strong>，用于进一步调整图表的格式</li><li><code>gca()</code> 代表 <strong>“Get Current Axes”（获取当前坐标轴）</strong>，它返回当前的 <code>Axes</code> 对象，允许我们对坐标轴进行更细致的调整，例如：<ul><li>修改 <code>x</code> 轴和 <code>y</code> 轴的标签</li><li>调整刻度</li><li>设置标题</li><li>修改坐标轴的外观</li></ul></li></ul><h1 id="概率论公理"><a href="#概率论公理" class="headerlink" title="概率论公理"></a>概率论公理</h1><p><em>概率</em>（probability）可以被认为是将集合映射到真实值的函数。在给定的样本空间$\mathcal{S}$中，事件$\mathcal{A}$的概率，表示为$P(\mathcal{A})$，满足以下属性：</p><ul><li>对于任意事件$\mathcal{A}$，其概率从不会是负数，即$P(\mathcal{A}) \geq 0$；</li><li>整个样本空间的概率为$1$，即$P(\mathcal{S}) &#x3D; 1$；</li><li>对于<em>互斥</em>（mutually exclusive）事件（对于所有$i \neq j$都有$\mathcal{A}_i \cap \mathcal{A}_j &#x3D; \emptyset$）的任意一个可数序列$\mathcal{A}_1, \mathcal{A}<em>2, \ldots$，序列中任意一个事件发生的概率等于它们各自发生的概率之和，即 $P(\bigcup</em>{i&#x3D;1}^{\infty} \mathcal{A}<em>i) &#x3D; \sum</em>{i&#x3D;1}^{\infty} P(\mathcal{A}_i)$。</li></ul><h1 id="处理多个随机变量"><a href="#处理多个随机变量" class="headerlink" title="处理多个随机变量"></a>处理多个随机变量</h1><h2 id="联合概率"><a href="#联合概率" class="headerlink" title="联合概率"></a>联合概率</h2><p>第一个被称为<em>联合概率</em>（joint probability）$P(A&#x3D;a,B&#x3D;b)$：$A&#x3D;a$和$B&#x3D;b$同时满足的概率</p><ul><li>$P(A &#x3D; a, B&#x3D;b) \leq P(A&#x3D;a)$</li></ul><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><ul><li>$0 \leq \frac{P(A&#x3D;a, B&#x3D;b)}{P(A&#x3D;a)} \leq 1$：我们称这个比率为<em>条件概率</em>（conditional probability）</li><li>$P(B&#x3D;b \mid A&#x3D;a)$</li></ul><h2 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h2><p>$$<br>P(A \mid B) &#x3D; \frac{P(B \mid A) P(A)}{P(B)}<br>$$</p><p>这里我们使用紧凑的表示法：其中$P(A, B)$是一个<em>联合分布</em>（joint distribution），$P(A \mid B)$是一个<em>条件分布</em>（conditional distribution）。这种分布可以在给定值$A &#x3D; a, B&#x3D;b$上进行求值。</p><h2 id="边际化"><a href="#边际化" class="headerlink" title="边际化"></a>边际化</h2><p>$$<br>P(B) &#x3D; \sum_{A} P(A, B)<br>$$</p><p>$B$的概率相当于计算$A$的所有可能选择，并将所有选择的联合概率聚合在一起：这也称为<em>边际化</em>（marginalization）。边际化结果的概率或分布称为<em>边际概率</em>（marginal probability）或<em>边际分布</em>（marginal distribution）。</p><h2 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h2><p>$$<br>P(A, B) &#x3D; P(A)P(B)<br>$$</p><p>如果两个随机变量$A$和$B$是独立的，意味着事件$A$的发生跟$B$事件的发生无关。在这种情况下，统计学家通常将这一点表述为$A \perp  B$。</p><p>同样地，给定另一个随机变量$C$时，两个随机变量$A$和$B$是<em>条件独立的</em>（conditionally independent），当且仅当$P(A, B \mid C) &#x3D; P(A \mid C)P(B \mid C)$。这个情况表示为$A \perp B \mid C$。</p><h2 id="期望和方差"><a href="#期望和方差" class="headerlink" title="期望和方差"></a>期望和方差</h2><p>一个随机变量$X$的<em>期望</em>（expectation，或平均值（average））:<br>$$<br>E[X] &#x3D; \sum_{x} x P(X &#x3D; x)<br>$$<br>函数$f(x)$的输入是从分布$P$中抽取的随机变量：<br>$$<br>E_{x \sim P}[f(x)] &#x3D; \sum_x f(x) P(x)<br>$$<br>衡量随机变量$X$与其期望值的偏差，可通过方差来量化：<br>$$<br>\mathrm{Var}[X] &#x3D; E\left[(X - E[X])^2\right] &#x3D;<br>E[X^2] - E[X]^2<br>$$<br>随机变量函数的方差衡量的是：当从该随机变量分布中采样不同值$x$时，函数值偏离该函数的期望的程度：<br>$$<br>\mathrm{Var}[f(x)] &#x3D; E\left[\left(f(x) - E[f(x)]\right)^2\right]<br>$$<br><strong>方差的平方根被称为<em>标准差</em>（standard deviation）</strong></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微积分（深度学习）</title>
      <link href="/2025/03/05/2025-3-5-%E5%BE%AE%E7%A7%AF%E5%88%86%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/05/2025-3-5-%E5%BE%AE%E7%A7%AF%E5%88%86%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-matplotlib-库和-d2l-库"><a href="#安装-matplotlib-库和-d2l-库" class="headerlink" title="安装 matplotlib 库和 d2l 库"></a>安装 matplotlib 库和 d2l 库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate d2l</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install d2l</span><br></pre></td></tr></table></figure><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="built_in">print</span>(matplotlib.__version__)</span><br><span class="line"><span class="keyword">import</span> d2l</span><br><span class="line"><span class="built_in">print</span>(d2l.__version__)</span><br></pre></td></tr></table></figure><h1 id="导数和微分"><a href="#导数和微分" class="headerlink" title="导数和微分"></a>导数和微分</h1><p>假设我们有一个函数$f: \mathbb{R} \rightarrow \mathbb{R}$，其输入和输出都是标量，<strong>如果$f$的<em>导数</em>存在，这个极限被定义为</strong>：<br>$$<br>f’(x) &#x3D; \lim_{h \rightarrow 0} \frac{f(x+h) - f(x)}{h}.<br>$$<br>如果$f’(a)$存在，则称$f$在$a$处是<em>可微</em>（differentiable）的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline    </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib_inline <span class="keyword">import</span> backend_inline</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x ** <span class="number">2</span> - <span class="number">4</span> * x</span><br></pre></td></tr></table></figure><ul><li><code>%matplotlib inline</code>：<strong>Jupyter Notebook</strong> 的 <strong>魔法命令</strong>，让 <code>matplotlib</code> 生成的图像直接嵌入在 Jupyter Notebook 的输出单元格中，而不是弹出一个单独的窗口</li><li><code>from matplotlib_inline import backend_inline</code>：确保图像在 Jupyter Notebook 中 <strong>直接显示</strong>，而不会单独弹出窗口</li><li><code>from d2l import torch as d2l</code>：从 <code>d2l</code>（《动手学深度学习》的官方库）中 <strong>导入 PyTorch 版本的工具包</strong>，<code>d2l</code> 封装了一些绘图、数据加载等功能，方便深度学习相关任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">numerical_lim</span>(<span class="params">f, x, h</span>):</span><br><span class="line">    <span class="keyword">return</span> (f(x + h) - f(x)) / h</span><br><span class="line"></span><br><span class="line">h = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;h=<span class="subst">&#123;h:<span class="number">.5</span>f&#125;</span>, numerical limit=<span class="subst">&#123;numerical_lim(f, <span class="number">1</span>, h):<span class="number">.5</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    h *= <span class="number">0.1</span></span><br></pre></td></tr></table></figure><ul><li><code>deff numerical_lim</code>：定义导数</li><li><code>h=&#123;h:.5f&#125;</code>：格式化 <code>h</code> 为小数点后 5 位</li><li><code>numerical_lim(f, 1, h):.5f</code>：计算 <code>f(x)</code> 在 <code>x=1</code> 处的导数，并格式化输出</li></ul><h2 id="等价符号"><a href="#等价符号" class="headerlink" title="等价符号"></a>等价符号</h2><p>给定$y&#x3D;f(x)$，其中$x$和$y$分别是函数$f$的自变量和因变量。以下表达式是等价的：<br>$$<br>f’(x) &#x3D; y’ &#x3D; \frac{dy}{dx} &#x3D; \frac{df}{dx} &#x3D; \frac{d}{dx} f(x) &#x3D; Df(x) &#x3D; D_x f(x)<br>$$</p><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p><strong>为了对导数的这种解释进行可视化，我们将使用<code>matplotlib</code></strong></p><h2 id="use-svg-dieplay"><a href="#use-svg-dieplay" class="headerlink" title="use_svg_dieplay()"></a>use_svg_dieplay()</h2><p><code>use_svg_display</code>函数指定<code>matplotlib</code>软件包输出<strong>svg图表以获得更清晰的图像</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_svg_display</span>():  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用svg格式在Jupyter中显示绘图&quot;&quot;&quot;</span></span><br><span class="line">    backend_inline.set_matplotlib_formats(<span class="string">&#x27;svg&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>backend_inline</code> ： <code>matplotlib_inline</code> 库中的模块，用于控制 <strong>Jupyter Notebook 内嵌 Matplotlib 图像的显示格式</strong></li><li><code>set_matplotlib_formats(&#39;svg&#39;)</code> ：设置 Matplotlib 生成的图像格式为 <strong>SVG（可缩放矢量图）</strong>：<ul><li><strong>SVG（Scalable Vector Graphics）</strong> 是一种矢量图格式，放大后不会模糊，适合高分辨率显示（比如 Retina 屏幕）</li><li><strong>默认 Matplotlib 使用 PNG 格式</strong>，但 PNG 是像素图，放大会变模糊，而 SVG 保持清晰</li></ul></li><li><code>#@save</code>：<strong><code>d2l</code> 库</strong>（《动手学深度学习》）的特殊标记：<strong>在 <code>d2l</code> 代码工具中自动保存这个函数</strong>，以便在后续 Notebook 运行时可以直接调用，而不需要重新定义</li></ul><h2 id="set-figsize"><a href="#set-figsize" class="headerlink" title="set_figsize()"></a>set_figsize()</h2><p>定义<code>set_figsize</code>函数<strong>设置图表大小</strong>。 </p><p><strong>注意，这里可以直接使用<code>d2l.plt</code>，因为导入语句 <code>from matplotlib import pyplot as plt</code>已标记为保存到<code>d2l</code>包中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_figsize</span>(<span class="params">figsize=(<span class="params"><span class="number">3.5</span>, <span class="number">2.5</span></span>)</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置matplotlib的图表大小&quot;&quot;&quot;</span></span><br><span class="line">    use_svg_display()</span><br><span class="line">    d2l.plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = figsize</span><br></pre></td></tr></table></figure><ul><li><code>def set_figsize(figsize=(3.5, 2.5))</code>：定义一个函数 <code>set_figsize()</code>，<strong>默认图像大小为 (3.5, 2.5) 英寸</strong>（宽 3.5 英寸，高 2.5 英寸）<ul><li><code>figsize</code> 是一个 <strong>可选参数</strong>，允许用户自定义图像大小</li></ul></li><li><code>use_svg_display()</code>：确保 <strong>所有 Matplotlib 图像都以 SVG 格式显示</strong></li><li><code>figure.figsize</code>：控制 <strong>默认的 Matplotlib 图像尺寸</strong>，单位是 <strong>英寸（inch）</strong></li><li><code>d2l.plt.rcParams[&#39;figure.figsize&#39;] = figsize</code>：修改 Matplotlib <strong>所有后续图像的默认大小</strong>（用户 <strong>不需要每次手动设置 <code>figsize</code></strong>，直接 <code>plt.plot()</code> 画图时就会应用这个默认尺寸）</li></ul><h2 id="set-axes"><a href="#set-axes" class="headerlink" title="set_axes()"></a>set_axes()</h2><p><code>set_axes</code>函数用于设置<strong>自定义 Matplotlib 图表的坐标轴</strong>，包括：</p><ul><li><p>轴标签 (<code>xlabel</code>, <code>ylabel</code>)</p></li><li><p>坐标轴范围 (<code>xlim</code>, <code>ylim</code>)</p></li><li><p>坐标轴比例 (<code>xscale</code>, <code>yscale</code>)</p></li><li><p>图例 (<code>legend</code>)</p></li><li><p>网格 (<code>grid()</code>)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#@save</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_axes</span>(<span class="params">axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置matplotlib的轴&quot;&quot;&quot;</span></span><br><span class="line">    axes.set_xlabel(xlabel)</span><br><span class="line">    axes.set_ylabel(ylabel)</span><br><span class="line">    axes.set_xscale(xscale)</span><br><span class="line">    axes.set_yscale(yscale)</span><br><span class="line">    axes.set_xlim(xlim)</span><br><span class="line">    axes.set_ylim(ylim)</span><br><span class="line">    <span class="keyword">if</span> legend:</span><br><span class="line">        axes.legend(legend)</span><br><span class="line">    axes.grid()</span><br></pre></td></tr></table></figure><ol><li><p><code>axes.set_xlabel(xlabel)</code>&amp;<code>axes.set_ylabel(ylabel)</code></p><p>分别 <strong>设置 x 轴和 y 轴的标签</strong>，用于描述数据含义</p></li><li><p><code>axes.set_xscale(xscale)</code>&amp;<code>axes.set_yscale(yscale)</code></p><p><strong>设置坐标轴的比例（scale）</strong>：</p><ul><li><code>linear</code>（线性比例，默认）</li><li><code>log</code>（对数比例，适用于数据跨度较大的情况）</li></ul></li><li><p><code>axes.set_xlim(xlim)</code>&amp;<code>axes.set_ylim(ylim)</code></p><p>设置 <strong>x 轴和 y 轴的显示范围</strong>（xlim&#x3D;(0, 10)<code>表示 x 轴范围为</code>[0, 10]）</p></li><li><p><code>axes.legend(legend)</code>：</p><p>如果 <code>legend</code> <strong>不为空</strong>，则添加图例（<code>legend=[&quot;fro曲线1&quot;, &quot;曲线2&quot;]</code>，就会在图中显示这些曲线名称）</p></li><li><p><code>axes.grid()</code>：<strong>显示网格</strong></p></li></ol><h2 id="plot"><a href="#plot" class="headerlink" title="plot()"></a>plot()</h2><p>通过这三个用于图形配置的函数，定义一个<code>plot</code>函数来简洁地绘制多条曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#@save</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">X, Y=<span class="literal">None</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span>, legend=<span class="literal">None</span>, xlim=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">         ylim=<span class="literal">None</span>, xscale=<span class="string">&#x27;linear&#x27;</span>, yscale=<span class="string">&#x27;linear&#x27;</span>,</span></span><br><span class="line"><span class="params">         fmts=(<span class="params"><span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;m--&#x27;</span>, <span class="string">&#x27;g-.&#x27;</span>, <span class="string">&#x27;r:&#x27;</span></span>), figsize=(<span class="params"><span class="number">3.5</span>, <span class="number">2.5</span></span>), axes=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制数据点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> legend <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        legend = []</span><br><span class="line"></span><br><span class="line">    set_figsize(figsize)</span><br><span class="line">    axes = axes <span class="keyword">if</span> axes <span class="keyword">else</span> d2l.plt.gca()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果X有一个轴，输出True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_one_axis</span>(<span class="params">X</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">hasattr</span>(X, <span class="string">&quot;ndim&quot;</span>) <span class="keyword">and</span> X.ndim == <span class="number">1</span> <span class="keyword">or</span> <span class="built_in">isinstance</span>(X, <span class="built_in">list</span>)                   <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(X[<span class="number">0</span>], <span class="string">&quot;__len__&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> has_one_axis(X):</span><br><span class="line">        X = [X]</span><br><span class="line">    <span class="keyword">if</span> Y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        X, Y = [[]] * <span class="built_in">len</span>(X), X</span><br><span class="line">    <span class="keyword">elif</span> has_one_axis(Y):</span><br><span class="line">        Y = [Y]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(X) != <span class="built_in">len</span>(Y):</span><br><span class="line">        X = X * <span class="built_in">len</span>(Y)</span><br><span class="line">    axes.cla()</span><br><span class="line">    <span class="keyword">for</span> x, y, fmt <span class="keyword">in</span> <span class="built_in">zip</span>(X, Y, fmts):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x):</span><br><span class="line">            axes.plot(x, y, fmt)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            axes.plot(y, fmt)</span><br><span class="line">    set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)</span><br></pre></td></tr></table></figure><h3 id="代码参数"><a href="#代码参数" class="headerlink" title="代码参数"></a>代码参数</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>X</code></td><td><strong>横坐标数据</strong>，可以是一维数组或多条曲线的 x 轴数据</td></tr><tr><td><code>Y</code></td><td><strong>纵坐标数据</strong>，可以是一维数组或多条曲线的 y 轴数据</td></tr><tr><td><code>xlabel</code> &#x2F; <code>ylabel</code></td><td><strong>x 轴 &#x2F; y 轴的标签</strong></td></tr><tr><td><code>legend</code></td><td><strong>图例（legend）</strong>，用于标注不同曲线</td></tr><tr><td><code>xlim</code> &#x2F; <code>ylim</code></td><td><strong>x 轴 &#x2F; y 轴的范围</strong>（比如 <code>(0,10)</code>）</td></tr><tr><td><code>xscale</code> &#x2F; <code>yscale</code></td><td><strong>坐标轴的比例</strong>（默认为 <code>linear</code>，可以改为 <code>log</code>）</td></tr><tr><td><code>fmts</code></td><td><strong>曲线样式</strong>，默认支持 <code>-</code> (实线)，<code>m--</code> (紫色虚线)，<code>g-.</code> (绿色点划线)，<code>r:</code> (红色点线)</td></tr><tr><td><code>figsize</code></td><td><strong>绘图尺寸</strong>（默认 <code>(3.5, 2.5)</code>）</td></tr><tr><td><code>axes</code></td><td><strong>指定 Matplotlib 轴对象</strong>，如果为 <code>None</code>，则使用当前轴</td></tr></tbody></table><h3 id="设置图像大小"><a href="#设置图像大小" class="headerlink" title="设置图像大小"></a>设置图像大小</h3><p><code>set_figsize()</code>：</p><h3 id="获取-Matplotlib-轴对象"><a href="#获取-Matplotlib-轴对象" class="headerlink" title="获取 Matplotlib 轴对象"></a>获取 Matplotlib 轴对象</h3><p><code>axes = axes if axes else d2l.plt.gca()</code>：如果 <code>axes</code> 参数 <strong>为空</strong>，则调用 <code>d2l.plt.gca()</code> 获取当前轴对象（Matplotlib 的 <code>gca()</code> 返回当前的 <code>axes</code>）</p><h3 id="检查-X-是否为一维数组"><a href="#检查-X-是否为一维数组" class="headerlink" title="检查 X 是否为一维数组"></a>检查 <code>X</code> 是否为一维数组</h3><p><code>def has_one_axis(X)</code>：<strong>检查 <code>X</code> 是否为一维数组</strong></p><ul><li><code>hasattr(X, &quot;ndim&quot;) and X.ndim == 1</code>：检查 <code>X</code> 是否是 <strong>NumPy 数组</strong>，并且是一维的</li><li><code>isinstance(X, list) and not hasattr(X[0], &quot;__len__&quot;)</code>：检查 <code>X</code> 是否是 <strong>Python 列表</strong>，并且列表中的 <strong>元素不是列表</strong>（即 <code>X</code> 是一维列表）</li></ul><p><strong>代码拆解：</strong></p><ol><li><code>hasattr(X, &quot;ndim&quot;)</code>：<code>hasattr</code> 是一个 Python 内置函数，用于检查对象是否有某个属性。这里检查的是 <code>X</code> 是否有 <code>ndim</code> 属性（通常是 <code>numpy</code> 数组才会有 <code>ndim</code> 属性，它表示数组的维度）。</li><li><code>X.ndim == 1</code>：这检查 <code>X</code> 是否是一维数组。<code>X.ndim</code> 表示数组的维度。</li><li><code>isinstance(X, list)</code>：这检查 <code>X</code> 是否是一个 Python <code>list</code> 类型（即普通列表）</li><li><code>not hasattr(X[0], &quot;__len__&quot;)</code>：这检查 <code>X</code> 中的第一个元素（<code>X[0]</code>）是否没有 <code>__len__</code> 属性。<code>__len__</code> 属性通常用于表示对象的长度（例如列表）。如果 <code>X[0]</code> 不是列表或其他可迭代对象，就说明 <code>X</code> 是一个<strong>一维的普通列表</strong>，而不是嵌套列表</li></ol><h3 id="处理X和Y数据"><a href="#处理X和Y数据" class="headerlink" title="处理X和Y数据"></a>处理<code>X</code>和<code>Y</code>数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> has_one_axis(X):</span><br><span class="line">    X = [X]  <span class="comment"># 转换为列表的列表</span></span><br><span class="line"><span class="keyword">if</span> Y <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    X, Y = [[]] * <span class="built_in">len</span>(X), X  <span class="comment"># 交换 X 和 Y（如果只给了 Y）</span></span><br><span class="line"><span class="keyword">elif</span> has_one_axis(Y):</span><br><span class="line">    Y = [Y]  <span class="comment"># 转换为列表的列表</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(X) != <span class="built_in">len</span>(Y):</span><br><span class="line">    X = X * <span class="built_in">len</span>(Y)  <span class="comment"># 复制 X，使 X 和 Y 的长度一致</span></span><br></pre></td></tr></table></figure><ul><li><p>如果 <code>X</code> 是 <strong>一维数据</strong>，转换为 <strong>二维列表</strong>（<code>X = [X]</code>），<strong>这样可以绘制多条曲线</strong></p></li><li><p>如果 <strong>没有提供 <code>Y</code></strong>，则 <code>X</code> 变为空列表，<code>Y = X</code>（支持 <code>plot(Y)</code> 的情况）</p><p><strong>实际意义：如果 <code>Y</code> 为空，则假定 <code>X</code> 实际上是 <code>Y</code>，并自动生成 <code>X</code>，Matplotlib 会自动使用索引 <code>[0,1,2,...]</code> 作为 <code>X</code></strong></p></li><li><p>如果 <code>Y</code> 是 <strong>一维数据</strong>，转换为 <strong>二维列表</strong>（<code>Y = [Y]</code>）</p></li><li><p>如果 <code>X</code> 和 <code>Y</code> <strong>长度不匹配</strong>，复制 <code>X</code> 以匹配 <code>Y</code> 的长度（适用于 <code>X</code> 只有一组数据，而 <code>Y</code> 有多组）</p></li></ul><p><strong>example</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">has_one_axis(X)  <span class="comment"># True</span></span><br><span class="line">X = [X]  <span class="comment"># 变为 [[1, 2, 3]]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">Y = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为：</span></span><br><span class="line">X, Y = [[]] * <span class="built_in">len</span>(X), X</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(X)  <span class="comment"># [[], [], []]</span></span><br><span class="line"><span class="built_in">print</span>(Y)  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Y = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">has_one_axis(Y)  <span class="comment"># True</span></span><br><span class="line">Y = [Y]  <span class="comment"># 变为 [[2, 4, 6]]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]  <span class="comment"># 只有一个 X</span></span><br><span class="line">Y = [[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]]  <span class="comment"># 两条曲线</span></span><br><span class="line"></span><br><span class="line">X = X * <span class="built_in">len</span>(Y)  <span class="comment"># 复制 X</span></span><br><span class="line"><span class="built_in">print</span>(X)  </span><br><span class="line"><span class="comment"># [[1, 2, 3], [1, 2, 3]]</span></span><br></pre></td></tr></table></figure><h3 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axes.cla()  <span class="comment"># 清除当前轴的内容</span></span><br><span class="line"><span class="keyword">for</span> x, y, fmt <span class="keyword">in</span> <span class="built_in">zip</span>(X, Y, fmts):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x):</span><br><span class="line">        axes.plot(x, y, fmt)  <span class="comment"># 绘制 (x, y)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        axes.plot(y, fmt)  <span class="comment"># 仅绘制 y（x 省略时，Matplotlib 默认使用索引作为 x 轴）</span></span><br></pre></td></tr></table></figure><ul><li><p><code>axes.cla()</code> <strong>清除当前坐标轴的内容</strong>，避免重复绘制。</p></li><li><p><code>zip(X, Y, fmts)</code></p><p> 逐一取出<code>x, y, fmt</code>：</p><ul><li><code>axes.plot(x, y, fmt)</code> 画曲线（<code>fmt</code> 指定曲线样式）。</li><li>如果 <code>x</code> <strong>为空</strong>，则直接绘制 <code>y</code>，Matplotlib 默认 <code>x = range(len(y))</code>。</li></ul></li></ul><h3 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h3><ul><li><code>set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)</code>：<strong>统一设置坐标轴参数</strong>（坐标范围、刻度、比例、标签等）</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0.1</span>)</span><br><span class="line">plot(x, [f(x), <span class="number">2</span> * x - <span class="number">3</span>], <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;f(x)&#x27;</span>, legend=[<span class="string">&#x27;f(x)&#x27;</span>, <span class="string">&#x27;Tangent line (x=1)&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/matplotlib_example.png" alt="example"></p><h1 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h1><p>将微分的思想推广到<em>多元函数</em>（multivariate function）上</p><p>设$y &#x3D; f(x_1, x_2, \ldots, x_n)$是一个具有$n$个变量的函数，$y$关于第$i$个参数$x_i$的<em>偏导数</em>（partial derivative）为：<br>$$<br>\frac{\partial y}{\partial x_i} &#x3D; \lim_{h \rightarrow 0} \frac{f(x_1, \ldots, x_{i-1}, x_i+h, x_{i+1}, \ldots, x_n) - f(x_1, \ldots, x_i, \ldots, x_n)}{h}.<br>$$</p><h2 id="等价符号-1"><a href="#等价符号-1" class="headerlink" title="等价符号"></a>等价符号</h2><p>对于偏导数的表示，以下是等价的：<br>$$<br>\frac{\partial y}{\partial x_i} &#x3D; \frac{\partial f}{\partial x_i} &#x3D; f_{x_i} &#x3D; f_i &#x3D; D_i f &#x3D; D_{x_i} f.<br>$$</p><h1 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h1><p>连结一个多元函数对其所有变量的偏导数，以得到该函数的<em>梯度</em>（gradient）向量</p><p>设函数$f:\mathbb{R}^n\rightarrow\mathbb{R}$的输入是一个$n$维向量$\mathbf{x}&#x3D;[x_1,x_2,\ldots,x_n]^\top$，并且输出是一个标量，函数$f(\mathbf{x})$相对于$\mathbf{x}$的梯度是一个包含$n$个偏导数的向量:<br>$$<br>\nabla_{\mathbf{x}} f(\mathbf{x}) &#x3D; \bigg[\frac{\partial f(\mathbf{x})}{\partial x_1}, \frac{\partial f(\mathbf{x})}{\partial x_2}, \ldots, \frac{\partial f(\mathbf{x})}{\partial x_n}\bigg]^\top<br>$$<br>其中$\nabla_{\mathbf{x}} f(\mathbf{x})$通常在没有歧义时被$\nabla f(\mathbf{x})$取代</p><h2 id="常用结论"><a href="#常用结论" class="headerlink" title="常用结论"></a>常用结论</h2><p>假设$\mathbf{x}$为$n$维向量，在微分多元函数时经常使用以下规则:</p><ul><li>对于所有$\mathbf{A} \in \mathbb{R}^{m \times n}$，都有$\nabla_{\mathbf{x}} \mathbf{A} \mathbf{x} &#x3D; \mathbf{A}^\top$</li><li>对于所有$\mathbf{A} \in \mathbb{R}^{n \times m}$，都有$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A}  &#x3D; \mathbf{A}$</li><li>对于所有$\mathbf{A} \in \mathbb{R}^{n \times n}$，都有$\nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{A} \mathbf{x}  &#x3D; (\mathbf{A} + \mathbf{A}^\top)\mathbf{x}$</li><li>$\nabla_{\mathbf{x}} |\mathbf{x} |^2 &#x3D; \nabla_{\mathbf{x}} \mathbf{x}^\top \mathbf{x} &#x3D; 2\mathbf{x}$</li></ul><p>同样，对于任何矩阵$\mathbf{X}$，都有$\nabla_{\mathbf{X}} |\mathbf{X} |_F^2 &#x3D; 2\mathbf{X}$</p><p><a href="https://zhuanlan.zhihu.com/p/273729929">矩阵求导</a></p><h1 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h1><p>在深度学习中，多元函数通常是<em>复合</em>（composite）的， 所以难以应用上述任何规则来微分这些函数。幸运的是，链式法则可以被用来微分复合函数。</p><h2 id="单变量函数"><a href="#单变量函数" class="headerlink" title="单变量函数"></a>单变量函数</h2><p>让我们先考虑单变量函数。假设函数$y&#x3D;f(u)$和$u&#x3D;g(x)$都是可微的，根据链式法则：<br>$$<br>\frac{dy}{dx} &#x3D; \frac{dy}{du} \frac{du}{dx}.<br>$$</p><h2 id="任意数量的变量"><a href="#任意数量的变量" class="headerlink" title="任意数量的变量"></a>任意数量的变量</h2><p>假设可微分函数$y$有变量$u_1, u_2, \ldots, u_m$，其中每个可微分函数$u_i$都有变量$x_1, x_2, \ldots, x_n$。注意，$y$是$x_1, x_2， \ldots, x_n$的函数。对于任意$i &#x3D; 1, 2, \ldots, n$，链式法则给出：<br>$$<br>\frac{\partial y}{\partial x_i} &#x3D; \frac{\partial y}{\partial u_1} \frac{\partial u_1}{\partial x_i} + \frac{\partial y}{\partial u_2} \frac{\partial u_2}{\partial x_i} + \cdots + \frac{\partial y}{\partial u_m} \frac{\partial u_m}{\partial x_i}<br>$$</p><h1 id="自动微分"><a href="#自动微分" class="headerlink" title="自动微分"></a>自动微分</h1><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p><strong>对函数$y&#x3D;2\mathbf{x}^{\top}\mathbf{x}$关于列向量$\mathbf{x}$求导</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.arange(<span class="number">4.0</span>) <span class="comment"># tensor([0., 1., 2., 3.])</span></span><br><span class="line"></span><br><span class="line">x.requires_grad_(<span class="literal">True</span>)  <span class="comment"># 等价于x=torch.arange(4.0,requires_grad=True)</span></span><br><span class="line">x.grad  <span class="comment"># 默认值是None</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">2</span> * torch.dot(x, x) <span class="comment"># tensor(28., grad_fn=&lt;MulBackward0&gt;)</span></span><br><span class="line"></span><br><span class="line">y.backward()</span><br><span class="line">x.grad <span class="comment"># tensor([ 0.,  4.,  8., 12.])</span></span><br><span class="line"></span><br><span class="line">x.grad == <span class="number">4</span> * x <span class="comment"># 验证：tensor([True, True, True, True])</span></span><br></pre></td></tr></table></figure><ul><li><p><code>requires_grad_(True)</code>： 使 <code>x</code> 具有 <strong>自动求导</strong> 功能（梯度计算）</p></li><li><p><code>x.grad</code> ：默认是 <code>None</code>，因为梯度只有在 <code>backward()</code> 调用后才会被计算</p></li><li><p><code>y.backward()</code>：<code>y</code> 对 <code>x</code> 进行反向传播，计算梯度 <code>dy/dx</code></p></li><li><p><code>grad_fn=&lt;MulBackward0&gt;</code>：</p><ul><li><code>grad_fn</code>（Gradient Function）是 PyTorch <strong>自动求导机制 (<code>autograd</code>)</strong> 记录的 <strong>计算历史</strong>，它指向了 <strong>生成这个张量的运算</strong>，从而支持反向传播</li><li><strong><code>MulBackward0</code> 代表乘法的反向传播</strong>（<code>Backward</code> 代表反向传播）</li></ul></li></ul><p><strong><code>x</code>的另一个函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在默认情况下，PyTorch会累积梯度，我们需要清除之前的值</span></span><br><span class="line">x.grad.zero_()</span><br><span class="line">y = x.<span class="built_in">sum</span>()</span><br><span class="line">y.backward()</span><br><span class="line">x.grad</span><br><span class="line"><span class="comment"># tensor([1., 1., 1., 1.])</span></span><br></pre></td></tr></table></figure><h2 id="非标量变量的反向传播"><a href="#非标量变量的反向传播" class="headerlink" title="非标量变量的反向传播"></a>非标量变量的反向传播</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。</span></span><br><span class="line"><span class="comment"># 本例只想求偏导数的和，所以传递一个1的梯度是合适的</span></span><br><span class="line">x.grad.zero_()</span><br><span class="line">y = x * x</span><br><span class="line"><span class="comment"># 等价于y.backward(torch.ones(len(x)))</span></span><br><span class="line">y.<span class="built_in">sum</span>().backward()</span><br><span class="line">x.grad <span class="comment"># tensor([0., 2., 4., 6.])</span></span><br></pre></td></tr></table></figure><ul><li><code>x.grad.zero_()</code>：清空 <code>x.grad</code>。在 PyTorch 中，<code>backward()</code> <strong>不会自动清空 <code>x.grad</code></strong>，如果不手动清除，梯度会 <strong>累积</strong></li></ul><p><strong>注意：</strong></p><p>在 PyTorch 中，<code>backward()</code> 的默认行为是 <strong>计算 <code>y</code> 对 <code>x</code> 的梯度</strong>，并存入 <code>x.grad</code>。但 <code>backward()</code> 只能对 <strong>标量（单个数值）调用</strong>，如果 <code>y</code> 是 <strong>张量（向量&#x2F;矩阵）</strong>，就必须手动指定如何计算梯度。</p><table><thead><tr><th><code>y</code>类型</th><th>直接<code>.backward()</code></th><th>需要<code>y.sum()</code>吗</th><th>解决方案</th></tr></thead><tbody><tr><td>标量：<code>shape=()</code></td><td>&#10004;允许</td><td>&#10007;不需要</td><td><code>y.backward()</code></td></tr><tr><td>向量：<code>shape=(n,)</code></td><td>&#10007;报错</td><td>&#10004;需要</td><td><code>y.sum()</code>或<code>y.backward(torch.ones_like(y))</code></td></tr><tr><td>矩阵：<code>shape=(m,n)</code></td><td>&#10007;报错</td><td>&#10004;需要</td><td><code>y.sum()</code>或<code>y.backward(torch.ones_like(y))</code></td></tr></tbody></table><h2 id="分离计算"><a href="#分离计算" class="headerlink" title="分离计算"></a>分离计算</h2><p>有时，我们希望<strong>将某些计算移动到记录的计算图之外</strong>。</p><p>例如，假设<code>y</code>是作为<code>x</code>的函数计算的，而<code>z</code>则是作为<code>y</code>和<code>x</code>的函数计算的。我们想计算<code>z</code>关于<code>x</code>的梯度，但由于某种原因，希望将<code>y</code>视为一个常数，并且只考虑到<code>x</code>在<code>y</code>被计算后发挥的作用。</p><p>这里可以分离<code>y</code>来返回一个新变量<code>u</code>，该变量与<code>y</code>具有相同的值，但丢弃计算图中如何计算<code>y</code>的任何信息。换句话说，梯度不会向后流经<code>u</code>到<code>x</code>。因此，下面的反向传播函数计算<code>z=u*x</code>关于<code>x</code>的偏导数，同时将<code>u</code>作为常数处理，而不是<code>z=x*x*x</code>关于<code>x</code>的偏导数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y = x * x</span><br><span class="line">u = y.detach()</span><br><span class="line">z = u * x</span><br><span class="line"></span><br><span class="line">z.<span class="built_in">sum</span>().backward()</span><br><span class="line">x.grad == u <span class="comment"># tensor([True, True, True, True])</span></span><br></pre></td></tr></table></figure><ul><li><code>detach()</code>：返回一个与 <code>y</code> 具有相同值的新张量 <code>u</code>，但不参与梯度计算。<code>u</code> 不会计算梯度，也不会影响 <code>x.grad</code></li></ul><p>随后在<code>y</code>上调用反向传播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y.<span class="built_in">sum</span>().backward()</span><br><span class="line">x.grad == <span class="number">2</span> * x <span class="comment"># tensor([True, True, True, True])</span></span><br></pre></td></tr></table></figure><h2 id="Python控制流的梯度计算"><a href="#Python控制流的梯度计算" class="headerlink" title="Python控制流的梯度计算"></a>Python控制流的梯度计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>):</span><br><span class="line">    b = a * <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> b.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">        b = b * <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> b.<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">        c = b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c = <span class="number">100</span> * b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">a = torch.randn(size=(), requires_grad=<span class="literal">True</span>)</span><br><span class="line">d = f(a)</span><br><span class="line">d.backward()</span><br><span class="line"></span><br><span class="line">a.grad == d / a <span class="comment"># tensor(True)</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.randn(size=())</code> 生成一个 <strong>零维（标量）</strong> 的随机数 <code>a</code>，其值服从 <strong>标准正态分布</strong></li><li><code>requires_grad=True</code> 使 <code>a</code> 参与自动求导</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="为什么计算二阶导数比一阶导数的开销要更大？"><a href="#为什么计算二阶导数比一阶导数的开销要更大？" class="headerlink" title="为什么计算二阶导数比一阶导数的开销要更大？"></a>为什么计算二阶导数比一阶导数的开销要更大？</h2><ol><li>计算图更复杂</li><li>需要存储更多的中间变量</li><li>计算二阶导数需要两次反向传播</li></ol><h2 id="在运行反向传播函数之后，立即再次运行它，看看会发生什么？"><a href="#在运行反向传播函数之后，立即再次运行它，看看会发生什么？" class="headerlink" title="在运行反向传播函数之后，立即再次运行它，看看会发生什么？"></a>在运行反向传播函数之后，立即再次运行它，看看会发生什么？</h2><p>如果在<strong>没有设置 <code>retain_graph=True</code></strong> 的情况下，<strong>立即再次运行 <code>backward()</code></strong>，PyTorch 会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor(<span class="number">2.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line">y.backward()</span><br><span class="line">x.grad <span class="comment"># tensor(12.)</span></span><br><span class="line"></span><br><span class="line">y.backward()</span><br><span class="line">x.grad </span><br><span class="line"><span class="comment"># RuntimeError: Trying to backward through the graph a second time, but the buffers have already been freed. Specify retain_graph=True when calling backward the first time.</span></span><br></pre></td></tr></table></figure><h3 id="为什么会报错"><a href="#为什么会报错" class="headerlink" title="为什么会报错"></a>为什么会报错</h3><p>当 <code>backward()</code> 运行时，PyTorch <strong>默认会释放计算图</strong>，以节省内存。因此：</p><ol><li><strong>第一次调用 <code>y.backward()</code></strong>：<ul><li>PyTorch 计算 <code>dy/dx</code> 并存储在 <code>x.grad</code> 里。</li><li>计算完成后，PyTorch 释放计算图，清除所有用于计算梯度的中间变量。</li></ul></li><li><strong>第二次调用 <code>y.backward()</code></strong>：<ul><li>由于计算图已经释放，PyTorch 无法再次计算梯度，因此报错。</li></ul></li></ol><h3 id="如何避免这个问题"><a href="#如何避免这个问题" class="headerlink" title="如何避免这个问题"></a>如何避免这个问题</h3><p>如果你想在 <strong>同一个计算图上多次调用 <code>backward()</code></strong>，需要在第一次 <code>backward()</code> 时 <strong>保留计算图</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y.backward(retain_graph=<span class="literal">True</span>)  <span class="comment"># 允许计算图保留</span></span><br><span class="line">y.backward()  <span class="comment"># 第二次运行，不会报错</span></span><br></pre></td></tr></table></figure><h3 id="什么时候需要多次-backward-？"><a href="#什么时候需要多次-backward-？" class="headerlink" title="什么时候需要多次 backward()？"></a>什么时候需要多次 <code>backward()</code>？</h3><ul><li><strong>计算二阶导数</strong>（如 Hessian 矩阵）</li><li><strong>多次计算梯度</strong>（如在强化学习中的策略梯度方法）</li></ul><p>但一般情况下，只需要一次 <code>backward()</code> 即可，无需 <code>retain_graph=True</code></p><h2 id="使-f-x-sin-x-，绘制-f-x-和-frac-df-x-dx-的图像，其中后者不使用-f’-x-cos-x"><a href="#使-f-x-sin-x-，绘制-f-x-和-frac-df-x-dx-的图像，其中后者不使用-f’-x-cos-x" class="headerlink" title="使$f(x)&#x3D;\sin(x)$，绘制$f(x)$和$\frac{df(x)}{dx}$的图像，其中后者不使用$f’(x)&#x3D;\cos(x)$"></a>使$f(x)&#x3D;\sin(x)$，绘制$f(x)$和$\frac{df(x)}{dx}$的图像，其中后者不使用$f’(x)&#x3D;\cos(x)$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">x.grad.zero_()</span><br><span class="line"></span><br><span class="line">x = torch.linspace(-<span class="number">1</span> * torch.pi, <span class="number">1</span> * torch.pi, <span class="number">1000</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.sin(x)</span><br><span class="line"></span><br><span class="line">y.<span class="built_in">sum</span>().backward()</span><br><span class="line">dy_dx = x.grad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意-绘图</span></span><br><span class="line">d2l.plot(x.detach().numpy(), [y.detach().numpy(), dy_dx.detach().numpy()], <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, legend=[<span class="string">r&#x27;$f(x) = \sin(x)$&#x27;</span>, <span class="string">r&quot;$\frac&#123;df&#125;&#123;dx&#125;$ (computed numerically)&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/autograd_question.png" alt="autograd_question"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>将 <code>x</code>、<code>y</code> 和 <code>dy_dx</code> <strong>转换为 NumPy 数组</strong> 时，<strong>使用 <code>.detach().numpy()</code>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.plot(x.detach().numpy(), [y.detach().numpy(), dy_dx.detach().numpy()], <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, legend=[<span class="string">r&#x27;$f(x) = \sin(x)$&#x27;</span>, <span class="string">r&quot;$\frac&#123;df&#125;&#123;dx&#125;$ (computed numerically)&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在 PyTorch 中：</p><ul><li><code>tensor.numpy()</code> <strong>不能</strong>用于 <code>requires_grad=True</code> 的张量</li><li>需要先调用 <code>tensor.detach()</code>，这样 PyTorch 就不会追踪计算图，可以安全地转换为 NumPy</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>**Pytorch 计算图与自动求导：**在 PyTorch 中，每当你对一个 <code>requires_grad=True</code> 的张量执行操作，PyTorch <strong>会构建一张计算图</strong>，用于追踪所有计算，以便稍后进行 <strong>反向传播</strong>（backpropagation）。</p><p>**为什么 <code>numpy()</code> 不允许直接调用？：**当 <code>requires_grad=True</code> 时，<strong>直接调用 <code>.numpy()</code> 会破坏计算图</strong>，这会导致 PyTorch <strong>无法继续反向传播</strong>。</p><p><strong>如何解决？：</strong><code>detach()</code> 方法的作用是 <strong>从计算图中分离张量</strong>，使其成为普通张量，不再追踪梯度。因此，我们可以先 <code>detach()</code> 再 <code>numpy()</code></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数（深度学习）</title>
      <link href="/2025/03/03/2025-3-3-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/03/2025-3-3-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="标量"><a href="#标量" class="headerlink" title="标量"></a>标量</h1><p><strong>标量由只有一个元素的张量表示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor(<span class="number">3.0</span>)</span><br><span class="line">y = torch.tensor(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">x + y, x * y, x / y, x**y</span><br><span class="line"></span><br><span class="line">// (tensor(<span class="number">5.</span>), tensor(<span class="number">6.</span>), tensor(<span class="number">1.5000</span>), tensor(<span class="number">9.</span>))</span><br></pre></td></tr></table></figure><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p><strong>向量可以被视为标量值组成的列表</strong>，这些标量值被称为向量的<em>元素</em>（element）或<em>分量</em>（component）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line">// tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><strong>通过张量的索引来访问任一元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>]</span><br><span class="line">// tensot(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="长度、维度和形状"><a href="#长度、维度和形状" class="headerlink" title="长度、维度和形状"></a>长度、维度和形状</h2><p><strong>向量</strong>的长度通常称为向量的<strong>维度（dimension）</strong></p><ul><li><p>访问张量长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(x)</span><br><span class="line">// <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><p>**形状（shape）**是一个元素组，列出了张量沿每个轴的长度（维数）</p><p>用张量表示一个向量（只有一个轴）时，<strong>形状只有一个元素</strong></p><ul><li><p>访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.shape</span><br><span class="line">// torch.Size([<span class="number">4</span>])</span><br></pre></td></tr></table></figure></li></ul><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><ul><li><p>创建矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">A</span><br><span class="line"></span><br><span class="line">// tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure></li><li><p>矩阵的转置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A.T</span><br><span class="line"></span><br><span class="line">// tensor([[ <span class="number">0</span>,  <span class="number">4</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>],</span><br><span class="line">        [ <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line">B = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">B</span><br><span class="line"></span><br><span class="line">// tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">B == B.T</span><br><span class="line"></span><br><span class="line">// tensor([[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure></li></ul><h1 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h1><p><strong>张量是描述具有任意数量轴的n维数组的通用方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">24</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">X </span><br><span class="line"></span><br><span class="line">// tensor([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">            [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">            [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line">           [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">            [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">            [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br></pre></td></tr></table></figure><h2 id="张量算法的基本性质"><a href="#张量算法的基本性质" class="headerlink" title="张量算法的基本性质"></a>张量算法的基本性质</h2><h3 id="元素加法"><a href="#元素加法" class="headerlink" title="元素加法"></a>元素加法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>, dtype=torch.float32).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">B = A.clone()    <span class="comment"># 通过分配新内存，将A的一个副本分配给B</span></span><br><span class="line">A, A + B</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor([[ 0.,  1.,  2.,  3.],</span></span><br><span class="line"><span class="string">         [ 4.,  5.,  6.,  7.],</span></span><br><span class="line"><span class="string">         [ 8.,  9., 10., 11.],</span></span><br><span class="line"><span class="string">         [12., 13., 14., 15.],</span></span><br><span class="line"><span class="string">         [16., 17., 18., 19.]]),</span></span><br><span class="line"><span class="string"> tensor([[ 0.,  2.,  4.,  6.],</span></span><br><span class="line"><span class="string">         [ 8., 10., 12., 14.],</span></span><br><span class="line"><span class="string">         [16., 18., 20., 22.],</span></span><br><span class="line"><span class="string">         [24., 26., 28., 30.],</span></span><br><span class="line"><span class="string">         [32., 34., 36., 38.]]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Hadamard积"><a href="#Hadamard积" class="headerlink" title="Hadamard积"></a>Hadamard积</h3><p>$$<br>\mathbf{A} \odot \mathbf{B} &#x3D;<br>\begin{bmatrix}<br>    a_{11}  b_{11} &amp; a_{12}  b_{12} &amp; \dots  &amp; a_{1n}  b_{1n} \<br>    a_{21}  b_{21} &amp; a_{22}  b_{22} &amp; \dots  &amp; a_{2n}  b_{2n} \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    a_{m1}  b_{m1} &amp; a_{m2}  b_{m2} &amp; \dots  &amp; a_{mn}  b_{mn}<br>\end{bmatrix}.<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A * B</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[  0.,   1.,   4.,   9.],</span></span><br><span class="line"><span class="string">        [ 16.,  25.,  36.,  49.],</span></span><br><span class="line"><span class="string">        [ 64.,  81., 100., 121.],</span></span><br><span class="line"><span class="string">        [144., 169., 196., 225.],</span></span><br><span class="line"><span class="string">        [256., 289., 324., 361.]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>将张量乘以或加上一个标量不会改变张量的形状，其中张量的每个元素都将与标量相加或相乘</li></ul><h1 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h1><h2 id="A："><a href="#A：" class="headerlink" title="A："></a>A：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">         [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">         [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">         [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>],</span><br><span class="line">         [<span class="number">16.</span>, <span class="number">17.</span>, <span class="number">18.</span>, <span class="number">19.</span>]])</span><br></pre></td></tr></table></figure><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A.shape(), A.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(torch.Size([5, 4]), tensor(190.))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="沿轴求和"><a href="#沿轴求和" class="headerlink" title="沿轴求和"></a>沿轴求和</h2><h3 id="沿行求和"><a href="#沿行求和" class="headerlink" title="沿行求和"></a>沿行求和</h3><ul><li>轴0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis0 = A.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">A_sum_axis0, A_sum_axis0.shape</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor([40., 45., 50., 55.]), torch.Size([4]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="沿列求和"><a href="#沿列求和" class="headerlink" title="沿列求和"></a>沿列求和</h3><ul><li>轴1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis1 = A.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">A_sum_axis1, A_sum_axis1.shape</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor([ 6., 22., 38., 54., 70.]), torch.Size([5]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="沿着行和列对矩阵求和"><a href="#沿着行和列对矩阵求和" class="headerlink" title="沿着行和列对矩阵求和"></a>沿着行和列对矩阵求和</h3><p>价于对矩阵的所有元素进行求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="built_in">sum</span>(axis=[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 结果和A.sum()相同</span></span><br></pre></td></tr></table></figure><h2 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A.mean(), A.<span class="built_in">sum</span>() / A.numel()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor(9.5000), tensor(9.5000))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>沿指定轴求平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A.mean(axis=<span class="number">0</span>), A.<span class="built_in">sum</span>(axis=<span class="number">0</span>) / A.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor([ 8.,  9., 10., 11.]), tensor([ 8.,  9., 10., 11.]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="非降维求和"><a href="#非降维求和" class="headerlink" title="非降维求和"></a>非降维求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum_A = A.<span class="built_in">sum</span>(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">sum_A</span><br></pre></td></tr></table></figure><p>求和后仍保持两个轴，可以<strong>通过广播将<code>A</code>除以<code>sum_A</code></strong>，得知每个元素在各行的占比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A / sum_A</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[0.0000, 0.1667, 0.3333, 0.5000],</span></span><br><span class="line"><span class="string">        [0.1818, 0.2273, 0.2727, 0.3182],</span></span><br><span class="line"><span class="string">        [0.2105, 0.2368, 0.2632, 0.2895],</span></span><br><span class="line"><span class="string">        [0.2222, 0.2407, 0.2593, 0.2778],</span></span><br><span class="line"><span class="string">        [0.2286, 0.2429, 0.2571, 0.2714]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="沿轴求累积和"><a href="#沿轴求累积和" class="headerlink" title="沿轴求累积和"></a>沿轴求累积和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A.cumsum(axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[ 0.,  1.,  2.,  3.],</span></span><br><span class="line"><span class="string">        [ 4.,  6.,  8., 10.],</span></span><br><span class="line"><span class="string">        [12., 15., 18., 21.],</span></span><br><span class="line"><span class="string">        [24., 28., 32., 36.],</span></span><br><span class="line"><span class="string">        [40., 45., 50., 55.]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h1><ul><li><p><code>torch.dot(x, y)</code></p></li><li><p>向量乘向量</p></li></ul><p>$$<br>\mathbf{x}^\top \mathbf{y} &#x3D; \sum_{i&#x3D;1}^{d} x_i y_i<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y = torch.ones(<span class="number">4</span>, dtype = torch.float32)</span><br><span class="line">x, y, torch.dot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(tensor([0., 1., 2., 3.]), tensor([1., 1., 1., 1.]), tensor(6.))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>或者：按元素乘法，然后进行求和来表示两个向量的点积</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(x * y)</span><br><span class="line">tensor(<span class="number">6.</span>)</span><br></pre></td></tr></table></figure><h1 id="矩阵-向量积"><a href="#矩阵-向量积" class="headerlink" title="矩阵-向量积"></a>矩阵-向量积</h1><ul><li><code>torch.mv(A, x)</code></li></ul><p>$$<br>\mathbf{A}\mathbf{x}<br>&#x3D; \begin{bmatrix}<br>\mathbf{a}^\top_{1} \<br>\mathbf{a}^\top_{2} \<br>\vdots \<br>\mathbf{a}^\top_m \<br>\end{bmatrix}\mathbf{x}<br>&#x3D; \begin{bmatrix}<br> \mathbf{a}^\top_{1} \mathbf{x}  \<br> \mathbf{a}^\top_{2} \mathbf{x} \<br>\vdots\<br> \mathbf{a}^\top_{m} \mathbf{x}\<br>\end{bmatrix}.<br>$$</p><p>$$<br>其中每个\mathbf{a}^\top_{i} \in \mathbb{R}^n都是向量，表示矩阵的第i行<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A.shape, x.shape, torch.mv(A, x)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(torch.Size([5, 4]), torch.Size([4]), tensor([ 14.,  38.,  62.,  86., 110.]))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>A</code>的列维数（沿轴1的长度）必须与<code>x</code>的维数（其长度）相同</li></ul><h1 id="矩阵-矩阵乘法"><a href="#矩阵-矩阵乘法" class="headerlink" title="矩阵-矩阵乘法"></a>矩阵-矩阵乘法</h1><ul><li><code>torch.mm(A, B)</code></li></ul><p>$$<br>\mathbf{A}&#x3D;\begin{bmatrix}<br> a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1k} \<br> a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2k} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br> a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nk} \<br>\end{bmatrix},\quad<br>\mathbf{B}&#x3D;\begin{bmatrix}<br> b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1m} \<br> b_{21} &amp; b_{22} &amp; \cdots &amp; b_{2m} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br> b_{k1} &amp; b_{k2} &amp; \cdots &amp; b_{km} \<br>\end{bmatrix}.<br>$$</p><p>$$<br>\mathbf{A}&#x3D;<br>\begin{bmatrix}<br>\mathbf{a}^\top_{1} \<br>\mathbf{a}^\top_{2} \<br>\vdots \<br>\mathbf{a}^\top_n \<br>\end{bmatrix},<br>\quad \mathbf{B}&#x3D;\begin{bmatrix}<br> \mathbf{b}<em>{1} &amp; \mathbf{b}</em>{2} &amp; \cdots &amp; \mathbf{b}_{m} \<br>\end{bmatrix}.<br>$$</p><p>$$<br>\mathbf{C} &#x3D; \mathbf{AB} &#x3D; \begin{bmatrix}<br>\mathbf{a}^\top_{1} \<br>\mathbf{a}^\top_{2} \<br>\vdots \<br>\mathbf{a}^\top_n \<br>\end{bmatrix}<br>\begin{bmatrix}<br> \mathbf{b}<em>{1} &amp; \mathbf{b}</em>{2} &amp; \cdots &amp; \mathbf{b}<em>{m} \<br>\end{bmatrix}<br>&#x3D; \begin{bmatrix}<br>\mathbf{a}^\top</em>{1} \mathbf{b}<em>1 &amp; \mathbf{a}^\top</em>{1}\mathbf{b}<em>2&amp; \cdots &amp; \mathbf{a}^\top</em>{1} \mathbf{b}<em>m \<br> \mathbf{a}^\top</em>{2}\mathbf{b}<em>1 &amp; \mathbf{a}^\top</em>{2} \mathbf{b}<em>2 &amp; \cdots &amp; \mathbf{a}^\top</em>{2} \mathbf{b}<em>m \<br> \vdots &amp; \vdots &amp; \ddots &amp;\vdots\<br>\mathbf{a}^\top</em>{n} \mathbf{b}<em>1 &amp; \mathbf{a}^\top</em>{n}\mathbf{b}<em>2&amp; \cdots&amp; \mathbf{a}^\top</em>{n} \mathbf{b}_m<br>\end{bmatrix}.<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B = torch.ones(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">torch.mm(A, B)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[ 6.,  6.,  6.],</span></span><br><span class="line"><span class="string">        [22., 22., 22.],</span></span><br><span class="line"><span class="string">        [38., 38., 38.],</span></span><br><span class="line"><span class="string">        [54., 54., 54.],</span></span><br><span class="line"><span class="string">        [70., 70., 70.]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h1><ul><li>范数（norm）表示一个向量有多大，这里考虑的<em>大小</em>（size）概念不涉及维度，而是分量的大小</li><li>在线性代数中，向量范数是将向量映射到标量的函数</li></ul><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul><li><p>性质1：如果我们按常数因子缩放向量的所有元素， 其范数也会按相同常数因子的<em>绝对值</em>缩放<br>$$<br>f(\alpha \mathbf{x}) &#x3D; |\alpha| f(\mathbf{x}).<br>$$</p></li><li><p>性质2：三角不等式<br>$$<br>f(\mathbf{x} + \mathbf{y}) \leq f(\mathbf{x}) + f(\mathbf{y}).<br>$$</p></li><li><p>性质3：范数必须是非负的<br>$$<br>f(\mathbf{x}) \geq 0.<br>$$</p></li><li><p>性质4：范数最小为0，当且仅当向量全由0组成<br>$$<br>\forall i, [\mathbf{x}]_i &#x3D; 0 \Leftrightarrow f(\mathbf{x})&#x3D;0.<br>$$</p></li></ul><h2 id="L-2-范数"><a href="#L-2-范数" class="headerlink" title="$L_2$ 范数"></a>$L_2$ 范数</h2><p><code>torch.norm(u)</code></p><p>假设$n$维向量$\mathbf{x}$中的元素是$x_1,\ldots,x_n$，其**$L_2$<em>范数</em>是向量元素平方和的平方根：**<br>$$<br>|\mathbf{x}|<em>2 &#x3D; \sqrt{\sum</em>{i&#x3D;1}^n x_i^2}<br>$$</p><ul><li>在$L_2$范数中常常省略下标$2$，也就是说$|\mathbf{x}|$等同于$|\mathbf{x}|_2$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u = torch.tensor([<span class="number">3.0</span>, -<span class="number">4.0</span>])</span><br><span class="line">torch.norm(u)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensot(5.)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="L-1-范数"><a href="#L-1-范数" class="headerlink" title="$L_1$范数"></a>$L_1$范数</h2><p><code>torch.abs(A).sum()</code></p><ul><li>深度学习中更经常地使用$L_2$范数的平方，也经常遇到$L_1$范数：</li></ul><p>$$<br>|\mathbf{x}|<em>1 &#x3D; \sum</em>{i&#x3D;1}^n \left|x_i \right|.<br>$$</p><ul><li>与$L_2$范数相比，$L_1$范数受异常值的影响较小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">torch.<span class="built_in">abs</span>(u).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor(7.)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="L-p-范数"><a href="#L-p-范数" class="headerlink" title="$L_p$范数"></a>$L_p$范数</h2><p>$L_2$范数和$L_1$范数都是更一般的$L_p$范数的特例<br>$$<br>|\mathbf{x}|<em>p &#x3D; \left(\sum</em>{i&#x3D;1}^n \left|x_i \right|^p \right)^{1&#x2F;p}.<br>$$</p><h2 id="Frobenius范数"><a href="#Frobenius范数" class="headerlink" title="Frobenius范数"></a><em>Frobenius</em>范数</h2><p><code>torch.norm(A)</code></p><p>类似于向量的$L_2$范数，<strong>矩阵</strong>$\mathbf{X} \in \mathbb{R}^{m \times n}$<strong>的<em>Frobenius范数</em>（Frobenius norm）是矩阵元素平方和的平方根：</strong><br>$$<br>|\mathbf{X}|<em>F &#x3D; \sqrt{\sum</em>{i&#x3D;1}^m \sum_{j&#x3D;1}^n x_{ij}^2}.<br>$$<br>Frobenius范数满足向量范数的所有性质，它就像是矩阵形向量的$L_2$范数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">torch.norm(torch.ones((<span class="number">4</span>, <span class="number">9</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor(6.)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="范数和目标"><a href="#范数和目标" class="headerlink" title="范数和目标"></a>范数和目标</h1><p><strong>目标，或许是深度学习算法最重要的组成部分（除了数据），通常被表达为范数</strong></p><p>在深度学习中，我们经常试图解决优化问题：</p><ul><li><em>最大化</em>分配给观测数据的概率</li><li><em>最小化</em>预测和真实观测之间的距离</li></ul><p>用向量表示物品（如单词、产品或新闻文章），以便最小化相似项目之间的距离，最大化不同项目之间的距离。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据操作（深度学习）</title>
      <link href="/2025/03/02/2025-3-2-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/02/2025-3-2-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>为了能够完成各种数据操作，我们需要某种方法来存储和操作数据。 </p><p>通常，我们需要做两件重要的事：</p><p>（1）获取、存储数据；</p><p>（2）将数据读入计算机后对其进行处理</p><h1 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h1><p>n维数组，也叫<strong>张量（tensor）</strong>。与Numpy的<code>ndarray</code>类似，但深度学习框架又比Numpy的<code>ndarray</code>多一些重要功能：</p><ol><li>GPU支持加速计算，而NumPy仅支持CPU计算</li><li>张量类支持自动微分</li></ol><h2 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h2><p>用 <code>arange</code> 创建一个行向量 <code>x</code>：包含以0开始的前12个整数，它们默认创建为整数。也可指定创建类型为浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="访问张量形状"><a href="#访问张量形状" class="headerlink" title="访问张量形状"></a>访问张量形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape</span><br></pre></td></tr></table></figure><h2 id="张量中元素总数"><a href="#张量中元素总数" class="headerlink" title="张量中元素总数"></a>张量中元素总数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.numel()</span><br></pre></td></tr></table></figure><h2 id="改变张量形状"><a href="#改变张量形状" class="headerlink" title="改变张量形状"></a>改变张量形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = x.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>可以以通过<code>-1</code>来调用此自动计算出维度的功能：</p><p><code>x.reshape(-1, 4)</code>或<code>x.reshape(3, -1)</code>来取代上面的代码</p><h2 id="初始化张量"><a href="#初始化张量" class="headerlink" title="初始化张量"></a>初始化张量</h2><p><strong>使用全0、全1、其他常量，或者从特定分布中随机采样的数字</strong></p><ul><li><p>全0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure></li><li><p>全1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure></li><li><p>均值为0、标准差为1的标准高斯分布（正态分布）中随机采样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>包含数值的Python列表（或嵌套列表)，为所需张量中的每个元素赋予确定值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.tensor([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="常见标准运算符"><a href="#常见标准运算符" class="headerlink" title="常见标准运算符"></a>常见标准运算符</h2><p><strong><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>和<code>**</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">x + y, x - y, x * y, x / y, x ** y  <span class="comment"># **运算符是求幂运算</span></span><br></pre></td></tr></table></figure><h2 id="求幂"><a href="#求幂" class="headerlink" title="求幂"></a>求幂</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.exp(x)</span><br></pre></td></tr></table></figure><h2 id="连结多个张量"><a href="#连结多个张量" class="headerlink" title="连结多个张量"></a>连结多个张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(Y)</span><br><span class="line">torch.cat((X, Y), dim=<span class="number">0</span>), torch.cat((X, Y), dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="用逻辑运算符构建二元张量"><a href="#用逻辑运算符构建二元张量" class="headerlink" title="用逻辑运算符构建二元张量"></a>用逻辑运算符构建二元张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(X == Y)</span><br></pre></td></tr></table></figure><h2 id="对所有元素求和"><a href="#对所有元素求和" class="headerlink" title="对所有元素求和"></a>对所有元素求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><h1 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h1><p><strong>即使形状不同，我们仍然可以通过调用 广播机制（broadcasting mechanism）来执行按元素操作</strong></p><ol><li>通过适当复制元素来扩展一个或两个数组，以便在转换之后，两个张量具有相同的形状</li><li>对生成的数组执行按元素操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br><span class="line"></span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><h1 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h1><ul><li>与任何Python数组一样：第一个元素的索引是0，最后一个元素索引是-1； 可以指定范围以包含第一个元素和最后一个之前的元素</li><li><strong>左闭右开</strong></li></ul><h2 id="选择最后一个元素"><a href="#选择最后一个元素" class="headerlink" title="选择最后一个元素"></a>选择最后一个元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="选择第二个和第三个元素"><a href="#选择第二个和第三个元素" class="headerlink" title="选择第二个和第三个元素"></a>选择第二个和第三个元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="通过指定索引来将元素写入矩阵"><a href="#通过指定索引来将元素写入矩阵" class="headerlink" title="通过指定索引来将元素写入矩阵"></a>通过指定索引来将元素写入矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><h2 id="为多个元素赋值相同的值"><a href="#为多个元素赋值相同的值" class="headerlink" title="为多个元素赋值相同的值"></a>为多个元素赋值相同的值</h2><p><code>[0:2, :]</code>：访问第1行和第2行，其中“:”代表沿轴1（列）的所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">0</span>:<span class="number">2</span>, :] = <span class="number">12</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure><h1 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h1><ul><li><strong>运行一些操作可能会导致为新结果分配内存</strong></li><li>Python的<code>id()</code>函数给我们提供了内存中引用对象的确切地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Y))</span><br><span class="line">before = <span class="built_in">id</span>(Y)</span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Y))</span><br><span class="line"><span class="built_in">id</span>(Y) == before </span><br><span class="line">// <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这可能是不可取的，原因有两个：</p><ol><li>首先，我们不想总是不必要地分配内存。在机器学习中，我们可能有数百兆的参数，并且在一秒内多次更新所有参数。通常情况下，我们希望原地执行这些更新；</li><li>如果不原地更新，其他引用仍然会指向旧的内存位置，这样我们的某些代码可能会无意中引用旧的参数。</li></ol><h2 id="执行原地操作"><a href="#执行原地操作" class="headerlink" title="执行原地操作"></a>执行原地操作</h2><h3 id="法一：创建一个新的矩阵Z"><a href="#法一：创建一个新的矩阵Z" class="headerlink" title="法一：创建一个新的矩阵Z"></a>法一：创建一个新的矩阵<code>Z</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z = torch.zeros_like(Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X + Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br></pre></td></tr></table></figure><h3 id="法二：自增自减"><a href="#法二：自增自减" class="headerlink" title="法二：自增自减"></a>法二：自增自减</h3><p>如果在后续计算中没有重复使用<code>X</code>， 我们也可以使用<code>X[:] = X + Y</code>或<code>X += Y</code>来减少操作的内存开销</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(X))</span><br><span class="line">before = <span class="built_in">id</span>(X)</span><br><span class="line">X += Y</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(X))</span><br><span class="line"><span class="built_in">id</span>(X) == before</span><br></pre></td></tr></table></figure><h1 id="转换为其他Python对象"><a href="#转换为其他Python对象" class="headerlink" title="转换为其他Python对象"></a>转换为其他Python对象</h1><h2 id="转换为NumPy张量"><a href="#转换为NumPy张量" class="headerlink" title="转换为NumPy张量"></a>转换为NumPy张量</h2><ul><li><p>将深度学习框架定义的张量[<strong>转换为NumPy张量（<code>ndarray</code>）</strong>]很容易，反之也同样容易</p></li><li><p>torch张量和numpy数组将共享它们的底层内存，就地操作更改一个张量也会同时更改另一个张量</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="built_in">print</span>(numpy.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"></span><br><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"><span class="built_in">type</span>(A), <span class="built_in">type</span>(B)</span><br></pre></td></tr></table></figure><h2 id="转换为Python标量"><a href="#转换为Python标量" class="headerlink" title="转换为Python标量"></a>转换为Python标量</h2><p>可以调用<code>item</code>函数或Python的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a, a.item(), <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>如果在jupyter notebook中发现numpy无法使用，可能是因为numpy和pytorch版本不兼容：</p><p>关闭jupyter notebook，在虚拟环境中执行以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy==<span class="number">1.26</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><ul><li>更改1.26.4为和你的pytorch兼容的版本</li><li>这条命令会卸载原有的numpy，降低版本安装numpy</li></ul><h2 id="查阅文档"><a href="#查阅文档" class="headerlink" title="查阅文档"></a>查阅文档</h2><p><strong>查找模块中的所有函数和类：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(torch.distributions))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;AbsTransform&#x27;, &#x27;AffineTransform&#x27;, &#x27;Bernoulli&#x27;, &#x27;Beta&#x27;, &#x27;Binomial&#x27;, &#x27;CatTransform&#x27;, &#x27;Categorical&#x27;, &#x27;Cauchy&#x27;, &#x27;Chi2&#x27;, &#x27;ComposeTransform&#x27;, &#x27;ContinuousBernoulli&#x27;, &#x27;CorrCholeskyTransform&#x27;, &#x27;CumulativeDistributionTransform&#x27;, &#x27;Dirichlet&#x27;, &#x27;Distribution&#x27;, &#x27;ExpTransform&#x27;, &#x27;Exponential&#x27;, &#x27;ExponentialFamily&#x27;, &#x27;FisherSnedecor&#x27;, &#x27;Gamma&#x27;, &#x27;Geometric&#x27;, &#x27;Gumbel&#x27;, &#x27;HalfCauchy&#x27;, &#x27;HalfNormal&#x27;, &#x27;Independent&#x27;, &#x27;IndependentTransform&#x27;, &#x27;Kumaraswamy&#x27;, &#x27;LKJCholesky&#x27;, &#x27;Laplace&#x27;, &#x27;LogNormal&#x27;, &#x27;LogisticNormal&#x27;, &#x27;LowRankMultivariateNormal&#x27;, &#x27;LowerCholeskyTransform&#x27;, &#x27;MixtureSameFamily&#x27;, &#x27;Multinomial&#x27;, &#x27;MultivariateNormal&#x27;, &#x27;NegativeBinomial&#x27;, &#x27;Normal&#x27;, &#x27;OneHotCategorical&#x27;, &#x27;OneHotCategoricalStraightThrough&#x27;, &#x27;Pareto&#x27;, &#x27;Poisson&#x27;, &#x27;PowerTransform&#x27;, &#x27;RelaxedBernoulli&#x27;, &#x27;RelaxedOneHotCategorical&#x27;, &#x27;ReshapeTransform&#x27;, &#x27;SigmoidTransform&#x27;, &#x27;SoftmaxTransform&#x27;, &#x27;SoftplusTransform&#x27;, &#x27;StackTransform&#x27;, &#x27;StickBreakingTransform&#x27;, &#x27;StudentT&#x27;, &#x27;TanhTransform&#x27;, &#x27;Transform&#x27;, &#x27;TransformedDistribution&#x27;, &#x27;Uniform&#x27;, &#x27;VonMises&#x27;, &#x27;Weibull&#x27;, &#x27;Wishart&#x27;, &#x27;__all__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__path__&#x27;, &#x27;__spec__&#x27;, &#x27;bernoulli&#x27;, &#x27;beta&#x27;, &#x27;biject_to&#x27;, &#x27;binomial&#x27;, &#x27;categorical&#x27;, &#x27;cauchy&#x27;, &#x27;chi2&#x27;, &#x27;constraint_registry&#x27;, &#x27;constraints&#x27;, &#x27;continuous_bernoulli&#x27;, &#x27;dirichlet&#x27;, &#x27;distribution&#x27;, &#x27;exp_family&#x27;, &#x27;exponential&#x27;, &#x27;fishersnedecor&#x27;, &#x27;gamma&#x27;, &#x27;geometric&#x27;, &#x27;gumbel&#x27;, &#x27;half_cauchy&#x27;, &#x27;half_normal&#x27;, &#x27;identity_transform&#x27;, &#x27;independent&#x27;, &#x27;kl&#x27;, &#x27;kl_divergence&#x27;, &#x27;kumaraswamy&#x27;, &#x27;laplace&#x27;, &#x27;lkj_cholesky&#x27;, &#x27;log_normal&#x27;, &#x27;logistic_normal&#x27;, &#x27;lowrank_multivariate_normal&#x27;, &#x27;mixture_same_family&#x27;, &#x27;multinomial&#x27;, &#x27;multivariate_normal&#x27;, &#x27;negative_binomial&#x27;, &#x27;normal&#x27;, &#x27;one_hot_categorical&#x27;, &#x27;pareto&#x27;, &#x27;poisson&#x27;, &#x27;register_kl&#x27;, &#x27;relaxed_bernoulli&#x27;, &#x27;relaxed_categorical&#x27;, &#x27;studentT&#x27;, &#x27;transform_to&#x27;, &#x27;transformed_distribution&#x27;, &#x27;transforms&#x27;, &#x27;uniform&#x27;, &#x27;utils&#x27;, &#x27;von_mises&#x27;, &#x27;weibull&#x27;, &#x27;wishart&#x27;]</span></span><br></pre></td></tr></table></figure><p>通常可以忽略以“<code>__</code>”（双下划线）开始和结束的函数，它们是Python中的特殊对象， 或以单个“<code>_</code>”（单下划线）开始的函数，它们通常是内部函数。根据剩余的函数名或属性名，我们可能会猜测这个模块提供了各种生成随机数的方法， 包括从均匀分布（<code>uniform</code>）、正态分布（<code>normal</code>）和多项分布（<code>multinomial</code>）中采样。</p><p><strong>查找特定函数和类的用法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(torch.ones)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Help on built-in function ones in module torch:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ones(...)</span></span><br><span class="line"><span class="string">    ones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -&gt; Tensor</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns a tensor filled with the scalar value `1`, with the shape defined</span></span><br><span class="line"><span class="string">    by the variable argument :attr:`size`.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        size (int...): a sequence of integers defining the shape of the output tensor.</span></span><br><span class="line"><span class="string">            Can be a variable number of arguments or a collection like a list or tuple.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Keyword arguments:</span></span><br><span class="line"><span class="string">        out (Tensor, optional): the output tensor.</span></span><br><span class="line"><span class="string">        dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.</span></span><br><span class="line"><span class="string">            Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).</span></span><br><span class="line"><span class="string">        layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.</span></span><br><span class="line"><span class="string">            Default: ``torch.strided``.</span></span><br><span class="line"><span class="string">        device (:class:`torch.device`, optional): the desired device of returned tensor.</span></span><br><span class="line"><span class="string">            Default: if ``None``, uses the current device for the default tensor type</span></span><br><span class="line"><span class="string">            (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU</span></span><br><span class="line"><span class="string">            for CPU tensor types and the current CUDA device for CUDA tensor types.</span></span><br><span class="line"><span class="string">        requires_grad (bool, optional): If autograd should record operations on the</span></span><br><span class="line"><span class="string">            returned tensor. Default: ``False``.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Example::</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; torch.ones(2, 3)</span></span><br><span class="line"><span class="string">        tensor([[ 1.,  1.,  1.],</span></span><br><span class="line"><span class="string">                [ 1.,  1.,  1.]])</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; torch.ones(5)</span></span><br><span class="line"><span class="string">        tensor([ 1.,  1.,  1.,  1.,  1.])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理（深度学习）</title>
      <link href="/2025/03/02/2025-3-2-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/2025/03/02/2025-3-2-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h1><h2 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h2><ul><li><strong>创建一个人工数据集，并存储在CSV（逗号分隔值）文件</strong><code>../data/house_tiny.csv</code>中</li><li><code>..</code> 表示当前文件所在目录的上一级目录</li><li>（因为我现在打开的jupyter notebook在<code>../chapter_prelliminaries</code>目录下，所以他会在<code>../data</code>目录创建一个<code>data</code>数据集）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRooms,Alley,Price\n&#x27;</span>)  <span class="comment"># 列名</span></span><br><span class="line">    f.write(<span class="string">&#x27;NA,Pave,127500\n&#x27;</span>)  <span class="comment"># 每行表示一个数据样本</span></span><br><span class="line">    f.write(<span class="string">&#x27;2,NA,106000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;4,NA,178100\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;NA,NA,140000\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h2><p><strong>从创建的CSV文件中加载原始数据</strong>，，我们导入<code>pandas</code>包并调用<code>read_csv</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    (tensor([[<span class="number">3.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">4.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">3.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>]], dtype=torch.float64),</span><br><span class="line">     tensor([<span class="number">127500</span>, <span class="number">178100</span>, <span class="number">140000</span>]))<span class="comment"># 如果没有安装pandas，只需取消对以下行的注释来安装pandas</span></span><br><span class="line"><span class="comment"># !pip install pandas</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(data_file, na_values=<span class="string">&quot;NA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>加载读取的<code>data</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   NumRooms Alley   Price</span><br><span class="line">0       NaN  Pave  127500</span><br><span class="line">1       2.0   NaN  106000</span><br><span class="line">2       4.0   NaN  178100</span><br><span class="line">3       NaN   NaN  140000</span><br></pre></td></tr></table></figure><h1 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><strong>插值法</strong>：用一个替代值弥补缺失值</li><li><strong>删除法</strong>：忽略缺失值</li></ol><h2 id="插值法"><a href="#插值法" class="headerlink" title="插值法"></a>插值法</h2><ul><li><p>通过位置索引<code>iloc</code>，我们将<code>data</code>分成<code>inputs</code>和<code>outputs</code>， 其中前者为<code>data</code>的前两列，而后者为<code>data</code>的最后一列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputs, outputs = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>], data.iloc[:, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// inputs的值</span><br><span class="line">    NumRooms Alley</span><br><span class="line"><span class="number">0</span>       NaN  Pave</span><br><span class="line"><span class="number">1</span>       <span class="number">2.0</span>   NaN</span><br><span class="line"><span class="number">2</span>       <span class="number">4.0</span>   NaN</span><br><span class="line"><span class="number">3</span>       NaN   NaN</span><br><span class="line"></span><br><span class="line">// inputs的类型</span><br><span class="line">NumRooms    float64</span><br><span class="line">Alley        <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line">// outputs的值   NumRooms  Alley_Pave  Alley_nan</span><br><span class="line"><span class="number">0</span>       <span class="number">3.0</span>         <span class="number">1.0</span>        <span class="number">0.0</span></span><br><span class="line"><span class="number">1</span>       <span class="number">2.0</span>         <span class="number">0.0</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>       <span class="number">4.0</span>         <span class="number">0.0</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>       <span class="number">3.0</span>         <span class="number">0.0</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">127500</span></span><br><span class="line"><span class="number">1</span>    <span class="number">106000</span></span><br><span class="line"><span class="number">2</span>    <span class="number">178100</span></span><br><span class="line"><span class="number">3</span>    <span class="number">140000</span></span><br><span class="line">Name: Price, dtype: int64</span><br><span class="line"></span><br><span class="line">// outputs的类型</span><br><span class="line">int64</span><br></pre></td></tr></table></figure></li><li><p>对于<code>inputs</code>中缺少的数值，我们用同一列的均值替换“NaN”项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs[<span class="string">&#x27;NumRooms&#x27;</span>] = inputs[<span class="string">&#x27;NumRooms&#x27;</span>].fillna(inputs[<span class="string">&#x27;NumRooms&#x27;</span>].mean())</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   NumRooms Alley</span><br><span class="line">0       3.0  Pave</span><br><span class="line">1       2.0   NaN</span><br><span class="line">2       4.0   NaN</span><br><span class="line">3       3.0   NaN</span><br></pre></td></tr></table></figure></li><li><p>[<strong>对于<code>inputs</code>中的类别值或离散值，我们将“NaN”视为一个类别。</strong>] 由于“巷子类型”（“Alley”）列只接受两种类型的类别值“Pave”和“NaN”， <code>pandas</code>可以自动将此列转换为两列“Alley_Pave”和“Alley_nan”。 类型为“Pave”的行会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。 缺少类型的行会将“Alley_Pave”和“Alley_nan”分别设置为0和1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = pd.get_dummies(inputs, dummy_na=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   NumRooms  Alley_Pave  Alley_nan</span><br><span class="line">0       3.0        True      False</span><br><span class="line">1       2.0       False       True</span><br><span class="line">2       4.0       False       True</span><br><span class="line">3       3.0       False       True</span><br></pre></td></tr></table></figure></li></ul><h1 id="转换为张量格式"><a href="#转换为张量格式" class="headerlink" title="转换为张量格式"></a>转换为张量格式</h1><ul><li><p><strong>现在<code>inputs</code>和<code>outputs</code>中的所有条目都是数值类型，它们可以转换为张量格式。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class="line">X, y</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(tensor([[3., 1., 0.],</span><br><span class="line">         [2., 0., 1.],</span><br><span class="line">         [4., 0., 1.],</span><br><span class="line">         [3., 0., 1.]], dtype=torch.float64),</span><br><span class="line"> tensor([127500, 106000, 178100, 140000]))</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong></p><p>如果这一部报错，有可能是<code>inputs.values</code>无法把布尔值直接当作浮点数处理（大多数机器学习的情况下是可以直接转化的），你需要先把inputs中的布尔值转化为浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = inputs.astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   NumRooms  Alley_Pave  Alley_nan</span><br><span class="line">0       3.0         1.0        0.0</span><br><span class="line">1       2.0         0.0        1.0</span><br><span class="line">2       4.0         0.0        1.0</span><br><span class="line">3       3.0         0.0        1.0</span><br></pre></td></tr></table></figure><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="删除法"><a href="#删除法" class="headerlink" title="删除法"></a>删除法</h2><h3 id="读取数据集-1"><a href="#读取数据集-1" class="headerlink" title="读取数据集"></a>读取数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny2.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRooms,Alley,Price\n&#x27;</span>)  <span class="comment"># 列名</span></span><br><span class="line">    f.write(<span class="string">&#x27;3,Pave,127500\n&#x27;</span>)  <span class="comment"># 每行表示一个数据样本</span></span><br><span class="line">    f.write(<span class="string">&#x27;2,NA,106000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;4,wood,178100\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;3,granite,140000\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>加载数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   NumRooms    Alley   Price</span><br><span class="line">0         3     Pave  127500</span><br><span class="line">1         2      NaN  106000</span><br><span class="line">2         4     wood  178100</span><br><span class="line">3         3  granite  140000</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li>用 <code>pandas</code> 的 <code>dropna()</code> 方法来删除包含 <code>NA</code> 或缺失值的行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = data.dropna()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//     NumRooms    Alley   Price</span><br><span class="line">    0         3     Pave  127500</span><br><span class="line">    2         4     wood  178100</span><br><span class="line">    3         3  granite  140000</span><br></pre></td></tr></table></figure><h3 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputs, outputs = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>], data.iloc[:, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//     NumRooms    Alley</span><br><span class="line">    0         3     Pave</span><br><span class="line">    2         4     wood</span><br><span class="line">    3         3  granite</span><br><span class="line">    0    127500</span><br><span class="line">    2    178100</span><br><span class="line">    3    140000</span><br><span class="line">    Name: Price, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = pd.get_dummies(inputs, dummy_na=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//     NumRooms  Alley_Pave  Alley_granite  Alley_wood  Alley_nan</span><br><span class="line">    0         3        True          False       False      False</span><br><span class="line">    2         4       False          False        True      False</span><br><span class="line">    3         3       False           True       False      False</span><br></pre></td></tr></table></figure><h3 id="转换为张量格式-1"><a href="#转换为张量格式-1" class="headerlink" title="转换为张量格式"></a>转换为张量格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs = inputs.astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class="line">X, y</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//  (tensor([[3., 1., 0., 0., 0.],</span><br><span class="line">             [4., 0., 0., 1., 0.],</span><br><span class="line">             [3., 0., 1., 0., 0.]], dtype=torch.float64),</span><br><span class="line">     tensor([127500, 178100, 140000]))</span><br></pre></td></tr></table></figure><h1 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h1><h2 id="torch-arange"><a href="#torch-arange" class="headerlink" title="torch.arange()"></a>torch.arange()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.arange(start=<span class="number">0</span>, end, step=<span class="number">1</span>, *, out=<span class="literal">None</span>, dtype=<span class="literal">None</span>, layout=torch.strided, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>) → Tensor</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：起始值（默认0）</li><li><code>end</code>：结束值</li><li><code>step</code>：相邻点之间的间隙</li><li><code>dtype</code>：返回的tensor所需数据类型</li><li><code>requires_grad</code>：指定返回tensor需不需要梯度（默认False）</li></ul><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h2 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs()"></a>os.makedirs()</h2><ul><li><p><code>os.makedirs()</code> 方法用于递归创建多层目录。</p></li><li><p>如果子目录创建失败或者已经存在，会抛出一个 OSError 的异常</p></li><li><p>如果第一个参数 path 只有一级，即只创建一层目录，则与 <a href="https://www.runoob.com/python3/python3-os-mkdir.html">mkdir()</a> 函数相同。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(path, mode=<span class="number">511</span>, exist_ok=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>path</code> ：需要递归创建的目录，可以是相对或者绝对路径（在path上直接写要创建的文件名）</p></li><li><p><code>exist_ok</code>：是否在目录存在时触发异常</p><p><code>False</code>：（默认值），则在目标目录已存在的情况下触发 FileExistsError 异常</p><p><code>True</code>：在目标目录已存在的情况下不会触发 FileExistsError 异常</p></li></ul><h2 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h2><p>连接两个或更多的路径名组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.join(path, *paths)</span><br></pre></td></tr></table></figure><ol><li>如果有一个组件是一个绝对路径，则在它之前的所有组件均会被舍弃</li><li>如果各组件名首字母不包含<code>\</code>，则函数会自动加上</li><li>如果最后一个组件为空，则生成的路径以一个<code>\</code>分隔符结尾</li></ol><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open()"></a>with open()</h2><p>用来打开本地文件，他会在使用完毕后，自动关闭文件，相对<code>open()</code>省去了写<code>close()</code>的麻烦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">&quot;file_path&quot;</span>,mode=<span class="string">&quot;r/w/a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read/write()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>mode：<ol><li><code>r</code>：只读（默认）</li><li><code>w</code>：只写（会清除之前写的内容）</li><li><code>a</code>：追加内容（会在已经写的内容基础上追加新的内容）</li></ol></li><li>encoding：系统默认（不用管）</li></ul><h2 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h2><p><code>write()</code>方法用于向文件中写入指定字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.write( [ <span class="built_in">str</span> ])</span><br></pre></td></tr></table></figure><h1 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h1><p><strong>逗号分隔值</strong>（Comma-Separated Values，CSV），其文件以纯文本形式存储表格数据（数字和文本），文件的每一行都是一个数据记录。每个记录由一个或多个字段组成，用逗号分隔。</p><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="iloc"><a href="#iloc" class="headerlink" title="iloc[]"></a>iloc[]</h2><p>基于整数位置的索引，用于按位置选择</p><h2 id="fillna"><a href="#fillna" class="headerlink" title="fillna()"></a>fillna()</h2><p>用指定的方法填充NA&#x2F;NaN值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.fillna(value=<span class="literal">None</span>, *, method=<span class="literal">None</span>, axis=<span class="literal">None</span>, inplace=<span class="literal">False</span>, limit=<span class="literal">None</span>, downcast=&lt;no_default&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>value</code>：用于填充的空值的值</li></ul><h2 id="get-dummies"><a href="#get-dummies" class="headerlink" title="get_dummies()"></a>get_dummies()</h2><h3 id="one-hot-独热编码"><a href="#one-hot-独热编码" class="headerlink" title="one-hot 独热编码"></a>one-hot 独热编码</h3><p>将离散型特征的每一种特征取值都看成一种状态，若指定离散特征中有N个不相同的取值，那么我们就可以将该特征抽象成N种不同的状态，one-hot编码保证了每一个取值只会使得一种状态处于“激活态”，也就是说这N种状态中只有一个状态位值为1，其他状态位都是0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.get_dummies(data, prefix=<span class="literal">None</span>, prefix_sep=<span class="string">&#x27;_&#x27;</span>, dummy_na=<span class="literal">False</span>, columns=<span class="literal">None</span>, sparse=<span class="literal">False</span>, drop_first=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>data</code>：输入的数据</li><li><code>dummy_na</code>：增加一列表示空缺值，如果False就忽略空缺值（默认false）</li></ul><h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="astype"><a href="#astype" class="headerlink" title="astype()"></a>astype()</h2><p>用于执行类型转换操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">series.astype(dtype, copy=<span class="literal">True</span>, errors=<span class="string">&#x27;raise&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>dtype</code>：表示要转换的目标数据类型</p></li><li><p><code>copy</code>：</p><ol><li><code>True</code>：（默认）表示创建数据的副本</li><li><code>False</code>：可能会修改原始数据</li></ol></li><li><p><code>errors</code>：</p><ol><li><p><code>raise</code>（默认）在转换过程中遇到错误抛出异常</p></li><li><p><code>ignore</code> 忽略错误</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识JavaScript</title>
      <link href="/2025/03/02/2025-3-2-%E5%88%9D%E8%AF%86JavaScript/"/>
      <url>/2025/03/02/2025-3-2-%E5%88%9D%E8%AF%86JavaScript/</url>
      
        <content type="html"><![CDATA[<p><em>一个合格的后端开发者，必须要精通JavaScript</em></p><p><em>学会查W3School参考书</em></p><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p><strong>外部导入：</strong><code>&lt;head&gt;</code> 或 <code>&lt;body</code> 中导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内部导入：</strong> 任意位置引入（一般在 <code>&lt;body&gt;</code> 底部）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="浏览器开发者工具"><a href="#浏览器开发者工具" class="headerlink" title="浏览器开发者工具"></a>浏览器开发者工具</h1><p>推荐一篇博客：<a href="https://zhuanlan.zhihu.com/p/231865779">F12 - 开发者工具详解</a></p><p>按 <code>F12</code> 或者右键点击检查（审查元素&#x2F;开发者模式）</p><p><img src="/../img/screenshot/devtools.png" alt="devtools"></p><p><strong>元素（Elements）：</strong></p><ul><li>查看网页页面的所有元素，修改元素的代码与属性。用于查看修改元素的属性、CSS 属性、监听事件以及断点等等</li></ul><p><strong>控制台（Console）：</strong></p><ul><li>查看JS对象及其属性</li><li>执行JS语句</li><li>查看控制台日志</li></ul><p><strong>源代码（Sources）：</strong></p><ul><li>查看文件</li><li>断点调试</li></ul><p><strong>网络（Network）</strong></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><strong>区分大小写</strong></p><p><strong>严格模式：</strong><code>&quot;use strict&quot;;</code></p><p><strong>声明变量：</strong><code>var</code>、<code>let</code>、<code>const</code></p><ul><li><p>var：</p><ul><li>弱类型（可存放不同类型的值）</li><li>全局变量</li><li>可重复声明</li></ul></li><li><p>let：</p><ul><li>局部变量</li><li>不能重复定义</li></ul></li><li><p>const：</p><ul><li>定义原始类型：常量，不能改变（int，string，boolean）</li><li>定义对象：可以改变对象属性，不能改变对象的引用（数组…）</li></ul></li></ul><p><strong>注释：</strong></p><ol><li>单行：<code>//</code></li><li>多行：<code>/* */</code></li></ol><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li><code>window.alert()</code>：浏览器显示框输出</li><li><code>document.write()</code>：写入HTML输出</li><li><code>console.log()</code>：写入浏览器控制台</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>除了比较运算符，其他和Java一样</p><p><strong>比较运算符：</strong></p><ol><li><code>=</code>：赋值</li><li><code>==</code>：等于，会进行<strong>类型转换</strong>（类型不一样，值一样即为true）</li><li><code>===</code>：绝对等于（类型一样，值一样才为true）</li></ol><p>注意：</p><ul><li><code>==</code> 是JS的缺陷，不要用 <code>==</code> 比较</li><li>NaN与所有数值都不相等，包括自己：<code>NaN==NaN -&gt; false</code></li><li>只能通过<code>isNaN(Nan)</code>判断这个数是否是NaN</li></ul><p><strong>类型转换：</strong></p><ol><li>字符串转换为数字：从前到后转换，遇到非数字转为 <code>NaN</code>，后面都舍弃</li><li>其他类型转换为boolean：<ul><li>number：0和NaN为false，其他为true</li><li>String：空字符串为false，其他为true</li><li>null和undefined：false</li></ul></li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>原始数据类型：</strong></p><ol><li>数值型（Number）</li><li>字符串型（String）</li><li>布尔型（Boolean）</li><li>undefined型（Undefined）</li><li>null型（Null）</li></ol><p><strong>引用类型：</strong></p><ol><li>上5种之外的类型都称为Object</li></ol><p>**typeof：**获取数据类型</p><ul><li><code>typeof null</code>：object</li></ul><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p><strong>不区分小数和整数</strong></p><ul><li><code>NaN</code>：not a number</li><li><code>Infinity</code>：正无穷</li><li><code>-Infinity</code>：负无穷</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>创建：</strong>（定义后无法改变）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abs&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abs&#x27;</span>;</span><br></pre></td></tr></table></figure><p>**访问：**索引</p><p><strong>长度：</strong><code>.length</code></p><p><strong>返回指定位置字符：</strong><code>charAt()</code></p><p><strong>检索字符：</strong><code>.indexOf()</code> （第一次出现的位置）</p><p><strong>除去字符串两边空格：</strong><code>trim()</code> 返回新字符串</p><p><strong>提取字符串中两个索引间的字符：</strong><code>substring()</code> （左闭右开）</p><p><strong>转义：</strong></p><ul><li><code>\n</code>：换行</li><li><code>\t</code>：Tab</li></ul><p><strong>模板字符串：</strong></p><ul><li>允许多行字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text =</span><br><span class="line"><span class="string">`The quick</span></span><br><span class="line"><span class="string">brown fox</span></span><br><span class="line"><span class="string">jumps over</span></span><br><span class="line"><span class="string">the lazy dog`</span>;</span><br></pre></td></tr></table></figure><ul><li>变量替换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&quot;Doe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">`Welcome <span class="subst">$&#123;firstName&#125;</span>, <span class="subst">$&#123;lastName&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure><p><strong>转换成大写：</strong><code>name.toUpperCase()</code></p><p><strong>转换成小写：</strong><code>name.toLowerCase()</code></p><p><strong>提取字符串：</strong><code>slice()</code> （左闭右开）</p><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p><code>true</code> 或 <code>false</code></p><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><ul><li>未定义</li><li>undefined 类型只有一个值，即特殊的 undefined</li><li>在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined</li></ul><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul><li>空</li><li>null 类型只有一个值，即特殊的 null</li><li>undefined值实际上是由null值衍生出来的，所以如果比较undefined和null是否相等，会返回true</li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…</p></li><li><p>JavaScript 允许自定义对象</p></li><li><p>JavaScript中<strong>所有的键都是字符串，值是任意对象</strong></p></li></ul><p><strong>创建：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;             <span class="comment">// 简化</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;runn&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">firstName</span> = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><strong>访问：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = person.<span class="property">age</span>;</span><br><span class="line"><span class="keyword">let</span> age = person[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;firstname&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = person[x];</span><br></pre></td></tr></table></figure><p><strong>添加：</strong><code>person.nationality = &quot;English&quot;;</code></p><p><strong>删除：</strong><code>delete person.age;</code> 或 <code>delete person[&quot;age&quot;];</code></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>**创建：**可以包含任意的数据类型（字符串，数字，对象，函数，其他数组），<strong>长度可变</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;csdiy&quot;</span>];</span><br></pre></td></tr></table></figure><p>**访问：**索引</p><p><strong>长度：</strong><code>.length</code></p><p><strong>遍历：</strong></p><ol><li>for 循环：遍历所有元素</li><li>forEach：遍历有值的元素</li></ol><p><strong>转换为字符串：</strong><code>toString()</code></p><p><strong>拼接元素：</strong><code>join()</code> （类似 toString，可指定分隔符）</p><p><strong>添加到尾部：</strong><code>push()</code></p><p><strong>在头部添加元素：</strong><code>unshift()</code></p><p><strong>删除第一个元素：</strong><code>shift()</code></p><p><strong>删除最后一个元素：</strong><code>pop()</code></p><p><strong>删除：</strong><code>splice(start, ..)</code> 从start索引开始，删除<code>..</code>个</p><p><strong>排序：</strong><code>sort()</code>（字符串 Unicode 顺序）</p><p><strong>反转数组：</strong><code>toReversed()</code> 会返回一个新数组，原数组不更改</p><p><strong>查询：</strong><code>.indexOf()</code> （某元素第一次出现的位置）</p><p><strong>切片：</strong><code>slice()</code> （左闭右开，数组一部分切成新数组）</p><p><strong>合并：</strong><code>concat()</code>（合并现有数组，返回一个新数组（不修改原数组））</p><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><p>见上文“数据类型”</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>键值对（字典）</p><p>**创建：**把 Array 传递给 <code>new Map()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;apples&quot;</span>, <span class="number">500</span>],</span><br><span class="line">  [<span class="string">&quot;bananas&quot;</span>, <span class="number">300</span>],</span><br><span class="line">  [<span class="string">&quot;oranges&quot;</span>, <span class="number">200</span>]</span><br></pre></td></tr></table></figure><p><strong>访问：</strong><code>get()</code></p><p><strong>添加：</strong><code>set()</code></p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>无序不重复的集合</p><p>**创建：**把 Array 传递给 <code>new Set()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> letters = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]);</span><br></pre></td></tr></table></figure><p><strong>添加：</strong><code>add()</code></p><p><strong>删除：</strong><code>delete()</code></p><p>**forEach()：**为每个 Set 元素调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">letters.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p><strong>创建：</strong><code>new Date()</code></p><p><strong>访问：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getFullYear()</code></td><td>年：yyyy</td></tr><tr><td><code>getMonth()</code></td><td>月：0-11</td></tr><tr><td><code>getDate()</code></td><td>日期：1-31</td></tr><tr><td><code>getDay()</code></td><td>星期：0（周日）- 6（周六）</td></tr><tr><td><code>getHours()</code></td><td>小时：0-23</td></tr><tr><td><code>getMinutes()</code></td><td>分钟：0-59</td></tr><tr><td><code>getSeconds()</code></td><td>秒：0-59</td></tr><tr><td><code>getTime()</code></td><td>时间戳： 1970 年 1 月 1 日 00:00:00 UTC 以来的毫秒数</td></tr></tbody></table><p><strong>转换：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">now = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1741259990855</span>); <span class="comment">// 时间戳转换为时间</span></span><br><span class="line"><span class="comment">// Thu Mar 06 2025 19:19:50 GMT+0800 (中国标准时间)</span></span><br><span class="line">now.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line"><span class="comment">// &#x27;2025/3/6&#x27;</span></span><br><span class="line">now.<span class="title function_">toLocaleString</span>()</span><br><span class="line"><span class="comment">// &#x27;2025/3/6 19:19:50&#x27;</span></span><br><span class="line">now.<span class="title function_">toGMTString</span>()</span><br><span class="line"><span class="comment">// &#x27;Thu, 06 Mar 2025 11:19:50 GMT&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p><strong>条件：</strong></p><ul><li>if</li><li>if else</li><li>switch</li></ul><p><strong>循环：</strong></p><ul><li><p>for</p></li><li><p>for in：访问 Object 的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">fname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">in</span> person) &#123;</span><br><span class="line">  text += person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forEach：为每个数组元素调用一次函数（回调函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">let</span> txt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">numbers.<span class="title function_">forEach</span>(myFunction);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  txt += value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for of：循环遍历可迭代对象的值（Arrays、Strings、Maps、NodeLists）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> language = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> language) &#123;</span><br><span class="line">text += x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while</p></li><li><p>do while</p></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>定义：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数：按值传递，改变不反映到全局，不需要指定参数类型</li><li>对象、数组：改变对函数外部可见</li><li>不需要写返回值类型</li></ul><p>**匿名函数：**存储在变量中，该变量可以当作函数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;<span class="keyword">return</span> a + b&#125;;</span><br></pre></td></tr></table></figure><p><strong>箭头函数：</strong><code>(...) =&gt; &#123;...&#125;</code> （删除函数名，类似Java中的lamda函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    consol.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>给箭头函数起名：<code>var xxx = (...) =&gt; &#123;...&#125;</code></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>JavaScript可以传递任意一个参数，也可以不传递参数</p><ul><li>参数多：按顺序接受参数，后面的不接受</li><li>参数少：缺的设置为undefined</li></ul><p>**Rest 参数：**允许函数将不确定数量的参数视为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) sum += arg;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">100</span>, <span class="number">66</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code> 表示当前对象的一个引用，根据其使用方式引用<strong>不同的对象</strong>：</p><ul><li><strong>对象方法</strong>：this 表示该方法所属的对象。</li><li><strong>单独使用</strong>：this 表示全局对象。</li><li><strong>函数</strong>：this 表示全局对象。</li><li><strong>函数</strong>：在严格模式下，this 是未定义的(undefined)。</li><li><strong>事件</strong>：this 表示接收事件的元素。</li><li>类似 <code>call()</code> 和 <code>apply()</code> 方法可以将 this 引用到任何对象。</li></ul><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ul><li>调用以对象作为参数的方法</li><li>可以接受参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params">city, country</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&quot;,&quot;</span> + city + <span class="string">&quot;,&quot;</span> + country;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person.<span class="property">fullName</span>.<span class="title function_">call</span>(person1, <span class="string">&quot;Oslo&quot;</span>, <span class="string">&quot;Norway&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><ul><li>类似call</li><li>接受数组中的参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="keyword">function</span>(<span class="params">city, country</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&quot;,&quot;</span> + city + <span class="string">&quot;,&quot;</span> + country;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">fullName</span>.<span class="title function_">apply</span>(person1, [<span class="string">&quot;Oslo&quot;</span>, <span class="string">&quot;Norway&quot;</span>]);</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation：JavaScript对象标记法</p><p>JSON 是一种用于存储和传输数据的格式，与语言无关</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>数据：键值对 <code>key: value</code>，由 <code>,</code> 分隔</p><ul><li><p>数字：整数或浮点数</p></li><li><p>字符串：双引号</p></li><li><p>数组：<code>[]</code></p></li><li><p>对象：<code>&#123;&#125;</code></p></li><li><p>布尔值：<code>true</code> 或 <code>false</code></p></li><li><p>null</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;zerd1y&quot;, &quot;age&quot;:18, &quot;address&quot;:[&quot;Beijing&quot;, &quot;Shanghai&quot;]&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><ul><li>JavaScript 转换为JSON：<code>JSON.stringify()</code></li><li>JSON 转换为JavaScript：<code>JSON.parse()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Xiao Jinghuai&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">major</span>: <span class="string">&quot;software engineering&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user);</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;name&quot;:&quot;Xiao Jinghuai&quot;,&quot;age&quot;:18,&quot;major&quot;:&quot;software engineering&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> jsObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;Xiao Jinghuai&quot;,&quot;age&quot;:18,&quot;major&quot;:&quot;software engineering&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#123;name: &#x27;Xiao Jinghuai&#x27;, age: 18, major: &#x27;software engineering&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, eye</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = first;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = last;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eyeColor</span> = eye;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>所有 JavaScript 对象都从原型继承属性和方法</p><ul><li><p><code>Date</code> 对象继承自 <code>Date.prototype</code></p></li><li><p><code>Array</code> 对象继承自 <code>Array.prototype</code></p></li></ul><p><code>Object.prototype</code> 位于 prototype 继承链的顶部</p><p>**_proto_：**每个 JavaScript 对象（除了 null）都拥有一个隐藏的属性 <strong>proto</strong>，它指向该对象的原型对象</p><p>**prototype：**所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法</p><ol><li><p>向构造函数添加新属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, eyecolor</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = first;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = last;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eyeColor</span> = eyecolor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">nationality</span> = <span class="string">&quot;English&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>向构造函数添加新方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, eyecolor</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = first;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = last;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eyeColor</span> = eyecolor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">nationality</span> = <span class="string">&quot;English&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>class、constructor 均为 ES6 引入（继承、构造函数）</li></ul><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">carname</span> = brand;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">present</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I have a &#x27;</span> + <span class="variable language_">this</span>.<span class="property">carname</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, mod</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(brand);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">present</span>() + <span class="string">&#x27;, it is a &#x27;</span> + <span class="variable language_">this</span>.<span class="property">model</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCar = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mustang&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = myCar.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><p>引用父类的构造函数并访问父级的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Xiao</span> = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Xiao&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> zerd1y = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zerd1y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">newStudent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, grade</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">myGrade</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Grade one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）</p><p>通过DOM，可访问HTML 文档的所有元素</p><h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><p><strong>获取元素：</strong></p><ul><li>通过 id ：<code>document.getElementById(&#39;h1&#39;)</code>（返回单个对象）</li><li>通过标签名：<code>document.getElementsByTagName(&#39;h1&#39;)</code>（返回对象数组）</li><li>通过类名：<code>document.getElementsByClassName(&#39;p2&#39;)</code>（返回对象数组）</li><li>通过 name：<code>document.getElementsByName(&#39;hobby&#39;)</code>（返回对象数组）</li></ul><p><strong>更改：</strong></p><ul><li>更改 HTML ：<code>element.innerHTML = new html content</code> </li><li>更改HTML属性：<code>element.attribute = new value</code></li><li>更改css：<code>element.style.property = new style</code></li></ul><p><strong>添加：</strong></p><ul><li><strong>创建元素：</strong><code>document.createElement(element)</code></li><li><strong>添加元素到尾部：</strong><code>document.appendChild(element)</code></li></ul><p><strong>删除：</strong></p><ul><li><strong>删除子节点元素：</strong><code>document.removeChild(element)</code>（先获取父节点，再通过父节点删除子节点，删除多个节点，children的序号时刻更新）</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p><strong>输入验证：</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>disabled</code></td><td>输入元素被禁用后无法输入或交互</td></tr><tr><td><code>max</code></td><td>指定输入元素的最大值（适用于数字和日期等类型）</td></tr><tr><td><code>min</code></td><td>指定输入元素的最小值（适用于数字和日期等类型）</td></tr><tr><td><code>pattern</code></td><td>指定输入值必须匹配的正则表达式模式（适用于 <code>text</code>、<code>tel</code>、<code>email</code> 等类型）</td></tr><tr><td><code>required</code></td><td>该输入字段为必填项</td></tr><tr><td><code>type</code></td><td>指定输入元素的类型，例如 <code>text</code>、<code>number</code>、<code>email</code>、<code>password</code> 等</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=<span class="string">&quot;myForm&quot;</span> action=<span class="string">&quot;/action_page.php&quot;</span> onsubmit=<span class="string">&quot;return validateForm()&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"><span class="title class_">Name</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">function validateForm() &#123;</span></span><br><span class="line"><span class="language-xml">  let x = document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;</span></span><br><span class="line"><span class="language-xml">  if (x == &quot;&quot;) &#123;</span></span><br><span class="line"><span class="language-xml">    alert(&quot;Name must be filled out&quot;);</span></span><br><span class="line"><span class="language-xml">    return false;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><em>BOM 使 JavaScript 有能力与浏览器”对话”，JS把浏览器的各个组成部分封装为对象</em></p><p>BOM（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>浏览器窗口对象：所有全局 JavaScript 对象、函数和变量都自动成为 window 对象的成员</p><p><strong>警告框：</strong><code>alert()</code></p><p><strong>对话框：</strong><code>confirm()</code>（带有一段消息以及确认、取消按钮）返回 true、false</p><p><strong>周期调用函数、表达式：</strong><code>setInterval(function() &#123;...&#125;, time)</code></p><p><strong>指定毫秒数后调用一次函数：</strong><code>setTimeout(function() &#123;...&#125;, time)</code></p><p><strong>窗口内容区域高度：</strong><code>window.innerHeight</code></p><p><strong>窗口内容区域宽度：</strong><code>window.innerWidth</code></p><p><strong>窗口外侧高度：</strong><code>window.outerHeight</code></p><p><strong>窗口外侧宽度：</strong><code>window.outerWidth</code></p><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>屏幕对象</p><p><strong>屏幕宽度：</strong><code>screen.width</code></p><p><strong>屏幕高度：</strong><code>screen.height</code></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>地址栏对象：<code>window.location</code> 对象可获取当前页面地址 （URL） 并将浏览器重定向到新页面</p><p><strong>URL（href）：</strong><code>location.href</code></p><p><strong>域名：</strong><code>location.host</code></p><p><strong>Web协议：</strong><code>location.protocol</code></p><p><strong>刷新：</strong><code>location.reload()</code></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>浏览器对象</p><p>window.navigator 对象包含有关访问者浏览器的信息</p><p><strong>浏览器应用程序名：</strong><code>navigator.appName</code></p><p><strong>浏览器版本：</strong><code>navigator.appVersion</code></p><p><strong>浏览器平台：</strong><code>navigator.platform</code></p><p>大多数情况下不会使用：</p><ul><li>navigator 数据可被浏览器使用者更改</li><li>一些浏览器对测试站点会识别错误</li><li>浏览器无法报告晚于浏览器发布的新操作系统</li></ul><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>历史记录对象</p><p><code>window.history</code> 对象包含浏览器历史记录</p><p><strong>后退：</strong><code>history.back()</code></p><p><strong>前进：</strong><code>history.forward()</code></p><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p><strong>通过HTML标签的属性：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;on()&quot;</span> value=<span class="string">&quot;按钮1&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;on!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>通过DOM元素属性：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;按钮2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;on!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>onclick</code></td><td>鼠标单击事件</td></tr><tr><td><code>onblur</code></td><td>元素失去焦点</td></tr><tr><td><code>onfocus</code></td><td>元素获得焦点</td></tr><tr><td><code>onload</code></td><td>某个页面或图像被完成加载</td></tr><tr><td><code>onsubmit</code></td><td>当表单提交时触发该事件</td></tr><tr><td><code>onkeydown</code></td><td>某个键盘的键被按下</td></tr><tr><td><code>onmouseover</code></td><td>鼠标被移到某元素之上</td></tr><tr><td><code>onmouseout</code></td><td>鼠标从某元素移开</td></tr></tbody></table><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>JavaScript 库：处理浏览器不兼容问题并简化 HTML DOM作、事件处理、动画和 Ajax</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>下载jQuery库：<a href="https://jquery.com/">jQuery</a></p><p><strong>在要使用 jQuery 的页面引入.js文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;jquery-3.7.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>路径替换为你的下载路径</p></li><li><p>CDN导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从谷歌CDN服务器上导入jQuery库，将其添加到HTML页面中</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">action</span>()</span><br></pre></td></tr></table></figure><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素（<strong>和CSS选择器一样</strong>）</li><li>jQuery 的 action() 执行对元素的操作</li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><strong>css可用的，jQuery都可用</strong></p><ul><li><code>$(&quot;p&quot;)</code>：元素选择器</li><li><code>$(&quot;#test&quot;)</code>：id选择器</li><li><code>$(&quot;.test&quot;)</code>：class选择器</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>获取文本：</strong><code>myText = $(&quot;#02&quot;).text();</code></p><p><strong>设置文本：</strong><code>myElement.text(&quot;Hello Sweden!&quot;);</code></p><p><strong>获取HTML：</strong><code>content = myElement.html();</code></p><p><strong>设置HTML：</strong><code>myElement.html(&quot;&lt;p&gt;Hello World&lt;/p&gt;&quot;);</code></p><p><strong>设置css：</strong></p><ul><li><code>$(&quot;#demo&quot;).css(&quot;font-size&quot;,&quot;35px&quot;);</code></li><li><code>css(&#123;&quot;propertyname&quot;:&quot;value&quot;,&quot;propertyname&quot;:&quot;value&quot;,...&#125;);</code></li></ul><p><strong>隐藏：</strong><code>myElement.hide();</code></p><p><strong>显示：</strong><code>myElement.show();</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook</title>
      <link href="/2025/02/28/2025-2-28-jupyter-notebook/"/>
      <url>/2025/02/28/2025-2-28-jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Jupyter Notebook 是一个<strong>交互式计算环境</strong>，使用户能够编写笔记本文档，其中包括：- 实时代码 - 交互式小组件 - 绘图 - 叙述性文本 - 方程式 - 图像 - 视频  </p><p>官方文档：<a href="https://jupyter-notebook.readthedocs.io/en/stable/">官方文档</a></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>编程时具有**「语法高亮」**、缩进、tab补全的功能</li><li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果</li><li>以富媒体格式展示计算结果（HTML、MarkDown、LaTex、PNG，SVG）</li></ul><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><ul><li>默认情况下， <code>http://127.0.0.1:8888</code></li><li>之后在Jupyter Notebook的所有操作，都请保持终端**「不要关闭」**,否则会断开与本地服务器的连接。</li></ul><h1 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h1><p><em><strong>Dashboard：</strong></em></p><p><img src="/../img/screenshot/jupyter_notebook_user_interface.png" alt="user_interface"></p><ul><li>notebook名称（Notebook name）：<strong>单击可重命名</strong></li><li>菜单栏（Menu bar）</li><li>工具栏（Toolbar）</li><li>代码框（Code cell）</li></ul><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ol><li>代码单元格（Code）</li><li>markdown单元格（MarkDown）</li><li>原始单元格（Raw）</li></ol><p><strong>执行：</strong></p><p><code>Shift-Enter</code>（或Toolbar上的Run键）</p><h2 id="代码单元格"><a href="#代码单元格" class="headerlink" title="代码单元格"></a>代码单元格</h2><ul><li>可编写代码，语法高亮显示和 Tab 键完成功能。编程语言取决于<em>内核</em>，默认内核 （IPython） 运行 Python 代码。</li><li>输出不仅限于文本，还有许多其他可能的输出形式，包括 <code>matplotlib</code> 图形和 HTML 表格</li><li><code>Shift-Enter</code>：运行代码单元格</li><li><code>Alt-Enter</code> ：运行当前单元格，在下方插入新单元格</li><li><code>Ctrl-Enter</code> 运行当前单元格，进入命令模式</li></ul><h2 id="MarkDown单元格"><a href="#MarkDown单元格" class="headerlink" title="MarkDown单元格"></a>MarkDown单元格</h2><ul><li>MarkDown语法（详见之前博客）</li><li>LaTeX 表示法</li></ul><h2 id="原始单元格"><a href="#原始单元格" class="headerlink" title="原始单元格"></a>原始单元格</h2><p>写入 <em>output</em> 的位置</p><h1 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="/../img/screenshot/jupyter_notebook_create.png" alt="create_notebook"></p><ul><li>单击<code>New</code>，从下拉列表选择一个内核。列出的内核取决于服务器上安装的内容</li><li>正在运行的notebook旁边会显示绿色</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><img src="/../img/screenshot/jupyter_notebook_delete.png" alt="jupyter_notebook_delete"></p><ul><li>要下载、删除、复制或重命名笔记本，选中它旁边的复选框，一组控件将出现在笔记本列表的顶部</li></ul><h2 id="查看正在运行的notebook"><a href="#查看正在运行的notebook" class="headerlink" title="查看正在运行的notebook"></a>查看正在运行的notebook</h2><ul><li>单击“Running选项卡</li></ul><p><img src="/../img/screenshot/jupyter_notebook_check.png" alt="jupyter_notebook_check"></p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><ol><li>编辑模式</li><li>命令模式</li></ol><h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><ul><li>按 <code>Enter</code> 键（用鼠标单击单元格的编辑器区域），进入编辑模式</li><li>可以在单元格中键入内容（用快捷键）</li></ul><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><ul><li>按 <code>Esc</code> 键（用鼠标在单元格的编辑器区域<em>外部</em>单击），进入命令模式</li><li>可编辑整个笔记本，但不能在单个单元格中键入内容</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li><p>中断耗时过长的计算：</p><p><code>Kernel</code>-&gt;<code>Interrupt</code>（Menu bar）或 <code>i,i</code> 快捷键</p></li><li><p>重启整个计算过程：</p><p><code>Kernel</code>-&gt;<code>Restart</code>（Menu bar）或 <code>0,0</code>  快捷键</p></li><li><p>把notebook下载为 <code>.ipynb</code> 文件：</p><p><code>File</code>-&gt;<code>Download as</code>（Menu bar）</p></li></ul><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><code>Ctrl+F</code>：高级内置搜索插件，用于在笔记本或其他文档中查找文本</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置深度学习环境</title>
      <link href="/2025/02/26/2025-2-26-Linux%E9%85%8D%E7%BD%AE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/02/26/2025-2-26-Linux%E9%85%8D%E7%BD%AE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>要了我老命，几乎半天时间都消耗在这了呜呜</p><p>推荐教程：</p><ul><li><p><a href="https://blog.csdn.net/Zosea231/article/details/138549683?fromshare=blogdetail&sharetype=blogdetail&sharerId=138549683&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">在移动硬盘上搭建Ubuntu24.04深度学，习环境（Anaconda + CUDA + Pytorch）</a></p></li><li><p>ChatGPT（绝境下的神中神，我差点淘宝付费找人远程了）</p></li></ul><h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><ul><li>天选5pro，Windows11系统，双系统安装了Ubuntu24.04 LTS</li><li>独立显卡：<strong>NVIDIA GeForce RTX 4060 Max-Q &#x2F; Mobile</strong></li></ul><h1 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h1><p>之前的Blog发布过，就不写啦，可以到我之前的Blog看看</p><h1 id="Miniconda安装"><a href="#Miniconda安装" class="headerlink" title="Miniconda安装"></a>Miniconda安装</h1><p>同上哈哈哈</p><h1 id="显卡驱动安装"><a href="#显卡驱动安装" class="headerlink" title="显卡驱动安装"></a>显卡驱动安装</h1><h2 id="开始前的开始"><a href="#开始前的开始" class="headerlink" title="开始前的开始"></a>开始前的开始</h2><p><strong>重启进入bios，关闭secure boot</strong>：</p><p>把密钥全部删除，关闭安全启动（天选5pro）</p><p><strong>由于我是双系统，这步一定要做！！！网上的博客教程都不会写是因为他们的计算机就是linux，我失败了无数次才发现最开始有个巨坑</strong></p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="安装所需依赖："><a href="#安装所需依赖：" class="headerlink" title="安装所需依赖："></a>安装所需依赖：</h3><p><code>sudo apt-get update</code></p><p><code>sudo apt-get install g++ gcc make</code></p><h3 id="禁用nouveau："><a href="#禁用nouveau：" class="headerlink" title="禁用nouveau："></a>禁用nouveau：</h3><ol><li><p>打开文件夹：</p><p><code>sudo gedit /etc/modprobe.d/blacklist.conf</code></p><p>gedit用不了的话直接装一个</p></li><li><p>在末尾添加并保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure></li><li><p>改完要更新系统镜像文件:</p><p><code>sudo update-initramfs -u</code></p></li><li><p>重启ubuntu：</p><p><code>sudo reboot</code></p></li><li><p>验证禁用nouveau：</p><p><code>lsmod | grep nouveau</code> 如果没有输出就说明禁用了nouveau</p></li></ol><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><h3 id="查看推荐版本"><a href="#查看推荐版本" class="headerlink" title="查看推荐版本"></a>查看推荐版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>找到后面标有<code>recommand</code>的版本，记住这个版本号</p><ul><li>我显示的是<code>driver   : nvidia-driver-560 - third-party non-free recommended</code></li><li>尽量按照推荐版本安装，版本不高不要强求，不兼容下载过来也用不了</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nvidia-driver-560</span><br></pre></td></tr></table></figure><ul><li>记住把上面代码的560改称你自己系统推荐的版本</li><li>过程比较慢，期间我上了节高数课</li></ul><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure><h3 id="验证驱动是否正确安装"><a href="#验证驱动是否正确安装" class="headerlink" title="验证驱动是否正确安装"></a>验证驱动是否正确安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>这会显示你显卡的相关信息</p><h1 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h1><h2 id="找到和你的显卡驱动匹配的cuda版本"><a href="#找到和你的显卡驱动匹配的cuda版本" class="headerlink" title="找到和你的显卡驱动匹配的cuda版本"></a>找到和你的显卡驱动匹配的cuda版本</h2><ul><li>很重要！！一定要匹配，不然折腾半天到最后会报错！！</li><li>可以搜博客（搜“cuda和显卡驱动版本对应”）也可以看官网：<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">版本对应情况</a></li></ul><h2 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h2><ul><li><p>到官网找对应版本下载即可：<a href="https://developer.nvidia.com/cuda-toolkit-archive">nvidia_cuda官网下载</a></p></li><li><p>按你的计算机版本走：</p><p><img src="/../img/screenshot/cuda_12.6.png" alt="cuda下载"></p></li><li><p>把下面两行代码依次复制到终端运行，开始安装</p></li></ul><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>**安装过程中注意取消勾选Driver选项，以避免重复安装显卡驱动导致安装失败，**取消勾选后的界面如下图所示：</p><p><img src="/../img/screenshot/cuda_download.png" alt="取消勾选Driver项"></p><h2 id="cuda配置"><a href="#cuda配置" class="headerlink" title="cuda配置"></a>cuda配置</h2><p>打开环境变量配置文件：<code>gedit ~/.bashrc</code></p><p>添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-12.6/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>激活环境变量<code>source ~/.bashrc</code></p><h2 id="检查cuda是否安装正确"><a href="#检查cuda是否安装正确" class="headerlink" title="检查cuda是否安装正确"></a>检查cuda是否安装正确</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/cuda_terminal.png" alt="检查cuda安装成功"></p><p>出现以上结果即为安装成功</p><h1 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h1><h2 id="找到和你的cuda匹配的cudnn版本"><a href="#找到和你的cuda匹配的cudnn版本" class="headerlink" title="找到和你的cuda匹配的cudnn版本"></a>找到和你的cuda匹配的cudnn版本</h2><ul><li>是的，cudnn也要和cuda版本对应</li><li>官网可查找：<a href="https://developer.nvidia.com/rdp/cudnn-archive">官网</a></li></ul><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><p>官网找到就可以直接点击进去安装了</p><p><img src="/../img/screenshot/cudnn_download.png" alt="cudn_download"></p><h2 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h2><p>下载完成后，进入下载目录，进行以下操作：</p><ol><li><p>提取cuDNN文件：<code>tar -xf xxx.tar.xz</code></p><p>注意：<strong>xxx.tar.xz改为你的包名，还有等下的cuda版本号</strong></p></li><li><p>依次执行以下指令，将提取后的文件复制到cuda目录下，<strong>cuda版本不一样的注意修改路径</strong>：</p><p><code>sudo cp xxx/include/* /usr/local/cuda-12.6/include</code></p><p><code>sudo cp xxx/lib/libcudnn* /usr/local/cuda-12.6/lib64</code></p><p><strong>（注意改版本号）</strong></p></li></ol><h2 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h2><p><code>sudo chmod 777 /usr/local/cuda-12.6/include/cudnn.h</code></p><p><code>sudo chmod 777 /usr/local/cuda-12.6/lib64/libcudnn*</code></p><p><strong>（注意改版本号）</strong></p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>终端输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/local/cuda-12.6/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure><p><strong>（注意改版本号）</strong></p><p><img src="/../img/screenshot/cudnn_terminal.png" alt="验证cudnn安装"></p><p>出现以上结果即为安装成功</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>到这里安装就大功告成啦，感觉比较累，但很有成就感</p><p>如果你想再验证一下是否安装成功的话：</p><h2 id="nvidia显卡驱动"><a href="#nvidia显卡驱动" class="headerlink" title="nvidia显卡驱动"></a>nvidia显卡驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>会显示 GPU 的使用情况</p><h2 id="CUDA和cuDNN"><a href="#CUDA和cuDNN" class="headerlink" title="CUDA和cuDNN"></a>CUDA和cuDNN</h2><p>cuda可用python验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line"><span class="built_in">print</span>(torch.backends.cudnn.enabled)</span><br></pre></td></tr></table></figure><ul><li><p>这个是<strong>已经用conda创造了虚拟环境，并且安装了pytorch的情况下的验证方法</strong></p></li><li><p>返回<code>True</code>，说明 PyTorch 检测到了 GPU</p></li><li><p>返回 <code>True</code> ，说明 cuDNN 被启用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda环境</title>
      <link href="/2025/02/26/2025-2-26-conda%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/02/26/2025-2-26-conda%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>conda 中的环境是独立的隔离空间，您可以在其中安装特定版本的软件包，包括依赖项、库和 Python 版本。这种隔离有助于避免包版本之间的冲突，并确保您的项目具有所需的确切库和工具。</p><p>入门文档：<a href="https://docs.anaconda.com/working-with-conda/environments/#create-env">入门文档</a></p><p>更多细节：<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">更多细节</a></p><h1 id="为什么要创建新环境"><a href="#为什么要创建新环境" class="headerlink" title="为什么要创建新环境"></a>为什么要创建新环境</h1><ul><li>依赖项隔离</li><li>可重现性</li><li>易于管理</li><li>测试、开发</li></ul><h1 id="为什么我们不应该在基本环境中工作"><a href="#为什么我们不应该在基本环境中工作" class="headerlink" title="为什么我们不应该在基本环境中工作"></a>为什么我们不应该在基本环境中工作</h1><h2 id="base环境"><a href="#base环境" class="headerlink" title="base环境"></a>base环境</h2><p>首次安装和使用 conda 时，您可能会看到对称为 <code>base</code> 或 “base environment” 的引用。此环境是安装 conda 本身的位置，只能用于安装 anaconda、conda 和与 conda 相关的软件包，例如 <code>anaconda-client</code> 或 <code>conda-build</code>。</p><h2 id="新环境"><a href="#新环境" class="headerlink" title="新环境"></a>新环境</h2><p>但是，对于您的项目，Anaconda <em>强烈建议</em>创建新的工作环境。这可以保护您的基本环境不会因复杂的依赖关系冲突而中断，并允许您在其他计算机上轻松管理和重现您的环境。</p><h1 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h1><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><p>打开终端，以下命令创建一个新环境并下载指定的包及其依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name &lt;ENV_NAME&gt; &lt;PACKAGE&gt;=&lt;VERSION&gt;</span><br></pre></td></tr></table></figure><p>example：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name myenv python=3.11 beautifulsoup4 docutils jinja2=3.1.4 wheel</span><br></pre></td></tr></table></figure><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;ENV_NAME&gt;</span><br></pre></td></tr></table></figure><h2 id="在环境之间切换"><a href="#在环境之间切换" class="headerlink" title="在环境之间切换"></a>在环境之间切换</h2><p>当您准备好在项目之间切换时，只需激活另一个项目的环境即可。激活其他环境将停用您当前的环境。</p><ul><li><p>（可选）通过运行以下命令查看所有环境的列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure></li><li><p>切换环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;ENV_NAME&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="锁定环境"><a href="#锁定环境" class="headerlink" title="锁定环境"></a>锁定环境</h1><p>确保您的项目无限期地保持可重现性的最可靠方法是 “锁定”  其环境。锁定环境会创建一个完全指定的环境，该环境包含项目中使用的所有包及其依赖项，这些包都配置为特定版本。这可确保您的项目将完全按照最初的配置进行复制，因为如果发布了新的包依赖项，则永远不会发生意外的更新或更改。</p><ol><li><p>锁定项目需要在要锁定的环境中安装 <code>conda-project</code> 包。通过运行以下命令安装软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;ENV&gt;</span><br><span class="line">conda install conda-project</span><br></pre></td></tr></table></figure></li><li><p>如果您的项目不包含 <code>environment.yml</code> 文件，请运行以下命令创建一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda-project init</span><br></pre></td></tr></table></figure></li><li><p>锁定环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda-project lock</span><br></pre></td></tr></table></figure></li></ol><p>锁定项目会生成一个 <code>conda-lock.default.yml</code> 文件，您可以导出该文件以与他人<strong>共享</strong>。</p><h1 id="共享环境"><a href="#共享环境" class="headerlink" title="共享环境"></a>共享环境</h1><p>与其他人共享您的环境允许他们使用 conda 在其计算机上<a href="https://docs.anaconda.com/working-with-conda/environments/#create-env">重新创建您的环境</a>。</p><p>要共享环境及其软件包，您必须将环境的配置导出到 <code>.yml</code> 文件中。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>简单地将 Anaconda 或 Miniconda 文件复制到新目录或其他计算机不会重新创建环境。您必须将环境作为一个整体导出。</li><li>如果当前目录中已有环境配置<code>.yml</code>文件，则在导出过程中将覆盖该文件。</li></ol><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>激活要导出的环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;ENV_NAME&gt;</span><br></pre></td></tr></table></figure></li><li><p>导出环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; environment.yml</span><br></pre></td></tr></table></figure></li></ol><h1 id="停用环境"><a href="#停用环境" class="headerlink" title="停用环境"></a>停用环境</h1><p>最佳做法是在完成环境中的工作后停用环境。</p><p>停用环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h1 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h1><p>终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name &lt;ENV_NAME&gt; --all</span><br></pre></td></tr></table></figure><p>验证是否已经删除环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Miniconda</title>
      <link href="/2025/02/25/2025-2-25-%E5%AE%89%E8%A3%85Miniconda/"/>
      <url>/2025/02/25/2025-2-25-%E5%AE%89%E8%A3%85Miniconda/</url>
      
        <content type="html"><![CDATA[<p><em><strong>前置条件：</strong></em></p><p>Linux x86系统：ubuntu24.04 </p><p>所以以下安装过程均是用Linux terminal代码</p><h1 id="下载最新版本的Miniconda"><a href="#下载最新版本的Miniconda" class="headerlink" title="下载最新版本的Miniconda"></a>下载最新版本的Miniconda</h1><p><code>ctrl + alt + T</code>打开Terminal终端，输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><ul><li>你也可以下载其他版本的Miniconda：<a href="https://repo.anaconda.com/miniconda/">下载其他版本</a></li></ul><p>下载完后应该有一个名字为<code>Miniconda3-latest-Linux-x86_64.sh</code>的文件在你的主文件夹里（我是<code>/home/zerd1y</code>）</p><h1 id="（可选）验证安装程序的完整性"><a href="#（可选）验证安装程序的完整性" class="headerlink" title="（可选）验证安装程序的完整性"></a>（可选）验证安装程序的完整性</h1><h2 id="生成SHA-256哈希值"><a href="#生成SHA-256哈希值" class="headerlink" title="生成SHA-256哈希值"></a>生成SHA-256哈希值</h2><p>把终端导航到下载文件的目录，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sha256sum</span> &lt;FILE_NAME&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha256sum Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>然后会生成SHA-256哈希值</p><h2 id="比较哈希值"><a href="#比较哈希值" class="headerlink" title="比较哈希值"></a>比较哈希值</h2><ul><li>查找安装程序的官方 SHA-256 哈希值：<a href="">官方SHA-256哈希值</a><a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a></li><li>如果匹配，则程序可以安全使用</li></ul><h1 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装Miniconda</h1><ol><li>终端运行以下命令，启动安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ~/Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><ol start="2"><li><p>不断往下滚动阅读TOS条款，划到最下方输入<code>Yes</code>，然后继续按<code>ENTER</code>（接受默认位置，此处你可以自己修改安装位置），开始安装</p></li><li><p>初始化选项，默认<code>NO</code>：<code>conda</code>不会修改你的shell脚本，安装后，如果要初始化，则<strong>必须手动进行初始化</strong></p><p>（我比较喜欢这样，这样子不会每次打开终端都被 conda 干扰，有其他 Python 版本要也方便些）</p></li></ol><h2 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h2><p>终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;PATH_TO_CONDA&gt;/bin/activate</span><br><span class="line">conda init --all</span><br></pre></td></tr></table></figure><h1 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h1><ul><li><p>关闭终端，重新打开，使安装完全生效</p></li><li><p>或者使用以下命令刷新终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><p>在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><p>检查conda是否正常工作呀</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>安装到这里就已经圆满结束啦（感觉ubuntu自带的输入法好难用，有机会换一个）</p><p>目前你的conda状态是<strong>已激活</strong>了，但是打开终端不会自动进入conda虚拟环境：</p><ul><li><p>终端可以用<code>conda</code>命令</p></li><li><p>进入conda的base环境需要在终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识CSS</title>
      <link href="/2025/02/23/2025-2-23-%E5%88%9D%E8%AF%86CSS/"/>
      <url>/2025/02/23/2025-2-23-%E5%88%9D%E8%AF%86CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS（Cascading Style Sheets，层叠样式表）</p><p>描述了 HTML 元素在屏幕、纸张或其他媒体上的显示方式</p><p>vscode：安装live Server插件</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p>存在多个样式，就近原则（覆盖原则）</p><h2 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h2><p>创建 <code>.css</code> 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h2><p><code>&lt;head&gt;</code> 内创建 <code>&lt;style&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: linen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: maroon;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h2><p>不推荐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;text-align:center;&quot;</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><p>优先级：id &gt; class &gt; 标签</p><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#para1 &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.center &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>选择页面上的所有 HTML 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>指定元素内部的所有符合条件的后代元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div p &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><ul><li>选择指定元素的直接子元素</li><li>注意：<ol><li>对html文件内所有指定元素生效</li><li>子元素：指定元素的直接下一级，不可跳一级或多级，如果没有则不选中</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li &gt; p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><ul><li>选择与指定元素在同一层级且紧接在它后面的元素</li><li>注意：<ol><li>同一层级</li><li>紧接在后面的<strong>1个</strong>兄弟元素，如果没有则不选中</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h2 + p &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择同一层级、紧跟在<code>&lt;h2&gt;</code>后面的<strong>一个</strong><code>&lt;p&gt;</code>元素</p><h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><ul><li>选择与指定元素在同一层级的所有后续兄弟元素</li><li>注意：<ol><li>同一层级</li><li>后面的所有兄弟元素，如果没有则补不选中</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h2 ~ p &#123;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择同一层级、在<code>&lt;h2&gt;</code>后面的所有兄弟元素</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[target=&quot;_blank&quot;] &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>=</code>：等于</li><li><code>*=</code>：子串（不必是一个完整的单词）</li><li><code>^=</code>：以…开头（不必是一个完整的单词）</li><li><code>$=</code>：以…结尾（不必是一个完整的单词）</li><li><code>~=</code>：包含（需要包含一个完整单词，单词之间由空格分隔）</li><li><code>|=</code>：指定值（必须是一个完整的单词，要么单独，要么后跟 <code>-</code> ）</li></ul><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类用于定义元素的特殊状态：</p><ul><li>当用户将鼠标移到元素上</li><li>已访问和未访问的链接</li><li>当元素获得焦点时</li></ul><h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><ul><li><code>:hover</code>：鼠标停留在元素上的状态</li><li><code>:active</code>：鼠标按住未释放的状态（元素激活的状态）</li><li><code>:link</code>：超链接未访问的状态</li><li><code>:visited</code>：超链接访问过的状态</li></ul><h3 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h3><ul><li><code>:first-child</code> 选择父元素的第一个子元素</li><li><code>:last-child</code>选择父元素的最后一个子元素</li><li><code>:nth-child(n)</code>选择父元素的第n个子元素</li><li><code>:nth-of-type(n)</code>选择父元素下相同类型元素的第n个子元素</li></ul><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p><code>color</code></p><p><strong>rgb：</strong><code>rgb(red,green,blue)</code></p><p><strong>rgba：</strong><code>rgb(red,green,blue,alpha)</code></p><p><strong>十六进制：</strong><code>#000000</code>（黑）</p><p><strong>名称：</strong><code>red</code></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>颜色：</strong><code>color</code></p><p><strong>字体系列：</strong><code>font-family</code> （设置多个，浏览器不支持可用后一种字体）</p><p><strong>字体样式：</strong><code>font-style</code></p><ol><li><code>normal</code>：正常</li><li><code>italic</code>：斜体</li></ol><p><strong>字体大小：</strong><code>font-size</code>  默认大小为 16px （16px&#x3D;1em）</p><ol><li><code>px</code>：像素</li><li><code>em</code>：1em&#x3D;16px</li></ol><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p><strong>颜色：</strong><code>color</code></p><p><strong>背景颜色：</strong><code>background-color</code></p><p><strong>对齐方式：</strong><code>text-align</code></p><ol><li><code>centre</code>：居中</li><li><code>right</code>&#x2F;<code>left</code>：向右&#x2F;左对齐</li><li><code>justify</code>：左、右外边距对齐（每行宽度相等）</li></ol><p><strong>修饰：</strong><code>text-decoration</code></p><ol><li><code>none</code>：主要用于删除链接的下划线</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：中划线</li><li><code>underline</code>：下划线（不建议强调指出不是链接的文本，因为这常常混淆用户）</li></ol><p><strong>缩进：</strong><code>text-indent</code></p><ol><li><code>px</code></li><li><code>em</code>：常用（2em）</li></ol><p><strong>行高：</strong><code>line-height</code>  </p><p>行高和块高一致，可以让文字上下居中（<code>line-height=height</code>）</p><p><strong>文本阴影：</strong><code>text-shadow: h-shadow v-shadow blur color;</code></p><ol><li>h-shadow：水平阴影（必选）</li><li>v-shadow：垂直阴影（必选）</li><li>blur：阴影距离（可选）</li><li>color：阴影颜色（可选）</li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>列表类型：</strong><code>list-style</code></p><ol><li><code>none</code>：去掉圆点</li><li><code>circle</code>：空心圆</li><li><code>decimal</code>：数字</li><li><code>square</code>：正方形</li></ol><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><strong>背景颜色：</strong><code>background-color</code> （可设置渐变色）</p><p><strong>背景图片：</strong><code>background-image</code> 默认：平铺重复显示，以覆盖整个元素实体</p><p><strong>背景重复：</strong><code>background-repeat</code></p><ol><li><code>no-repeat</code>：不平铺</li><li><code>repeat-x</code>：水平方向平铺</li><li><code>repeat-y</code>：竖直方向平铺</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    background-image: url(../img/LofiSu1.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不透明度"><a href="#不透明度" class="headerlink" title="不透明度"></a>不透明度</h2><p><code>opacity:</code>（0.0~1.0）</p><ul><li>完全不透明：<code>opacity: 1;</code></li><li>半透明：<code>opacity: 0.5;</code></li><li>完全透明：<code>opacity: 0;</code></li></ul><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>直接调用现成css：<a href="https://www.grabient.com/">grabient</a></p><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p><img src="/../img/screenshot/box_model.png" alt="盒子模型"></p><ul><li><p><code>margin</code>：外边距-清除边框外的区域，外边距是透明的</p><p>（body总有一个默认的外边距，可设置为0）</p></li><li><p><code>border</code>：边框-围绕在内边距和内容外的边框</p></li><li><p><code>padding</code>：内边距- 清除内容周围的区域，内边距是透明的</p></li><li><p><code>content</code>：内容-盒子的内容，显示文本和图像</p></li></ul><h2 id="宽度-高度"><a href="#宽度-高度" class="headerlink" title="宽度 高度"></a>宽度 高度</h2><p>当你指定一个 CSS 元素的宽度和高度属性时，你<strong>只是设置内容区域的宽度和高度</strong></p><p>完整大小的元素，你还<strong>必须添加内边距，边框和外边距</strong></p><blockquote><p>margin+border+padding+content</p></blockquote><p>总元素的宽度&#x3D;宽度+左填充+右填充+左边框+右边框+左边距+右边距</p><p>总元素的高度&#x3D;高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p><strong>边框样式：</strong><code>border-style</code></p><ol><li><code>none</code>：不显示边框</li><li><code>solid</code>：实线</li><li><code>dashed</code>：短的方形虚线</li></ol><p><strong>边框宽度：</strong><code>border-width</code></p><ul><li><code>thin</code>、<code>medium</code> 或 <code>thick</code>；<code>px</code>、<code>em</code></li></ul><p><strong>边框颜色：</strong><code>border-color</code></p><p><strong>单条边：</strong><code>border-top</code>、<code>border-right</code>、<code>border-bottom</code>、<code>border-left</code></p><ul><li>（上，右，下，左）、（上，左右，下）、（上下，左右）</li></ul><p><strong>圆角边框：</strong><code>border-radius</code></p><ul><li>顺序：左上，右上，右下，左下</li><li>圆圈：圆角 &#x3D; 半径</li></ul><p><strong>阴影：</strong><code>box-shadow: h-shadow v-shadow blur color</code></p><ul><li>h-shadow：水平阴影</li><li>v-shadow：竖直阴影</li><li>blur：阴影距离</li><li>color：颜色</li></ul><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>blog：<a href="https://blog.csdn.net/qq_36595013/article/details/81810219?fromshare=blogdetail&sharetype=blogdetail&sharerId=81810219&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">(图文详细)最通俗易懂的CSS 浮动float属性详解</a></p><h2 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h2><p><strong>文档流</strong>指的是元素排版布局过程中，元素会默认自动从左往右，从上往下的<strong>流式排列方式</strong>。并最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素。</p><p><img src="/../img/screenshot/document_stream.png" alt="文档流"></p><p><strong>块级元素：</strong></p><ul><li><strong>独占一行</strong>，不能与其他任何元素并列</li><li>能接受宽、高</li><li>如果不设置宽度，那么宽度将默认变为父亲的100%，即和父亲一样宽</li></ul><p><strong>内联元素：</strong></p><ul><li><strong>与其他元素并排</strong></li><li>不能设置宽、高。默认的宽度就是文字的宽度</li></ul><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p><code>diplay:</code></p><ul><li><code>none</code>：不显示</li><li><code>block</code>：块元素（此元素前后带有换行符）</li><li><code>inline</code>：行内元素</li><li><code>inline-block</code>：行内块元素</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>将元素从其正常文档流中移出，并使其向左或向右浮动的布局方式。</p><p><strong>浮动：</strong><code>float</code></p><ul><li><code>left</code>：向左浮动，周围内容环绕其右侧</li><li><code>right</code>：向右浮动，周围内容环绕其左侧</li><li><code>inherit</code>：继承父元素的 <code>float</code> 属性值</li></ul><p><strong>清除浮动：</strong><code>clear:</code></p><ul><li><code>left</code>：元素左侧不允许有浮动元素</li><li><code>right</code>：元素右侧不允许有浮动元素</li><li><code>both</code>：元素两侧不允许有浮动元素</li></ul><h2 id="父级边框塌陷"><a href="#父级边框塌陷" class="headerlink" title="父级边框塌陷"></a>父级边框塌陷</h2><p>父容器无法包含浮动子元素，导致高度塌陷</p><p><img src="/../img/screenshot/border_collapse.png" alt="border_collapse"></p><p><strong>1.增加父级元素高度：</strong>（不推荐）高度需要多次尝试，不能从本质上解决问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1000px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/add_height.png" alt="add_height"></p><p>**2.增加一个空的div标签，清除浮动：**有效，但造成代码冗余</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/add_empty_element.png" alt="add_empty_element"></p><p>**3.overflow：**在有下拉菜单的场景，下拉菜单会显示不出来，而且很丑。</p><ul><li><code>scroll</code>：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容</li><li><code>hidden</code>：内容会被修剪，并且其余内容不可见</li><li><code>auto</code>：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/css_overflow.png" alt="overflow"></p><p><strong>3.父类增加伪类 after：</strong>（推荐）没有任何副作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../img/screenshot/css_after.png" alt="after"></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><strong>相对定位：</strong><code>position: relative;</code></p><ul><li>相对原来位置，进行偏移（<code>top:</code>、<code>right:</code>、<code>bottom:</code>、<code>left:</code>）</li><li>仍在标准文档流中，原来的位置保留</li></ul><p><strong>绝对定位：</strong> <code>position: absolute;</code></p><ul><li>相对最近的存在定位的父级元素偏移（<code>top:</code>、<code>right:</code>、<code>bottom:</code>、<code>left:</code>）</li><li>如果没有，则相对浏览器窗口偏移</li><li>不在标准文档流中，原来位置不会被保留</li></ul><p><strong>固定定位：</strong><code>position: fixed;</code></p><ul><li>相对浏览器窗口定位（<code>top:</code>、<code>right:</code>、<code>bottom:</code>、<code>left:</code>）</li><li>屏幕滚动时元素不改变位置</li><li>不在标准文档流中，原来位置不会被保留</li></ul><p><strong>静态定位：</strong><code>position: static;</code>（默认）</p><p><strong>z-index：</strong><code>z-index</code> 设置元素的堆叠顺序，拥有更高顺序的元素会处于上层</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识HTML</title>
      <link href="/2025/02/21/2025-2-21-%E5%88%9D%E8%AF%86HTML/"/>
      <url>/2025/02/21/2025-2-21-%E5%88%9D%E8%AF%86HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>Hyper Text Markup Language（超文本标记语言）<em>是一种用于创建网页的标准标记语言。您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</em></p></li><li><p>目前网页常用：HTML5</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><strong>vscode 插件：</strong></p><p>Chinese、Code Spell Support、Javascript (ES6) code snippets、Mithril Emmet、Path Intellisense、vue3-snippets-for-vscode、VueHelper、Auto Close Tag、Auto Rename Tag、JS-Beautify for VS Code、open in browser、Vetur、IntelliJ IDEA Keybindings</p><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><p><img src="/../img/screenshot/html_basic_structure.jpg" alt="HTML基本结构"></p><ul><li><code>&lt;!DOCTYPE html&gt;</code>声明为 HTML5 文档</li><li><code>&lt;html&gt;</code>元素是 HTML 页面的根元素</li><li><code>&lt;head&gt;</code>元素包含了文档的元（meta）数据，如 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>定义网页编码格式为 <strong>utf-8</strong>。</li><li><code>&lt;title&gt;</code>元素描述了文档的标题</li><li><code>&lt;body&gt;</code>元素包含了可见的页面内容</li><li><code>&lt;h1&gt;</code>元素定义一个大标题</li><li><code>&lt;p&gt;</code>元素定义一个段落</li></ul><h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><ul><li>源代码：<strong><code>ctrl+U</code></strong> 或 右键“查看页面源代码”</li><li>元素：右键单击一个元素（或空白区域）-&gt; “检查”，可在打开的 Elements 或 Styles 面板中动态编辑 HTML 或 CSS（ <strong><code>F12</code></strong> ）</li></ul><p>**下载：**Google插件：Save All Resources</p><ol><li>右键“检查”（或者F12）</li><li>在顶部的框中找到ResourcesSaver（Elements，Console，Sources右边下拉框里面）</li><li>点击Save All Resources</li></ol><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p><code>&lt;p&gt; &lt;/p&gt;</code></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><code>&lt;br/&gt;</code></p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p><code>&lt;hr/&gt;</code></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>快捷键：<code>ctrl+/</code></p><p><code>&lt;!-- comment --&gt;</code></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;b&gt;</code></td><td>粗体（加粗）</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>粗体（重要）</td></tr><tr><td><code>&lt;i&gt;</code></td><td>斜体（不同语气）</td></tr><tr><td><code>&lt;em&gt;</code></td><td>斜体（强调）</td></tr><tr><td><code>&lt;small&gt;</code></td><td>较小</td></tr><tr><td><code>&lt;sub&gt;</code></td><td>下标</td></tr><tr><td><code>&lt;sup&gt;</code></td><td>上标</td></tr><tr><td><code>&lt;ins&gt;</code></td><td>插入：有下划线</td></tr><tr><td><code>&lt;del&gt;</code></td><td>删除：中间一条线</td></tr><tr><td><code>&lt;mark&gt;</code></td><td>高</td></tr></tbody></table><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li>布局：<code>&lt;span&gt;</code> 没有语义的布局标签（行内元素）</li><li>加粗：<code>&lt;b&gt;</code>、<code>&lt;strong&gt;</code>（强调）</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><code>&lt;a href=&quot;...&quot; target=&quot;...&quot;&gt;link text&lt;/a&gt;</code></p><ol><li><code>href</code>：URL</li><li><code>target</code>：在何处打开链接<ul><li><code>_self</code>：（默认）当前页面打开</li><li><code>_blank</code>：空白页面打开</li></ul></li></ol><p><strong>图像：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;default.asp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;smiley.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;HTML tutorial&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:42px;height:42px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>邮件：</strong><code>&lt;a href=&quot;mailto:someone@example.com&quot;&gt;Send email&lt;/a&gt;</code></p><p><strong>锚链接：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;some_txt(img_name)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;img_name&quot;</span> <span class="attr">width</span>=<span class="string">&quot;...&quot;</span> <span class="attr">height</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>：（必选）URL<ol><li>相对路径（推荐）</li><li>绝对路径</li><li>绝对网络路径（访问时必须联网）</li></ol></li><li><code>alt</code>：（必选）替代文本</li><li><code>width</code>：宽度<ol><li>单位：<code>px</code>、<code>%</code></li><li>不写 <code>height</code> 的话会按比例显示</li><li><code>%</code> 是针对父元素大小的百分比</li></ol></li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p><strong>标签：</strong><code>&lt;video&gt;</code></p><ul><li><code>src</code>：URL</li><li><code>controls</code>：显示播放控件</li><li><code>width</code>：播放器宽度</li><li><code>height</code>：播放器高度</li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p><strong>标签：</strong><code>&lt;audio&gt;</code></p><ul><li><code>src</code>：URL</li><li><code>controls</code>：显示播放控件</li></ul><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><p><strong>div：</strong></p><ul><li>块级元素</li><li>宽度默认是父元素宽度，高度由内容撑开</li><li>可设置 width、height</li></ul><p><strong>span：</strong></p><ul><li>内联元素</li><li>宽度、高度都由内容撑开</li><li>不可设置 width、height</li></ul><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p><strong>空格：</strong><code>&amp;nbsp</code></p><p><strong>大于、小于：</strong><code>&amp;gt</code>，<code>&amp;lt</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>有序列表：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>无序列表：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义列表：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>language<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>City<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Beijiing<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Hangzhou<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>&lt;table&gt;</code></p><ul><li><code>&lt;th&gt;</code>：表头</li><li><code>&lt;tr&gt;</code>：表行</li><li><code>&lt;td&gt;</code>：单元格</li></ul><p><strong>其他设置：</strong></p><ol><li><code>cellspacing</code>：单元格间距</li></ol><h3 id="Emojis"><a href="#Emojis" class="headerlink" title="Emojis"></a>Emojis</h3><p>自己查哈哈…</p><h1 id="块级元素-内联元素"><a href="#块级元素-内联元素" class="headerlink" title="块级元素 内联元素"></a>块级元素 内联元素</h1><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>元素总是从新行开始，浏览器会自动在元素前后添加一些空格（边距）</p><p><strong><code>&lt;div&gt;</code></strong>、<code>p</code>、<code>&lt;h1&gt;-&lt;h6&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;form&gt;</code> </p><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>不会在前后添加换行符，因此它们通常出现在文档流中的相邻位置</p><p><strong><code>&lt;span&gt;</code></strong>、<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;input&gt;</code></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>表单用于收集用户输入，发送到服务器进行处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;My-first-web.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--文本输入框--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--密码输入框--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单：</strong></p><p><code>&lt;form&gt;</code>：创建</p><p><code>&lt;method&gt;</code>：提交数据的HTTP方法</p><ul><li>get：表单数据拼接在URL后面，大小有限制（<code>?username=zerd1y</code>）</li><li>post：表单数据在请求体中携带，大小无限制</li></ul><p><code>&lt;action&gt;</code>：目标URL</p><p><strong>表单项：</strong></p><ol><li><p><code>&lt;input&gt;</code>：输入形式（创建文本输入框、密码框、单选按钮、复选框等）</p><table><thead><tr><th>type类型</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;input type=&quot;text&quot;&gt;</code></td><td>文本框</td></tr><tr><td><code>&lt;input type=&quot;password&quot;&gt;</code></td><td>密码框</td></tr><tr><td><code>&lt;input type=&quot;radio&quot;&gt;</code></td><td>单选框</td></tr><tr><td><code>&lt;input type=&quot;checkbox&quot;&gt;</code></td><td>多选框</td></tr><tr><td><code>&lt;input type=&quot;submit/reset&quot;&gt;</code></td><td>提交&#x2F;重置</td></tr><tr><td><code>&lt;input type=&quot;button&quot;&gt;</code></td><td>按钮</td></tr><tr><td><code>&lt;input type=&quot;file&quot;&gt;</code></td><td>文件上传按钮</td></tr><tr><td><code>&lt;input type=&quot;date/time/datetime-local&quot;&gt;</code></td><td>日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td><code>&lt;input type=&quot;number&quot;&gt;</code></td><td>数字输入框</td></tr><tr><td><code>&lt;input type=&quot;email&quot;&gt;</code></td><td>邮件输入框</td></tr><tr><td><code>&lt;input type=&quot;hidden&quot;&gt;</code></td><td>隐藏域</td></tr></tbody></table><ul><li><code>&lt;name&gt;</code>：（必选）标识表单字段</li><li><code>&lt;id&gt;</code>：关联 <code>&lt;label&gt;</code> 元素</li></ul></li><li><p><code>&lt;select&gt;</code>：下拉列表</p></li><li><p><code>&lt;textarea&gt;</code>：文本域</p></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>label</code>与<code>id</code>配对</p></li><li><p><code>id</code>：</p><ul><li>为页面提供标识符</li><li>与<code>&lt;label&gt;</code>关联</li></ul></li><li><p>**<code>name</code>：**表单数据键名</p><ul><li><p>输入的内容为对应的值（例如<code>name=Xiao Jinghuai</code>）</p></li><li><p>一组单选按钮中，多个元素可以共享一个<code>name</code>，表示它们属于同一组</p></li></ul></li><li><p>**<code>value</code>：**表单初始值或当前值</p><ul><li>文本框：显示为默认文本</li><li>单选按钮&#x2F;复选框：提交给服务器的实际值</li><li>提交按钮：定义按钮上显示的文本。</li></ul></li></ul><h3 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h3><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code>定义了复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;game&quot;</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;run&quot;</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;run&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>name</code>：表示组</li><li><code>value</code>：多选框的值</li><li><code>checked</code>：默认选中</li></ul><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click_me&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>点击不会跳转</li><li>需要CSS处理</li></ul><h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">src</span>=<span class="string">&quot;image_path&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>点击自动跳转到<code>action</code></li></ul><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空表单&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>value</code>上的值会显示在按钮上</li></ul><h3 id="下拉框（列表框）"><a href="#下拉框（列表框）" class="headerlink" title="下拉框（列表框）"></a>下拉框（列表框）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>国家：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;US&quot;</span> <span class="attr">selected</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Hong Kong&quot;</span>&gt;</span>香港<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Singapore&quot;</span>&gt;</span>新加坡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>selected</code>：默认选中</li></ul><h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p><code>textarea</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;feedback&quot;</span>&gt;</span>反馈：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;feedback&quot;</span> <span class="attr">id</span>=<span class="string">&quot;feedback&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>上传文件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="邮件验证"><a href="#邮件验证" class="headerlink" title="邮件验证"></a>邮件验证</h4><p><code>email</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><code>url</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;url&quot;</span>&gt;</span>URL：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><code>number</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;number&quot;</span>&gt;</span>商品数量：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h4><p><code>range</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;voice&quot;</span>&gt;</span>音量大小：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h4><p><code>search</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;search&quot;</span>&gt;</span>搜索：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入属性"><a href="#输入属性" class="headerlink" title="输入属性"></a>输入属性</h2><ul><li><p>只读：<code>readonly</code></p></li><li><p>禁用：<code>disabled</code></p></li><li><p>隐藏域：<code>hidden</code></p></li></ul><h2 id="辅助"><a href="#辅助" class="headerlink" title="辅助"></a>辅助</h2><ul><li><p><code>title</code>：鼠标悬停在元素上时显示</p></li><li><p><code>placeholder</code>：输入框为空时显示，输入内容后自动消失（输入框）</p></li><li><p>非空判断：<code>required</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>正则表达式：<code>pattern</code>（搜“常用正则表达式”，复制粘贴）</p><p><a href="https://zyc88.blog.csdn.net/article/details/98479629?fromshare=blogdetail&sharetype=blogdetail&sharerId=98479629&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">常用正则表达式</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/2025/02/11/2025-2-11-Vim/"/>
      <url>/2025/02/11/2025-2-11-Vim/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><strong>正常模式</strong>：在文件中四处移动光标进行修改</li><li><strong>插入模式</strong>：插入文本</li><li><strong>替换模式</strong>：替换文本</li><li><strong>可视化模式</strong>（一般，行，块）：选中文本块</li><li><strong>命令模式</strong>：用于执行命令</li></ul><p>在默认设置下，Vim 会在左下角显示当前的模式。Vim 启动时的默认模式是正常模式。通常你会把大部分 时间花在正常模式和插入模式。</p><ul><li><code>&lt;ESC&gt;</code>：（退出键）从任何其他模式返回正常模式</li><li><code>i</code> ：进入插入模式</li><li><code>R</code> ：进入替换模式</li><li><code>v</code> ：进入可视（一般）模式</li><li><code>V</code> 进入可视（行）模式</li><li><code>&lt;C-v&gt;</code> （Ctrl-V, 有时也写作 <code>^V</code>）进入可视（块）模式</li><li><code>:</code> 进入命令模式</li></ul><p>因为你会在使用 Vim 时大量使用 <code>&lt;ESC&gt;</code> 键，所以可以考虑把大小写锁定键重定义成 <code>&lt;ESC&gt;</code> 键</p><h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><ol><li><p><strong>hjkl</strong>字母键</p><p>h（左移） j（下行）k（上行）l（右移）</p></li><li><p>进入Vim编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 文件名 &lt;回车&gt;</span><br></pre></td></tr></table></figure></li><li><p>退出Vim编辑器</p><ul><li>放弃所有改动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ESC&gt; :q! &lt;回车&gt;</span><br></pre></td></tr></table></figure><ul><li>保存改动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ESC&gt; :wq &lt;回车&gt;</span><br></pre></td></tr></table></figure></li><li><p>在正常模式下删除光标所在位置的字符</p><p><code>x</code></p></li><li><p>插入或添加文本</p><ul><li>在光标所在位置前插入文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i 输入欲插入文本 &lt;ESC&gt;`g`</span><br></pre></td></tr></table></figure><ul><li>在光标所在位置后添加文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A 输入欲添加文本 &lt;ESC&gt;</span><br></pre></td></tr></table></figure></li><li><p>按下 <code>&lt;ESC&gt;</code> 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。</p></li></ol><h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><ol><li><p>当前光标删除至下一个单词</p><p><code>dw</code></p></li><li><p>当前光标删除至当前行末尾</p><p><code>d$</code></p></li><li><p>删除整行</p><p><code>dd</code></p></li><li><p>欲重复一个动作，在前面加上一个数字</p><p>如<code>d2w</code></p></li><li><p>在正常模式下修改命令的格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">operator   [number]   motion</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>operator - 操作符：代表要做的事情，比如 d 代表删除</li><li>[number] - 可以附加的数字：代表动作重复的次数  </li><li>motion   - 动作：代表在所操作的文本上的移动，例如 w 代表单词(word)， $ 代表行末等等。</li></ul></li><li><p>移动光标到行首</p><p><code>0</code></p></li><li><ul><li>撤销以前的操作：<code>u</code></li><li>撤销在一行中所作的改动：<code>U</code></li><li>撤销以前的撤销命令，恢复以前的操作结果：<code>ctrl + R</code></li></ul></li></ol><h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><ol><li><p>将已删除的内容置于光标后</p><p><code>p</code></p><p>如果最后一次删除的是一个整行，那该行将置于当前光标所在行的下一行</p></li><li><p>替换光标所在位置的字符</p><p><code>r</code></p></li><li><p>更改类命令：允许您改变从当前光标所在位置直到动作指示的位置中间的文本</p><ul><li>替换当前光标到单词的末尾的内容：<code>ce</code></li><li>替换当前光标到行末的内容：<code>c$</code></li></ul></li><li><p>更改类命令的格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c [number] motion</span><br></pre></td></tr></table></figure></li></ol><h1 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h1><ol><li><ul><li><p>显示当前光标所在位置和文件状态信息</p><p><code>ctrl + g</code></p></li><li><p>将光标跳转至文件最后一行</p><p><code>g</code></p></li><li><p>将光标移动至该行号代表的行</p><p><code>先敲入一个行号然后输入大写G</code></p></li><li><p>将光标跳转至文件第一行</p><p><code>gg</code></p></li></ul></li><li><ul><li><p>正向查找字符串</p><p><code>/ + 字符串</code></p></li><li><p>反向查找字符串</p><p><code>? + 字符串</code></p></li><li><p>在同一方向上查找下一个匹配字符串</p><p><code>完成一次查找后按 n 键</code></p></li><li><p>向相反方向查找下一匹配字符串</p><p><code>按大写 N </code></p></li><li><p>跳转回较旧的位置</p><p><code>ctrl + O</code></p></li><li><p>跳转到较新位置</p><p><code>ctrl + I</code></p></li></ul></li><li><p>光标当前位置是括号<code>(、)、[、]、&#123;、&#125;，</code>按<code>%</code>会将光标移动到配对的括号上</p></li><li><ul><li><p>在一行内替换头一个字符串 old 为新的字符串 new</p><p><code>:s/old/new</code></p></li><li><p>在一行内替换所有的字符串 old 为新的字符串 new</p><p><code>:s/old/new/g</code></p></li><li><p>在两行内替换所有的字符串 old 为新的字符串 new</p><p><code>:#,#s/old/new/g</code></p></li><li><p>在文件内替换所有的字符串 old 为新的字符串 new</p><p><code>:%s/old/new/g</code></p></li><li><p>进行全文替换时询问用户确认每个替换需添加 c 标志</p><p><code>:%s/old/new/gc</code></p></li></ul></li></ol><h1 id="第五讲"><a href="#第五讲" class="headerlink" title="第五讲"></a>第五讲</h1><ol><li><pre><code class="language-bash">:!command</code></pre><p>用于执行一个外部命令<code>commmand</code></p><p>example：</p><ul><li><p>显示当前目录的内容</p><p><code>:!ls</code>（Unix）</p><p><code>:!dir</code>（MS-DOS）</p></li><li><p>删除名为FILENAME的文件</p><p><code>:!rm FILENAME</code>（Unix）</p><p><code>:!del FILENAME</code>（MS-DOS）</p></li></ul></li><li><p>将当前VIM中正在编辑的文件保存到名为FILENAME的文件中</p><p><code>:w FILENAME</code></p></li><li><p>将当前编辑文件中可视模式下选中的内容保存到文件FILENAME中</p><p><code>v motion :w FILENAME</code></p></li><li><p>提取磁盘文件FILENAME并将其插入到当前文件的光标位置后面</p><p><code>:r FILENAME</code></p></li><li><p>读取dir命令的输出并将其放置到当前文件的光表位置后面</p><p><code>:r !dir</code></p></li></ol><h1 id="第六讲"><a href="#第六讲" class="headerlink" title="第六讲"></a>第六讲</h1><ol><li><ul><li><p>在光标下方打开新的一行进入插入模式</p><p><code>o</code></p></li><li><p>在光标上方打开新的一行进入插入模式</p><p><code>O</code></p></li></ul></li><li><ul><li><p>在光标所在位置之后插入文本</p><p><code>a</code></p></li><li><p>在光标所在行的行末之后插入文本</p><p><code>A</code></p></li></ul></li><li><p>使光标移动到单词末尾</p><p><code>e</code></p></li><li><p>复制文本：<code>y</code></p><p>粘贴先前复制的文本：<code>p</code></p></li><li><p>进入替换模式</p><p><code>R</code>，按<code>&lt;ESC&gt;</code>回到正常模式</p></li><li><p>输入 <code>:set xxx</code> 可以设置 <code>xxx</code>选项。一些有用的选项如下：</p><ul><li><code>ic</code>：’ignorecase’查找时忽略字母大小写</li><li><code>is</code> ：’incsearch’查找短语时显示部分匹配      </li><li><code> hls</code> ：’hlsearch’高亮显示所有的匹配短语</li></ul></li><li><p>在选项前加上 <code>no</code> 可以关闭选项：  <code>:set noic</code></p></li></ol><h1 id="第七讲"><a href="#第七讲" class="headerlink" title="第七讲"></a>第七讲</h1><ol><li><p>打开帮助窗口</p><p><code>:help</code>、<code>&lt;F1&gt;键</code>、<code>&lt;help&gt;键</code></p></li><li><p>找到关于 cmd 命令的帮助</p><p>输入<code>:help cmd</code></p></li><li><p>在窗口之间跳转</p><p><code>ctrl + W</code></p></li><li><p>关闭帮助窗口</p><p><code>:q</code></p></li><li><p>可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置</p></li><li><p>当输入 <code>: </code>命令时，按 <code>CTRL-D</code> 可以查看可能的补全结果。按 <code>&lt;TAB&gt;</code> 可以使用一个补全。</p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>vim 教程到此就结束了。本教程只是为了简明地介绍一下 Vim 编辑器，但已足以让您很容易使用这个编辑器了。毋庸质疑，vim还有很多很多的命令，本教程所介绍的距离完整的差得很远。所以您要精通的话，还望继续努力哦。下一步您可以阅读Vim 的用户手册，使用的命令是： <code>:help user-manual</code></p><p>下面这本书值得推荐用于更进一步的阅读和学习：<br>        Vim - Vi Improved - 作者：Steve Oualline<br>        出版社：New Riders</p><p>这是第一本完全讲解 Vim 的书籍。它对于初学者特别有用。其中包含有大量实例和图示。</p><p>欲知详情，请访问 <a href="https://iccf-holland.org/click5.html">https://iccf-holland.org/click5.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级特性 (Java)</title>
      <link href="/2025/02/10/2025-2-10-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-Java/"/>
      <url>/2025/02/10/2025-2-10-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>***try … catch：***捕获异常</p><p>**多 <em>ctach</em> 语句：**从上到下匹配，匹配成功后不再继续匹配（子类必须写在前面）</p><p>***finally：***最后执行（可不写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | NumberFormatException e) &#123;</span><br><span class="line">        <span class="comment">// IOException或NumberFormatException</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bad input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>**printStackTrace()：**从下往上看，看调用层次，来调试错误</p><p><strong>抛出异常：</strong></p><ol><li><p>创建 <code>Exception</code> 实例</p></li><li><p><code>throw</code> 抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">process2</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>**防止异常覆盖：**传入 <code>Exception</code> 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**防止异常屏蔽：**用 <code>origin</code> 保存异常，调用 <code>Throwable.addSuppressed()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">origin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Integer.parseInt(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            origin = e;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            <span class="keyword">if</span> (origin != <span class="literal">null</span>) &#123;</span><br><span class="line">                e.addSuppressed(origin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p><strong>标准库常用异常：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Exception</span><br><span class="line">├─ RuntimeException</span><br><span class="line">│  ├─ NullPointerException</span><br><span class="line">│  ├─ IndexOutOfBoundsException</span><br><span class="line">│  ├─ SecurityException</span><br><span class="line">│  └─ IllegalArgumentException</span><br><span class="line">│     └─ NumberFormatException</span><br><span class="line">├─ IOException</span><br><span class="line">│  ├─ UnsupportedCharsetException</span><br><span class="line">│  ├─ FileNotFoundException</span><br><span class="line">│  └─ SocketException</span><br><span class="line">├─ ParseException</span><br><span class="line">├─ GeneralSecurityException</span><br><span class="line">├─ SQLException</span><br><span class="line">└─ TimeoutException</span><br></pre></td></tr></table></figure><p><strong>自定义根异常：</strong><code>BaseException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">BaseException</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailedException</span> <span class="keyword">extends</span> <span class="title class_">BaseException</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>JVM为每个加载的 <code>class</code> 及 <code>interface</code> 创建 <code>Class</code> 实例来保存信息</p><p>**反射：**通过 <code>Class</code> 实例获取 <code>class</code> 信息的方法（<code>Class</code> 实例在JVM中是唯一的）</p><p><strong>获取 Class 实例：</strong></p><ol><li><p><code>Class cls = String.class;</code></p></li><li><p><code>String s = &quot;Hello&quot;;</code></p><p><code>Class cls = s.getClass();</code></p></li><li><p><code>Class s = Class.forName(&quot;java.lang.String&quot;);</code></p></li></ol><p>**动态加载：**执行程序时，用到JVM才加载 class</p><h2 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h2><p><strong>获取字段：</strong></p><ol><li><code>Class.getField(&quot;...&quot;)</code>：根据字段名获取 public 字段（包括父类）</li><li><code>Class.getDeclaredFiedl(&quot;...&quot;)</code>：根据字段名获取当前类的字段（不包括父类）</li><li><code>Class.getFields()</code>：获取所有 public 的字段（包括父类）</li><li><code>Class.getDeclaredFields()</code>：获取当前类的所有字段（不包括父类）</li></ol><p><strong>Field 对象：</strong></p><ul><li><p><code>Field.getName()</code>：返回字段名</p></li><li><p><code>Field.getType()</code>：返回字段类型</p></li><li><p><code>Field.getModifiers()</code>：返回字段修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> String.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">f.getName(); <span class="comment">// &quot;value&quot;</span></span><br><span class="line">f.getType(); <span class="comment">// class [B 表示byte[]类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">Modifier.isFinal(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isPublic(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isProtected(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isPrivate(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isStatic(m); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>访问 private 字段：</strong><code>Field.setAccessible(true);</code></p><p><strong>设置字段：</strong><code>Field.set(Object, Object)</code>（实例，待修改的值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> f.get(p);</span><br><span class="line">        System.out.println(value); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">        f.set(p, <span class="string">&quot;Xiao Hong&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Hong&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p><strong>获取方法：</strong></p><ol><li><code>Class.getMethod(&quot;..&quot;,Class...)</code>：获取某个 public 方法（包括父类）</li><li><code>Class.getDeclaredMethod(&quot;..&quot;,Class...)</code>：获取当前类的方法（不包括父类）</li><li><code>Class.getMethods()</code>：获取所有 public 方法（包括父类）</li><li><code>Class.getDeclaredMethods()</code>：获取当前类的所有方法（不包括父类）</li></ol><p><strong>Method 对象：</strong></p><ul><li><code>Method.getName()</code>：返回方法名</li><li><code>Method.getReturnType()</code>：返回方法返回类型</li><li><code>Method.getParameterTypes()</code>：返回方法参数类型（Class数组）</li><li><code>Method.getModifiers()</code>：返回方法修饰符</li></ul><p><strong>调用方法：</strong></p><ul><li><code>Method.invoke(Object,...)</code>（实例，方法参数）</li><li><code>Method.invoke(null,...)</code>：调用静态方法</li></ul><p><strong>访问非 public 字段：</strong><code>Method.setAccessible(true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> p.getClass().getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(p, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**多态：**调用实际类型的覆写方法</p><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><p><strong>通过反射创建新实例：</strong><code>Person p = Person.class.newInstance();</code>（只能调用该类的public无参数构造方法）</p><p>**Constructor 对象：**获取当前类的构造方法（不是父类）</p><ol><li><code>getConstructor(Class...)</code>：获取某个 <code>public</code> 的构造方法</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个构造方法</li><li><code>getConstructors()</code>：获取所有 <code>public</code> 的构造方法</li><li><code>getDeclaredConstructors()</code>：获取所有构造方法</li></ol><p><strong>访问非 public 构造方法：</strong><code>Constructor.setAccessible(true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取构造方法Integer(int):</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons1</span> <span class="operator">=</span> Integer.class.getConstructor(<span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 调用构造方法:</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n1</span> <span class="operator">=</span> (Integer) cons1.newInstance(<span class="number">123</span>);</span><br><span class="line">        System.out.println(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造方法Integer(String)</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons2</span> <span class="operator">=</span> Integer.class.getConstructor(String.class);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n2</span> <span class="operator">=</span> (Integer) cons2.newInstance(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        System.out.println(n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h2><p><strong>获取父类的 Class：</strong><code>Class.getSuperclass()</code></p><p><strong>获取接口：</strong><code>Class.getInterfaces();</code>（不包括父类接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Integer.class;</span><br><span class="line">        Class[] is = s.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p>**InputStream &#x2F; OutputStream：**IO流（字节流），以 <code>byte</code> （字节）为最小单位</p><p>**Reader &#x2F; Writer：**字符流，以 <code>char</code> 为最小单位</p><p><strong>同步 vs 异步：</strong></p><ol><li>同步：读写IO时代码必须等待数据返回后才继续执行后续代码 （<code>java.io</code>）</li><li>异步：读写IO时仅发出请求，然后立刻执行后续代码 （<code>java.nio</code>）</li></ol><h2 id="File-对象"><a href="#File-对象" class="headerlink" title="File 对象"></a>File 对象</h2><p>既可以表示文件，也可以表示目录</p><p>**创建：**需要传入路径</p><ol><li><p>绝对路径：</p><ul><li>Windows：<code>File f = new File(&quot;C:\\Windows\\notepad.exe&quot;);</code></li><li>Linux：<code>File f = new File(&quot;/usr/bin/javac&quot;);</code></li></ul></li><li><p>相对路径：<code>.</code> 表示当前目录，<code>..</code> 表示上级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设当前目录是C:\Docs</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;sub\\javac&quot;</span>); <span class="comment">// 绝对路径是C:\Docs\sub\javac</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.\\sub\\javac&quot;</span>); <span class="comment">// 绝对路径是C:\Docs\sub\javac</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;..\\sub\\javac&quot;</span>); <span class="comment">// 绝对路径是C:\sub\javac</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p><strong>是否是已存在的文件：</strong><code>isFile()</code></p><p><strong>是否是已存在的目录：</strong><code>isDirectory()</code></p><p><strong>是否可读：</strong><code>canRead()</code></p><p><strong>是否可写：</strong><code>canWrite()</code></p><p><strong>是否可执行：</strong><code>canExecute()</code></p><p><strong>文件字节大小：</strong><code>length()</code></p><h3 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h3><p><strong>创建文件：</strong><code>File.createNewFile()</code></p><p><strong>删除文件：</strong><code>File.delete()</code></p><p><strong>临时文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;tmp-&quot;</span>, <span class="string">&quot;.txt&quot;</span>); <span class="comment">// 提供临时文件的前缀和后缀</span></span><br><span class="line">        f.deleteOnExit(); <span class="comment">// JVM退出时自动删除</span></span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历文件和目录"><a href="#遍历文件和目录" class="headerlink" title="遍历文件和目录"></a>遍历文件和目录</h3><p><strong>列出目录下文件和子目录：</strong></p><ul><li><code>File.list()</code></li><li><code>File.listFiles()</code></li></ul><p><strong>File 对象表示目录：</strong></p><ul><li><code>mkdir()</code>：创建当前File对象表示的目录</li><li><code>mkdirs()</code>：创建当前File对象表示的目录（必要时将不存在的父目录也创建出来）</li><li><code>delete()</code>：删除当前File对象表示的目录（当前目录必须为空才能删除成功）</li></ul><h1 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h1><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式：构成搜索模式的字符序列。在文本中搜索数据时，可以使用此搜索模式来描述要搜索的内容。</p><p>正则表达式可以是单个字符，也可以是更复杂的模式</p><p>则表达式可用于执行所有类型的<strong>文本搜索</strong>和<strong>文本替换</strong> 操作。</p><p>导入 <code>java.util.regex</code> 包来使用正则表达式，该软件包包括一下类：</p><ul><li><code>Pattern</code> 类：定义模式（用于搜索）</li><li><code>Matchaer</code> 类：用于搜索模式</li><li><code>PatternSyntaxException</code> 类：异常类 - 指示正则表达式模式中的语法错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;hello&quot;</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Match found&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Match not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在句子中搜索单词 “hello”：</p><ul><li><p><code>Pattern.compile()</code>：创建模式。</p><p>第一个参数指示正在搜索的模式，第二个参数有一个标志，指示搜索应不区分大小写。第二个参数是可选的。</p></li><li><p><code>matcher()</code>：在字符串中搜索模式。它返回一个 Matcher 对象，其中包含有关所执行搜索的信息</p></li><li><p>如果在字符串中找到模式，则<code> find()</code> 方法返回 true，如果未找到模式，则返回 false</p></li></ul><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><p><code>compile()</code>方法中的标志会更改搜索的执行方式。以下是其中的一些：</p><ul><li><code>Pattern.CASE_INSENSITIVE</code> - 执行搜索时，将忽略字母的大小写。</li><li><code>Pattern.LITERAL</code> - 模式中的特殊字符将没有任何特殊含义，在执行搜索时将被视为普通字符。</li><li><code>Pattern.UNICODE_CASE</code> - 将它与 <code>CASE_INSENSITIVE</code> 标志一起使用，也可以忽略英文字母表以外的字母的大小写</li></ul><h3 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h3><p><code>Pattern.compile()</code> 方法的第一个参数是 pattern。它描述了正在搜索的内容。</p><p>方括号用于查找字符范围：</p><table><thead><tr><th>表示</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>匹配括号内的任意字符</td></tr><tr><td>[^abc]</td><td>匹配非括号内的字符</td></tr><tr><td>[0-9]</td><td>匹配0-9之间的字符</td></tr></tbody></table><p>元字符是具有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>|</td><td>匹配多个模式中的<strong>任意一个</strong>，cat|dog|fish只要它们中的任意一个出现在文本中，就算匹配成功</td></tr><tr><td>.</td><td>匹配任何单个字符，除了换行符 <code>\n</code></td></tr><tr><td>^</td><td>匹配字符串的开始位置，如^Hello</td></tr><tr><td>$</td><td>F匹配字符串的结束位置，如World$</td></tr><tr><td>\d</td><td>匹配任何数字字符</td></tr><tr><td>\s</td><td>匹配任何空白字符（如空格、制表符、换行符等）</td></tr><tr><td>\b</td><td>匹配单词边界，<code>\bWORD</code> 匹配以 “WORD” 开头的单词，<code>WORD\b</code> 匹配以 “WORD” 结尾的单词</td></tr><tr><td>\uxxxx</td><td>匹配由四个十六进制数字表示的 Unicode 字符，<code>\u0041</code> 匹配 Unicode 字符 ‘A’</td></tr></tbody></table><p>量词定义数量：</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配包含至少一个 <code>n</code> 的字符串（即 <code>n</code> 至少出现一次）</td></tr><tr><td>n*</td><td>匹配包含零个或多个 <code>n</code> 的字符串（即 <code>n</code> 可以出现任意次，包括零次）</td></tr><tr><td>n?</td><td>匹配包含零个或一个 <code>n</code> 的字符串（即 <code>n</code> 要么出现一次，要么不出现）</td></tr><tr><td>n{x}</td><td>匹配包含恰好 X 个 <code>n</code> 的字符串</td></tr><tr><td>n{x,y}</td><td>匹配包含 X 到 Y 个 <code>n</code> 的字符串</td></tr><tr><td>n{x,}</td><td>匹配包含至少 X 个 <code>n</code> 的字符串</td></tr></tbody></table><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程允许程序通过同时执行多项事务来更高效地运行，可用于在后台执行复杂的任务，而不会中断主程序。</p><p><strong>创建：</strong></p><ul><li><p>扩展 <code>Thread</code> 类并覆盖其 <code>run()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is running in a thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>Runnable</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is running in a thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>运行：</strong></p><ul><li><p>扩展 <code>Thread</code> 类：创建该类的实例并调用 <code>start()</code> 方法来运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Main</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is outside of the thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is running in a thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>Runnable</code> 接口：将类的实例传递给 <code>Thread</code> 对象的构造函数，然后调用线程的 <code>start()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Main</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(obj);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is outside of the thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This code is running in a thread&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>extends 和 implements 的区别：</strong></p><p>当一个类扩展 Thread 类时，你不能扩展任何其他类。但通过实现 Runnable 接口，也可以从另一个类扩展，例如： class <code>MyClass extends OtherClass implements Runnable</code> .</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>由于线程与程序的其他部分同时运行，因此无法知道代码将按什么顺序运行。当线程和主程序读取和写入相同的变量时，这些值是不可预测的。由此产生的问题称为并发问题。</p><p><em>例如：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Main</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(amount);</span><br><span class="line">    amount++;</span><br><span class="line">    System.out.println(amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    amount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时会输出 <code>0 2</code>，有时会输出 <code>0 1</code></p><p>为避免并发问题，最好在线程之间共享尽可能少的属性。如果需要共享属性，一种可能的解决方案是使用 <code>isAlive()</code> 方法检查线程是否已经运行完毕，然后再使用任何 线程可以更改的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Main</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="comment">// Wait for the thread to finish</span></span><br><span class="line">    <span class="keyword">while</span>(thread.isAlive()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Waiting...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update amount and print its value</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Main: &quot;</span> + amount);</span><br><span class="line">    amount++;</span><br><span class="line">    System.out.println(<span class="string">&quot;Main: &quot;</span> + amount);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    amount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Waiting...</span></span><br><span class="line"><span class="comment">Waiting...</span></span><br><span class="line"><span class="comment">Waiting...</span></span><br><span class="line"><span class="comment">Waiting...</span></span><br><span class="line"><span class="comment">Main: 1</span></span><br><span class="line"><span class="comment">Main: 2*/</span></span><br></pre></td></tr></table></figure><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>Java 8 中添加，lambda 表达式是一个简短的代码块，它接受参数并返回一个值。Lambda 表达式类似于方法，但它们不需要名称，并且可以直接在方法的主体中实现</p><p><strong>语法：</strong></p><ul><li><p>一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameter -&gt; expression</span><br></pre></td></tr></table></figure></li><li><p>多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameter1, parameter2) -&gt; expression</span><br></pre></td></tr></table></figure></li><li><p>为了执行更复杂的作，可以将代码块与大括号一起使用。如果 lambda 表达式需要返回一个值，则代码块应具有 <code>return</code> 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameter1, parameter2) -&gt; &#123; code block &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用：</strong></p><ul><li><p>作为方法的参数：</p><p>在 <code>ArrayList</code> 的 <code>forEach()</code> 方法中使用 lambda 表达式来打印列表中的每一项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    numbers.add(<span class="number">5</span>);</span><br><span class="line">    numbers.add(<span class="number">9</span>);</span><br><span class="line">    numbers.add(<span class="number">8</span>);</span><br><span class="line">    numbers.add(<span class="number">1</span>);</span><br><span class="line">    numbers.forEach( (n) -&gt; &#123; System.out.println(n); &#125; );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当方法参数类型是接口时，Lambda 表达式可以存储在变量中。Lambda 表达式需要匹配接口方法的参数数量和返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    numbers.add(<span class="number">5</span>);</span><br><span class="line">    numbers.add(<span class="number">9</span>);</span><br><span class="line">    numbers.add(<span class="number">8</span>);</span><br><span class="line">    numbers.add(<span class="number">1</span>);</span><br><span class="line">    Consumer&lt;Integer&gt; method = (n) -&gt; &#123; System.out.println(n); &#125;;</span><br><span class="line">    numbers.forEach( method );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 内置了许多此类接口，例如列表使用的 <code>Consumer</code> 接口（位于 <code>java.util</code> 包中）</p></li><li><p>作为函数式接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringFunction</span> &#123;</span><br><span class="line">  String <span class="title function_">run</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringFunction</span> <span class="variable">exclaim</span> <span class="operator">=</span> (s) -&gt; s + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    <span class="type">StringFunction</span> <span class="variable">ask</span> <span class="operator">=</span> (s) -&gt; s + <span class="string">&quot;?&quot;</span>;</span><br><span class="line">    printFormatted(<span class="string">&quot;Hello&quot;</span>, exclaim);</span><br><span class="line">    printFormatted(<span class="string">&quot;Hello&quot;</span>, ask);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFormatted</span><span class="params">(String str, StringFunction format)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> format.run(str);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h1><p><code>Comparator</code> 和 <code>Comparable</code> 接口允许您指定用于对对象进行排序的规则</p><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p><code>Comparator</code> 接口：使用<code>compare()</code>方法创建一个类，来比较两个对象</p><p><code>compare()</code> 方法：返回一个数字</p><ul><li>如果第一个对象应位于列表中的第一个，则为负数</li><li>如果第二个对象应位于列表中的第一个，则为正数</li><li>如果 顺序 无关紧要，则为零</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sort Car objects by year</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortByYear</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object obj1, Object obj2)</span> &#123;</span><br><span class="line">    <span class="comment">// Make sure that the objects are Car objects</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">a</span> <span class="operator">=</span> (Car) obj1;</span><br><span class="line">    <span class="type">Car</span> <span class="variable">b</span> <span class="operator">=</span> (Car) obj2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Compare the objects</span></span><br><span class="line">    <span class="keyword">if</span> (a.year &lt; b.year) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// The first car has a smaller year</span></span><br><span class="line">    <span class="keyword">if</span> (a.year &gt; b.year) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// The first car has a larger year</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Both cars have the same year</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**使用：**将其作为参数传递给排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use a comparator to sort the cars</span></span><br><span class="line"><span class="type">Comparator</span> <span class="variable">myComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortByYear</span>();</span><br><span class="line">Collections.sort(myCars, myComparator);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a Car class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String brand;</span><br><span class="line">  <span class="keyword">public</span> String model;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String b, String m, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    brand = b;</span><br><span class="line">    model = m;</span><br><span class="line">    year = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a comparator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortByYear</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object obj1, Object obj2)</span> &#123;</span><br><span class="line">    <span class="comment">// Make sure that the objects are Car objects</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">a</span> <span class="operator">=</span> (Car) obj1;</span><br><span class="line">    <span class="type">Car</span> <span class="variable">b</span> <span class="operator">=</span> (Car) obj2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Compare the year of both objects</span></span><br><span class="line">    <span class="keyword">if</span> (a.year &lt; b.year) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// The first car has a smaller year</span></span><br><span class="line">    <span class="keyword">if</span> (a.year &gt; b.year) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// The first car has a larger year</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Both cars have the same year</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="comment">// Create a list of cars</span></span><br><span class="line">    ArrayList&lt;Car&gt; myCars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Car&gt;();    </span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;X5&quot;</span>, <span class="number">1999</span>));</span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Honda&quot;</span>, <span class="string">&quot;Accord&quot;</span>, <span class="number">2006</span>));</span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mustang&quot;</span>, <span class="number">1970</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use a comparator to sort the cars</span></span><br><span class="line">    <span class="type">Comparator</span> <span class="variable">myComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortByYear</span>();</span><br><span class="line">    Collections.sort(myCars, myComparator);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the cars</span></span><br><span class="line">    <span class="keyword">for</span> (Car c : myCars) &#123;</span><br><span class="line">      System.out.println(c.brand + <span class="string">&quot; &quot;</span> + c.model + <span class="string">&quot; &quot;</span> + c.year);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lambda：</strong></p><p>将比较器替换为 lambda 表达式，该表达式具有与 <code>compare()</code> 方法相同的参数和返回值（代码更短）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(myCars, (obj1, obj2) -&gt; &#123;</span><br><span class="line">  <span class="type">Car</span> <span class="variable">a</span> <span class="operator">=</span> (Car) obj1;</span><br><span class="line">  <span class="type">Car</span> <span class="variable">b</span> <span class="operator">=</span> (Car) obj2;</span><br><span class="line">  <span class="keyword">if</span> (a.year &lt; b.year) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a.year &gt; b.year) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p><code>Comparable</code> 接口：使用 <code>compareTo()</code> 方法指定自己的排序规则</p><p><code>compareTo()</code> 方法：将对象作为参数，把 comparable 与参数进行比较，返回一个数字</p><ul><li>如果 Comparable 排在列表的首位，则为负数</li><li>如果另一个对象应该在列表中排在第一位，则为整数</li><li>如果 顺序 无关紧要，则为零</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String brand;</span><br><span class="line">  <span class="keyword">public</span> String model;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Decide how this object compares to other objects</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">  <span class="type">Car</span> <span class="variable">other</span> <span class="operator">=</span> (Car)obj;</span><br><span class="line">    <span class="keyword">if</span>(year &lt; other.year) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// This object is smaller than the other one</span></span><br><span class="line">    <span class="keyword">if</span>(year &gt; other.year) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// This object is larger than the other one</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Both objects are the same</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p><code>Comparable</code> 是接口而不是比较器</p><p>许多Java类实现了 <code>Comparable</code> 接口，如<code>String</code> 和 <code>Integer</code>，所以它们不需要比较器排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String brand;</span><br><span class="line">  <span class="keyword">public</span> String model;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Decide how this object compares to other objects</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">  <span class="type">Car</span> <span class="variable">other</span> <span class="operator">=</span> (Car)obj;</span><br><span class="line">    <span class="keyword">if</span>(year &lt; other.year) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// This object is smaller than the other one</span></span><br><span class="line">    <span class="keyword">if</span>(year &gt; other.year) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// This object is larger than the other one</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Both objects are the same</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a Car class which is comparable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String brand;</span><br><span class="line">  <span class="keyword">public</span> String model;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> year;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String b, String m, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    brand = b;</span><br><span class="line">    model = m;</span><br><span class="line">    year = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Decide how this object compares to other objects</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">  <span class="type">Car</span> <span class="variable">other</span> <span class="operator">=</span> (Car)obj;</span><br><span class="line">    <span class="keyword">if</span>(year &lt; other.year) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// This object is smaller than the other one</span></span><br><span class="line">    <span class="keyword">if</span>(year &gt; other.year) <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// This object is larger than the other one</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Both objects are the same</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="comment">// Create a list of cars</span></span><br><span class="line">    ArrayList&lt;Car&gt; myCars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Car&gt;();    </span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;X5&quot;</span>, <span class="number">1999</span>));</span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Honda&quot;</span>, <span class="string">&quot;Accord&quot;</span>, <span class="number">2006</span>));</span><br><span class="line">    myCars.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mustang&quot;</span>, <span class="number">1970</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort the cars</span></span><br><span class="line">    Collections.sort(myCars);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the cars</span></span><br><span class="line">    <span class="keyword">for</span> (Car c : myCars) &#123;</span><br><span class="line">      System.out.println(c.brand + <span class="string">&quot; &quot;</span> + c.model + <span class="string">&quot; &quot;</span> + c.year);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>正向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> a.year - b.year;</span><br></pre></td></tr></table></figure><p>反向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> b.year - a.year;</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p><code>comparator</code>：具有一种方法的对象</p></li><li><p><code>comparable</code>：将自身与其他对象进行比较的对象</p></li></ul><p>使用 <code>Comparable</code> 接口会更容易，但 <code>Comparator</code> 接口功能更强大，因为它允许您对任何类型的对象进行排序，即使您无法更改其代码</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p><code>java.io</code> 包中的 <code>File</code> 类允许我们处理文件</p><p>**使用 <code>file</code> 类：**创建该类的对象，并指定文件名或目录名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;  <span class="comment">// Import the File class</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>); <span class="comment">// Specify the filename</span></span><br></pre></td></tr></table></figure><p><code>File</code> 类的方法：</p><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>canRead()</code></td><td>Boolean</td><td>测试文件是否可读</td></tr><tr><td><code>canWrite()</code></td><td>Boolean</td><td>测试文件是否可写</td></tr><tr><td><code>createNewFile()</code></td><td>Boolean</td><td>创建一个空的文件。如果文件已经存在，则返回 <code>false</code>；如果文件成功创建，则返回 <code>true</code>。</td></tr><tr><td><code>delete()</code></td><td>Boolean</td><td>删除文件。如果文件成功删除，则返回 <code>true</code>；如果删除失败或文件不存在，则返回 <code>false</code>。</td></tr><tr><td><code>exists()</code></td><td>Boolean</td><td>测试文件是否存在</td></tr><tr><td><code>getName()</code></td><td>String</td><td>返回文件的名称（即不包括路径部分）</td></tr><tr><td><code>getAbsolutePath()</code></td><td>String</td><td>返回文件的绝对路径</td></tr><tr><td><code>length()</code></td><td>Long</td><td>返回文件的大小，单位是字节（byte）</td></tr><tr><td><code>list()</code></td><td>String[]</td><td>如果文件是一个目录，返回该目录下所有文件和子目录的名称数组</td></tr><tr><td><code>mkdir()</code></td><td>Boolean</td><td>创建一个目录</td></tr></tbody></table><p><strong>创建：</strong><code>createNewFile()</code></p><p>文件成功创建：<code> true</code>，文件已存在： <code>false</code>。注意：<strong>该方法必须包含在 <code>try...catch</code> 块</strong>，因为如果发生错误（如果由于某种原因无法创建文件），它会抛出 <code>IOException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;  <span class="comment">// Import the File class</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  <span class="comment">// Import the IOException class to handle errors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateFile</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (myObj.createNewFile()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File created: &quot;</span> + myObj.getName());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File already exists.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;An error occurred.&quot;</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在特定目录中创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\MyName\\filename.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>Mac、Linux可直接编写路径</p><p><strong>写入文件：</strong></p><p>用 <code>FileWriter</code>，<code>write()</code>，完成写入后用 <code>close()</code> 关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;   <span class="comment">// Import the FileWriter class</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  <span class="comment">// Import the IOException class to handle errors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteToFile</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">FileWriter</span> <span class="variable">myWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">      myWriter.write(<span class="string">&quot;Files in Java might be tricky, but it is fun enough!&quot;</span>);</span><br><span class="line">      myWriter.close();</span><br><span class="line">      System.out.println(<span class="string">&quot;Successfully wrote to the file.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;An error occurred.&quot;</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取：</strong><code>Scanner</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;  <span class="comment">// Import the File class</span></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;  <span class="comment">// Import this class to handle errors</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// Import the Scanner class to read text files</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadFile</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">myReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(myObj);</span><br><span class="line">      <span class="keyword">while</span> (myReader.hasNextLine()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> myReader.nextLine();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">      &#125;</span><br><span class="line">      myReader.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;An error occurred.&quot;</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取文件信息：</strong><code>File</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;  <span class="comment">// Import the File class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFileInfo</span> &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (myObj.exists()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;File name: &quot;</span> + myObj.getName());</span><br><span class="line">      System.out.println(<span class="string">&quot;Absolute path: &quot;</span> + myObj.getAbsolutePath());</span><br><span class="line">      System.out.println(<span class="string">&quot;Writeable: &quot;</span> + myObj.canWrite());</span><br><span class="line">      System.out.println(<span class="string">&quot;Readable &quot;</span> + myObj.canRead());</span><br><span class="line">      System.out.println(<span class="string">&quot;File size in bytes &quot;</span> + myObj.length());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;The file does not exist.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Java API 中有许多可用的类可用于在 Java 中读取和写入文件： <code>FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream</code> 等。使用哪一个取决于你正在使用的 Java 版本，你是否需要读取字节或字符，以及文件&#x2F;行的大小等</p><p><strong>删除文件：</strong><code>delete()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;  <span class="comment">// Import the File class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteFile</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (myObj.delete()) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;Deleted the file: &quot;</span> + myObj.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Failed to delete the file.&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**删除文件夹：**删除文件夹的前提是 文件夹必须为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteFolder</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\MyName\\Test&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (myObj.delete()) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;Deleted the folder: &quot;</span> + myObj.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Failed to delete the folder.&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象 (Java)</title>
      <link href="/2025/02/05/2025-2-5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88Java%EF%BC%89/"/>
      <url>/2025/02/05/2025-2-5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-OOP"><a href="#什么是-OOP" class="headerlink" title="什么是 OOP"></a>什么是 OOP</h1><p><strong>面向对象编程</strong>（Object-Orien Programming，OOP）</p><ul><li>面向过程：编写对数据执行的过程或方法</li><li>面向对象：创建同时包含数据和方法的对象</li></ul><p>类和对象：</p><ol><li>类是对象的模板，而对象是类的实例</li><li>创建各个对象时，它们会从类中继承所有变量和方法</li></ol><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p><strong>创建：</strong></p><ol><li><p>创建类：<code>class</code> （大写开头，java 文件的名称应与类名匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实例：<code>new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">ming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure></li></ol><p>**属性：**访问、修改：<code>.</code></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class="line">    若干方法语句;</span><br><span class="line">    <span class="keyword">return</span> 方法返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修饰符：</strong></p><ul><li><code>private</code>：只能在类内部调用</li><li><code>static</code>：静态方法，属于类本身，不需要创建对象也能调用</li><li><code>public</code>：任何类可访问</li></ul><p>**this：**指向当前实例</p><p><strong>可变参数：</strong><code>类型...</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(String... names)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按值传递 vs 引用传递：</strong></p><table><thead><tr><th>类型</th><th>传递</th><th>更改后输出是否变化</th></tr></thead><tbody><tr><td>基本数据类型</td><td>按值传递</td><td>不变</td></tr><tr><td>引用类型（数组、对象）</td><td>引用传递（可在原有地址改变）</td><td>变</td></tr><tr><td>字符串、不可变类型</td><td>引用传递（修改会创建新对象）</td><td>不变</td></tr></tbody></table><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><strong>要求：</strong></p><ol><li>方法的名称是类名</li><li>没有返回值（没有 <code>void</code>）</li><li>调用：<code>new</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">15</span>); <span class="comment">// 既可以调用带参数的构造方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 也可以调用无参数构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p><strong>重载 <em>overload：</em></strong></p><ol><li>方法名相同</li><li>参数列表不同：数量、类型、顺序</li><li>返回值可不同</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法链"><a href="#方法链" class="headerlink" title="方法链"></a>方法链</h2><p>要求：</p><ol><li>前一个方法返回类本身 <code>this</code></li><li>或者是构造函数</li></ol><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><ul><li><strong>访问控制修饰符</strong> - 控制访问级别</li><li><strong>非访问控制修饰符</strong> - 不控制访问级别，但提供其他功能</li></ul><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li><p>对于<strong>类</strong>：</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>public</code></td><td>所有类都能访问</td></tr><tr><td>默认不写</td><td><strong>同包</strong>内可访问</td></tr></tbody></table></li><li><p>对于<strong>属性、方法和构造函数</strong>：、</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>public</code></td><td><strong>所有类</strong>都能访问</td></tr><tr><td><code>private</code></td><td>仅限当前类可访问</td></tr><tr><td>默认不写</td><td><strong>同包</strong>内可访问</td></tr><tr><td><code>protected</code></td><td><strong>同包</strong> 或 <strong>子类</strong>可访问</td></tr></tbody></table></li></ul><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li><p>对于<strong>类</strong>：</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>final</code></td><td>表示类不可继承</td></tr><tr><td><code>abstract</code></td><td>表示类是抽象类，不能实例化</td></tr></tbody></table></li><li><p>对于<strong>属性和方法</strong>：</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>final</code></td><td>属性和方法不能被重写、修改</td></tr><tr><td><code>static</code></td><td>属性方法属于类，而不是实例</td></tr><tr><td><code>abstract</code></td><td>只能在抽象类的抽象方法中使用，方法没有主体</td></tr><tr><td><code>transient</code></td><td>属性和方法不会被序列化</td></tr><tr><td><code>synchronized</code></td><td>方法一次只能由一个线程访问</td></tr><tr><td><code>volatile</code></td><td>属性的值不在线程本地缓存，而是始终从“主内存”读取</td></tr></tbody></table></li></ul><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p><strong>导入类：</strong><code>import java.util.Scanner;</code></p><p><strong>导入整个包：</strong><code>import java.util.*;</code>（不包括子包的 <code>class</code>）</p><p>**命名：**倒置域名</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>**类作用域：**在整个类中可访问</p><p>**方法作用域：**只能在该方法中访问</p><p>**块作用域：**变量只能在块内访问</p><p>**循环作用域：**变量只能在循环体内访问</p><p>**包作用域：**同包内可访问（没用任何修饰符 <code>public</code>、<code>private</code>、<code>protected</code>）</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装：确保对用户敏感的数据进行隐藏</p><ul><li><code>private</code>：声明变量&#x2F;属性（只能在同一个类中访问，外部类无权访问）</li><li><code>Get</code>、<code>Set</code> 方法：访问、更新 <code>private</code> 变量</li></ul><h3 id="Get-Set"><a href="#Get-Set" class="headerlink" title="Get Set"></a>Get Set</h3><p><code>get</code> 方法返回变量值，<code>set</code> 方法设置值</p><p>两者的语法是它们都以 <code>get</code> 或 <code>set</code> 开头，后跟变量的名称，第一个字母为大写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name; <span class="comment">// private = restricted access</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Getter</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setter</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String newName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = newName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    myObj.name = <span class="string">&quot;John&quot;</span>;  <span class="comment">// error</span></span><br><span class="line">    System.out.println(myObj.name); <span class="comment">// error </span></span><br><span class="line">    myObj.setName(<span class="string">&quot;John&quot;</span>); <span class="comment">// Set the value of the name variable to &quot;John&quot;</span></span><br><span class="line">    System.out.println(myObj.getName());</span><br><span class="line">    <span class="comment">// Outputs &quot;John&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><ul><li>更好地控制类属性和方法</li><li>类属性可以是<strong>只读</strong>的（如果只使用 <code>get</code> 方法），也可以是<strong>只写</strong>的（如果只使用 <code>set</code> 方法）</li><li>灵活：程序员可以更改代码的一部分，而不会影响其他部分</li><li>提高数据安全性</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><em><strong>extends：</strong></em></p><ul><li>子类：从另一个类继承的类</li><li>父类：被继承的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="string">&quot;Ford&quot;</span>;        <span class="comment">// Vehicle attribute</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">honk</span><span class="params">()</span> &#123;                    <span class="comment">// Vehicle method</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Tuut, tuut!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">modelName</span> <span class="operator">=</span> <span class="string">&quot;Mustang&quot;</span>;    <span class="comment">// Car attribute</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a myCar object</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">myCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the honk() method (from the Vehicle class) on the myCar object</span></span><br><span class="line">    myCar.honk();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class</span></span><br><span class="line">    System.out.println(myCar.brand + <span class="string">&quot; &quot;</span> + myCar.modelName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修饰符：</strong></p><ul><li><code>protected</code>：子类无法访问父类的字段、方法</li><li><code>protected</code>：子类可访问</li><li><code>final</code>：其他类无法继承</li></ul><p><strong>super：</strong></p><ol><li><p>子类引用父类的字段</p></li><li><p>父类没有默认构造方法，子类必须显式调用 <code>super</code> 并给出参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age); <span class="comment">// 调用父类的构造方法Person(String, int)</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>向上转型：</strong><code>Person p = new Student();</code></p><ol><li><code>p</code> 是 <code>Person</code> 类型的引用变量，指向 <code>Student</code> 对象（实例）</li><li>编译时是 <code>Person</code>，运行时是 <code>Student</code></li></ol><p><strong>向下转型：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(); <span class="comment">// upcasting, ok</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) p1; <span class="comment">// ok</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) p2; <span class="comment">// runtime error! ClassCastException!</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Person</code> 类型 <code>p1</code> 实际指向 <code>Student</code> 实例：成功</p></li><li><p><code>Person</code> 类型变量 <code>p2</code> 实际指向 <code>Person</code> 实例：失败，子类功能比父类多</p></li></ul><p>**instanceof：**判断变量指向的实例是否是指定类型，或者这个类型的子类，若是可直接转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">            <span class="comment">// 可以直接使用变量s:</span></span><br><span class="line">            System.out.println(s.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p><strong>重写 <em>@override：</em></strong></p><ol><li>方法名相同</li><li>参数列表相同</li><li>返回类型相同</li></ol><p>**多态：**真正执行的方法取决于运行时期实际类型的方法</p><p><strong>重写 vs 重载：</strong></p><p>重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MathProcessor</span> <span class="keyword">extends</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;  <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] ints)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Object[] objs)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><p><strong>abstract：</strong></p><ul><li>**抽象类：**不能创建对象，只能继承（可同时拥有抽象，普通方法、字段）</li><li>**抽象方法：**只能在抽象类中使用，子类必须全部重写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>**接口：**没有字段，所有方法都是抽象方法的抽象类（默认 <code>public abstract</code> 可不写）</p><p><strong>具体实例实现接口：</strong><code>implements</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口继承：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**default 方法：**具体实现类可以不用重写 <code>default</code> 方法</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类-1"><a href="#内部类-1" class="headerlink" title="内部类"></a>内部类</h2><p>要实例化内部类，需要先创建外部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(<span class="string">&quot;Nested&quot;</span>); <span class="comment">// 实例化一个Outer</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">// 实例化一个Inner</span></span><br><span class="line">        inner.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Outer(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + Outer.<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类可以访问外部类的 <code>private</code> 字段</p><h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(<span class="string">&quot;Nested&quot;</span>);</span><br><span class="line">        outer.asyncHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Outer(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">asyncHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello, &quot;</span> + Outer.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p><code>static</code>：可以直接创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">StaticNested</span> <span class="variable">sn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.StaticNested();</span><br><span class="line">        sn.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;OUTER&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Outer(String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticNested</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + Outer.NAME);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>特点：</strong></p><ol><li>引用类型，本身是 <code>class</code>，但可以 <code>&quot;...&quot;</code> 定义</li><li>不可变：更改是在新空间创建新字符串</li></ol><p><strong>比较：</strong><code>.equals()</code></p><p><strong>包含：</strong><code>.contains()</code></p><p><strong>去除首尾空白字符：</strong></p><ul><li><p><code>.trim()</code> （<code>\t</code>，<code>\r</code>，<code>\n</code>）</p></li><li><p><code>.strip()</code></p></li></ul><p><strong>是否为空：</strong><code>isEmpty()</code></p><p><strong>替换：</strong><code>s.replace(&#39;l&#39;, &#39;w&#39;);</code></p><p><strong>分割：</strong><code>split()</code></p><p><strong>拼接：</strong><code>join(&quot;...&quot;, arr);</code></p><p><strong>格式化：</strong></p><ul><li><code>formatted()</code></li><li><code>format()</code></li></ul><p><strong>类型转换：</strong></p><ul><li>转换为字符串：<code>String.valueOf()</code></li><li>转换为其他类型：<code>Integer.parseInt</code>，<code>Boolean.parseBoolean</code></li><li>转换为 <code>char[]</code>：<code>.toCharArray()</code></li></ul><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p><strong>创建：</strong><code>StringBuilder sb = new StringBuilder();</code></p><p><strong>添加：</strong><code>.append()</code></p><p><strong>转换为字符串：</strong><code>.toString()</code></p><p><strong>插入：</strong><code>.insert(index, &quot;...&quot;)</code></p><p><strong>可进行链式操作</strong></p><h3 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h3><p><strong>拼接：</strong><code> var sj = new StringJoiner(&quot;, &quot;, &quot;Hello &quot;, &quot;!&quot;);</code>（中间，头，尾）</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li><p>基本类型 -&gt; 引用类型</p></li><li><p>不变类</p></li></ul><table><thead><tr><th>基本类型</th><th>引用类型</th></tr></thead><tbody><tr><td>boolean</td><td>java.lang.Boolean</td></tr><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr></tbody></table><p><strong>比较：</strong><code>.equals()</code></p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>**JavaBean：**如果读写方法符合以下命名规范，那么这种 <code>class</code> 被称为 <code>JavaBean</code> （封装）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读方法:</span></span><br><span class="line"><span class="keyword">public</span> Type <span class="title function_">getXyz</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 写方法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXyz</span><span class="params">(Type value)</span></span><br></pre></td></tr></table></figure><p><strong>枚举 JavaBean 的属性：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BeanInfo</span> <span class="variable">info</span> <span class="operator">=</span> Introspector.getBeanInfo(Person.class);</span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor pd : info.getPropertyDescriptors()) &#123;</span><br><span class="line">            System.out.println(pd.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + pd.getReadMethod());</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + pd.getWriteMethod());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p><em><strong>enum：</strong></em><code>enum</code> 类型就是 <code>class</code> （引用类型）</p><ul><li>继承自<code>java.lang.Enum</code>，且无法被继承</li><li>只能定义 <code>enum</code> 的实例，无法通过 <code>new</code> 创建</li><li>定义的每个实例都是引用类型的唯一实例</li><li>可用于 <code>switch</code> 语句</li></ul><p><strong>创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出的 <code>class</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Color</span> <span class="keyword">extends</span> <span class="title class_">Enum</span> &#123; <span class="comment">// 继承自Enum，标记为final class</span></span><br><span class="line">    <span class="comment">// 每个实例均为全局唯一:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">    <span class="comment">// private构造方法，确保外部无法调用new操作符:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较：</strong><code>==</code> （不像其他引用类型只能用 <code>equals()</code> ）</p><p><strong>常量名：</strong><code>String s = Weekday.SUN.name(); // &quot;SUN&quot;</code></p><p><strong>常量顺序：</strong><code>int n = Weekday.MON.ordinal(); // 1</code> （从0开始）</p><p><strong>添加字段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Weekday</span> &#123;</span><br><span class="line">    MON(<span class="number">1</span>, <span class="string">&quot;星期一&quot;</span>), TUE(<span class="number">2</span>, <span class="string">&quot;星期二&quot;</span>), WED(<span class="number">3</span>, <span class="string">&quot;星期三&quot;</span>), THU(<span class="number">4</span>, <span class="string">&quot;星期四&quot;</span>), FRI(<span class="number">5</span>, <span class="string">&quot;星期五&quot;</span>), SAT(<span class="number">6</span>, <span class="string">&quot;星期六&quot;</span>), SUN(<span class="number">0</span>, <span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> dayValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String chinese;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Weekday</span><span class="params">(<span class="type">int</span> dayValue, String chinese)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dayValue = dayValue;</span><br><span class="line">        <span class="built_in">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.chinese;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记录类"><a href="#记录类" class="headerlink" title="记录类"></a>记录类</h2><p><em><strong>record：</strong></em></p><ul><li>用 <code>final</code> 修饰class以及每个字段（实现不变类）</li><li>自动创建构造方法，重写 <code>toString()</code>、<code>equals()</code>、<code>hashCode()</code></li><li>不能直接从 <code>Record</code> 派生，只能通过关键词由编译器实现继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">Record</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">x</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">y</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Point[x=%s, y=%s]&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p><strong>创建：</strong><code>BigInteger bi = new BigInteger(&quot;1234567890&quot;);</code></p><p>**运算：**只能用实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;12345678901234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">sum</span> <span class="operator">=</span> i1.add(i2); <span class="comment">// 12345678902469135780</span></span><br></pre></td></tr></table></figure><p><strong>转换为基本类型：</strong></p><ul><li>转换为<code>byte</code>：<code>byteValue()</code></li><li>转换为<code>short</code>：<code>shortValue()</code></li><li>转换为<code>int</code>：<code>intValue()</code></li><li>转换为<code>long</code>：<code>longValue()</code></li><li>转换为<code>float</code>：<code>floatValue()</code></li><li>转换为<code>double</code>：<code>doubleValue()</code></li></ul><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p><strong>创建：</strong><code>BigDecimal bd = new BigDecimal(&quot;123.4567&quot;);</code></p><p><strong>小数位数：</strong><code>.scale()</code></p><p><strong>去掉末尾0：</strong><code>stripTrailingZeros()</code></p><p><strong>比较：</strong></p><ul><li><code>compareTo()</code>：比较大小</li><li><code>equals()</code>：比较大小和 <code>scale()</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 (Java)</title>
      <link href="/2025/02/03/2025-2-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Java/"/>
      <url>/2025/02/03/2025-2-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>ArrayList</code> 类：一个可调整大小的数组，在 <code>java.util</code> 包中</p><p>内置数组和  <code>ArrayList</code> 的区别：</p><ol><li>内置数组的大小不能修改（如果要在数组中添加或删除元素，则必须创建一个新的）</li><li>While 元素可以随时在 <code>ArrayList</code> 中添加和删除</li></ol><p><strong>创建</strong></p><p>创建一个名为 <strong>cars</strong> 的 <code>ArrayList</code> 对象，该对象将存储字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// import the ArrayList class</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">// Create an ArrayList object</span></span><br></pre></td></tr></table></figure><p><strong>添加</strong></p><ul><li><code>add()</code></li><li>索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    cars.add(<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Ford&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cars.add(<span class="number">0</span>, <span class="string">&quot;Mazda&quot;</span>); <span class="comment">// Insert element at the beginning of the list (0)</span></span><br><span class="line"></span><br><span class="line">    System.out.println(cars);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问：</strong><code>get()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>更改：</strong><code>set()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.set(<span class="number">0</span>, <span class="string">&quot;Opel&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>删除：</strong><code>remove()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>删除所有元素：</strong><code>.clear()</code></p><p><strong>大小：</strong><code>.size()</code></p><p><strong>遍历：</strong></p><ul><li><p>for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cars.size(); i++) &#123;</span><br><span class="line">      System.out.println(cars.get(i));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>for - each</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String i : cars) &#123;</span><br><span class="line">      System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>其他类型：<strong>ArrayList 中的元素实际上是</strong>对象</strong></p><p>Java 中的 String 是一个对象（不是原始类型），要使用其他类型（如 int），必须指定等效的<a href="https://www.w3schools.com/java/java_wrapper_classes.asp">包装类</a>：<code>Integer</code>。对于其他基元类型，请使用：<code>Boolean</code> 表示布尔值，<code>Character</code> 表示 <code>char</code>， <code>Double</code> 表示 <code>double</code></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>调用<code>java.util</code> 包中的 <code>Collections</code> 类，其中包括用于按字母或数字顺序排序的 <code>sort()</code> 方法：默认<strong>升序</strong>（<code>reverseOrder()</code>降序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  <span class="comment">// Import the Collections class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; myNumbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    myNumbers.add(<span class="number">33</span>);</span><br><span class="line">    myNumbers.add(<span class="number">15</span>);</span><br><span class="line">    myNumbers.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    Collections.sort(myNumbers);  <span class="comment">// Sort myNumbers</span></span><br><span class="line">Collections.sort(myNumbers, Collections.reverseOrder()); <span class="comment">// Sort myNumbers</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : myNumbers) &#123;</span><br><span class="line">      System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><code>LinkedList</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import the LinkedList class</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    LinkedList&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">    cars.add(<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Ford&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Mazda&quot;</span>);</span><br><span class="line">    System.out.println(cars);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkeList 和 ArrayList：</strong></p><ul><li><code>LinkedList</code> 类是一个集合，可以包含许多相同类型的对象，就像 <code>ArrayList</code> </li><li><code>LinkedList</code> 类具有与 <code>ArrayList</code> 类相同的所有方法，因为它们都实现了 <code>List</code> 接口。这意味着您可以以相同的方式添加项目、更改项目、删除项目和清除列表。</li><li>虽然 <code>ArrayList</code> 类和 <code>LinkedList</code> 类可以以相同的方式使用，但它们的构建方式截然不同</li></ul><p><strong>工作原理：</strong></p><ul><li><code>ArrayList</code> 类中有一个常规数组。添加元素时，会将其放入数组中。如果数组不够大，则会创建一个新的、更大的新数组来替换旧数组，并删除旧数组。</li><li><code>LinkedList</code> 将其项存储在 “容器” 中。该列表具有指向第一个容器的链接，每个容器具有指向列表中下一个容器的链接。若要将元素添加到列表中，请将该元素放入新容器中，并且该容器将链接到列表中的其他容器之一。</li><li>使用 <code>ArrayList</code> <strong>存储和访问</strong>数据，使用 <code>LinkedList</code> <strong>操作</strong>数据</li></ul><p><strong>方法：</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>addFirst()</td><td>在 <strong>链表头部</strong> 添加元素</td></tr><tr><td>addLast()</td><td>在 <strong>链表尾部</strong> 添加元素</td></tr><tr><td>removeFirst()</td><td><strong>删除</strong> 链表头部元素，并返回它</td></tr><tr><td>removeLast()</td><td><strong>删除</strong> 链表尾部元素，并返回它</td></tr><tr><td>getFirst()</td><td><strong>获取</strong> 链表头部元素，但<strong>不删除</strong></td></tr><tr><td>getLast()</td><td><strong>获取</strong> 链表尾部元素，但<strong>不删除</strong></td></tr></tbody></table><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p><code>HashMap</code>：将数据以键值对的方式存储</p><p><strong>创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.HashMap; <span class="comment">// import the HashMap class</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; capitalCities = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br></pre></td></tr></table></figure><p><strong>添加：</strong><code>put()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add keys and values (Country, City)</span></span><br><span class="line">    capitalCities.put(<span class="string">&quot;England&quot;</span>, <span class="string">&quot;London&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>访问：</strong><code>get()</code> - 访问 <code>HashMap</code> 中的值 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.get(<span class="string">&quot;England&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>删除：</strong><code>remove()</code> 并引用键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capitalCities.remove(<span class="string">&quot;England&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>删除所有数据：</strong><code>.clear()</code></p><p><strong>大小：</strong><code>.size()</code></p><p>**遍历：**使用 for - each 循环</p><ul><li>只需要键：<code>keySet()</code></li><li>只需要值：<code>values()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print keys</span></span><br><span class="line"><span class="keyword">for</span> (String i : capitalCities.keySet()) &#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print values</span></span><br><span class="line"><span class="keyword">for</span> (String i : capitalCities.values()) &#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print keys and values</span></span><br><span class="line"><span class="keyword">for</span> (String i : capitalCities.keySet()) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + capitalCities.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**其他类型：**HashMap 中的键和值实际上是对象，要使用其他类型（如 int），必须指定等效的<a href="https://www.w3schools.com/java/java_wrapper_classes.asp">包装类</a>（同ArrayList）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import the HashMap class</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a HashMap object called people</span></span><br><span class="line">    HashMap&lt;String, Integer&gt; people = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add keys and values (Name, Age)</span></span><br><span class="line">    people.put(<span class="string">&quot;John&quot;</span>, <span class="number">32</span>);</span><br><span class="line">    people.put(<span class="string">&quot;Steve&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    people.put(<span class="string">&quot;Angie&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String i : people.keySet()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + people.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希集"><a href="#哈希集" class="headerlink" title="哈希集"></a>哈希集</h1><p>HashSet 是数据的集合，其中每个数据都是唯一的，它位于 <code>java.util</code> 包：</p><p><strong>创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet; <span class="comment">// Import the HashSet class</span></span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><p><strong>添加：</strong><code>add()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import the HashSet class</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    cars.add(<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Ford&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Mazda&quot;</span>);</span><br><span class="line">    System.out.println(cars);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在上面的示例中，即使 BMW 被添加了两次，它也只在集合中出现一次，因为集合中的每个数据都必须是唯一的。</p><p><strong>检查是否存在：</strong><code>contains()</code></p><p><strong>删除：</strong><code>remove()</code></p><p><strong>删除所有数据：</strong><code>clear()</code></p><p><strong>大小：</strong><code>size()</code></p><p>**遍历：**for - each 循环</p><p>**其他类型：**HashSet 中的项目实际上是对象，同 ArrayList</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p><code>Iterator</code>：一个可用于循环遍历集合（ArrayList、HashSet）的对象，从 <code>java.util</code> 包中导入</p><p><strong>获取 Iterator：</strong><code>iterator()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import the ArrayList class and the Iterator class</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make a collection</span></span><br><span class="line">    ArrayList&lt;String&gt; cars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    cars.add(<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Ford&quot;</span>);</span><br><span class="line">    cars.add(<span class="string">&quot;Mazda&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the iterator</span></span><br><span class="line">    Iterator&lt;String&gt; it = cars.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the first item</span></span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**遍历集合：**用 Iterator 的<code>hasNext()</code> 和 <code>next()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">  System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除：</strong><code>remove()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    numbers.add(<span class="number">12</span>);</span><br><span class="line">    numbers.add(<span class="number">8</span>);</span><br><span class="line">    numbers.add(<span class="number">2</span>);</span><br><span class="line">    numbers.add(<span class="number">23</span>);</span><br><span class="line">    Iterator&lt;Integer&gt; it = numbers.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> it.next();</span><br><span class="line">      <span class="keyword">if</span>(i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(numbers);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能使用 for 循环或 for - each 循环：因为它们步能在遍历集合同时改变集合大小</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>包装类提供了一种将原始数据类型（<code>int</code>、<code>boolean</code> 等）用作对象的方法</p><table><thead><tr><th>原始数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>有时必须使用包装类，如在使用 Collection 对象时，例如 <code>ArrayList</code>，其中不能使用原始类型（列表只能存储对象）</p><p><strong>创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">myInt</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">myDouble</span> <span class="operator">=</span> <span class="number">5.99</span>;</span><br><span class="line">    <span class="type">Character</span> <span class="variable">myChar</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问：</strong></p><ul><li>直接</li><li><code>xxxValue()</code></li><li><code>toString</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(myInt);</span><br><span class="line">System.out.println(myInt.intValue());</span><br><span class="line"><span class="type">String</span> <span class="variable">myString</span> <span class="operator">=</span> myInt.toString();</span><br><span class="line">System.out.println(myString.length());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-ubuntu安装</title>
      <link href="/2025/01/30/2025-1-30-Linux-ubuntu%E5%AE%89%E8%A3%85/"/>
      <url>/2025/01/30/2025-1-30-Linux-ubuntu%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>也是开启了我的 Windows-Linux双系统 哈哈哈</p><p>指导视频：</p><p>[指导视频](<a href="https://www.bilibili.com/video/BV1Cc41127B9?spm_id_from=333.788.videopod.episodes&vd_source=576643da9ada88d09d6bb8cd5b9f4066">Windows11 安装 Ubuntu 避坑指南_哔哩哔哩_bilibili</a>)</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><ul><li><p>第一次装会很费力，遇到问题：</p><ol><li><p>b站找视频：（通用的安装教程、针对你笔记本品牌型号的操作视频  都要看看）</p></li><li><p>b站视频下方的评论区：说不定有大神是你的笔记本型号的，会在评论区发布一些针对你笔记本的tips</p><p>（上方指导视频下方有个用华硕的大神评论帮助了我很多嘻嘻）</p></li><li><p>CSDN搜一搜（不喜欢掘金，不想用StackOverflow哈哈哈）</p></li><li><p>问chatgpt&#x2F;claude&#x2F;deepseek&#x2F;通义千问&#x2F;豆包&#x2F;kimi</p></li></ol></li><li><p>为什么要装Linux：</p><p>下面会提到哦！</p><p>不过计算机专业的学生迟早都要接触Linux的啦，无论是做开发还是算法，Linux在开源和性能方面一直很强</p></li><li><p>真的不行就去电脑市场装吧，电脑变砖我可不负责</p></li><li><p>一些特定的步骤我会用 ‘* ’标注：</p><ol><li>这些步骤可能是安装过程试错出来的</li><li>针对华硕天选5pro</li></ol></li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li><p>笔记本 ：</p><ul><li>我用的是华硕天选5pro（Windows11）</li></ul></li><li><p>U盘：</p><ul><li><p>牌子：金士顿或者闪迪（牌子太烂可能在写入文件&#x2F;格式化的时候U盘直接报废）</p></li><li><p>大于8GB</p></li><li><p>我用的64GB，因为之后可能还会往U盘里装文件</p></li></ul></li></ol><h1 id="小提示"><a href="#小提示" class="headerlink" title="*小提示"></a>*小提示</h1><ol><li><p>Windows机安装Linux有两种方法：</p><ul><li>虚拟机安装</li><li>双系统安装（需要额外准备U盘启动）</li></ul></li><li><p>虚拟机安装：</p><ul><li>优点：简单（额其实装Linux系统都挺麻烦的，坑还多，虚拟机会相对简单些）</li><li>缺点：<ol><li>占用大量内存和CPU（其实2种方法都会占用挺多）</li><li><strong>对外部硬件支持不够好</strong>：如果你想跑深度学习，使用传感器，虚拟机无法充分发挥计算机的性能，效率相对较低</li></ol></li></ul></li><li><p>双系统安装：</p><ul><li>优点：性能相对好</li><li>缺点：<ol><li>操作相对麻烦</li><li>一台电脑同一个时间只能使用一个操作系统，Linux和Windows切换需要重启</li></ol></li></ul></li><li><p>我采用的使双系统安装，一方面使之后做项目导师会让我跑深度学习相关的，另一方面是目前我正在学习《视觉SLAM十四将》，书中比较推荐双系统</p></li></ol><h1 id="下载Ubuntu安装映像文件"><a href="#下载Ubuntu安装映像文件" class="headerlink" title="下载Ubuntu安装映像文件"></a>下载Ubuntu安装映像文件</h1><ol><li><p>直接搜索Ubuntu即可</p></li><li><p>或者点链接：[下载链接](<a href="https://cn.ubuntu.com/download/desktop">下载Ubuntu桌面系统 | Ubuntu</a>)</p></li></ol><p><strong>注意：</strong></p><ul><li>Ubuntu会一直更新，下载LTS版本即可</li><li>文件比较大，几个GB，如果下载速度慢请使用代理（魔法）</li></ul><h1 id="制作Ubuntu安装盘"><a href="#制作Ubuntu安装盘" class="headerlink" title="制作Ubuntu安装盘"></a>制作Ubuntu安装盘</h1><p>参考视频：(Bilibili)</p><p><a href="%5Bwin11%E4%B8%8B%E7%94%A8rufus%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1BP411577g/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066)">链接1</a></p><p>[链接2](<a href="https://www.bilibili.com/video/BV1wo4y177Gk?spm_id_from=333.788.videopod.sections&vd_source=576643da9ada88d09d6bb8cd5b9f4066">手把手教你安装双系统 windows11+ubuntu 22.04(1)_哔哩哔哩_bilibili</a>)</p><h2 id="下载Rufus"><a href="#下载Rufus" class="headerlink" title="*下载Rufus"></a>*下载Rufus</h2><p><em><strong>建议用Rufus写入文件，我之前用了win32diskimager写不进去</strong></em></p><p>直接搜索“rufus下载”：[链接](<a href="https://rufus.ie/zh/">Rufus - 轻松创建 USB 启动盘</a>)</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p><img src="/../img/screenshot/rufus.png" alt="Rufus写入"></p><ul><li>设备：U盘名称（或者其他的，总之不是你电脑上的CD什么盘）</li><li>引导类型选择：刚刚下载的Ubuntu映像文件</li><li>分区类型：GPT</li><li>文件系统：NTFS</li></ul><h1 id="关闭BitLocker"><a href="#关闭BitLocker" class="headerlink" title="关闭BitLocker"></a>关闭BitLocker</h1><p><em><strong>最怕的事情莫过于在操作时突然跳出BitLocker让你输入一串你不知道的密码</strong></em></p><p>BitLocker原本是用于电脑丢失时防止他人强行入侵系统窃取信息</p><p>但是如果你不自己查阅Microsoft官网给你的BitLocker并记住，BitLocker相当于是阻止你装Linux</p><p><em><strong>如果你不考虑丢电脑的事情，建议拿到电脑就关闭BitLocker，因为随着电脑文件越来越多，BitLocker解密的时间会越来越长</strong></em></p><h1 id="关闭独显直连"><a href="#关闭独显直连" class="headerlink" title="关闭独显直连"></a>关闭独显直连</h1><p>我没有进行这一步操作，没有出现什么问题。</p><p>这步操作属于小部分笔记本电脑的“坑”，如果在后面的操作出现问题，那可能是这里出现了问题</p><h1 id="压缩Windows分区"><a href="#压缩Windows分区" class="headerlink" title="压缩Windows分区"></a>压缩Windows分区</h1><p>我从D盘压缩了200GB</p><h1 id="开启安全引导（天选5pro）"><a href="#开启安全引导（天选5pro）" class="headerlink" title="*开启安全引导（天选5pro）"></a>*开启安全引导（天选5pro）</h1><ul><li><strong>不太确定其他电脑需不需这一步，天选5pro需要，否则之后的操作电脑可能会蓝屏</strong></li><li>操作链接<a href="https://blog.csdn.net/Kr_Krypton/article/details/135961324?fromshare=blogdetail&sharetype=blogdetail&sharerId=135961324&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">操作链接：第6、8步骤</a></li></ul><h1 id="关闭Secure-Boot安全启动"><a href="#关闭Secure-Boot安全启动" class="headerlink" title="*关闭Secure Boot安全启动"></a>*关闭Secure Boot安全启动</h1><ul><li><strong>很重要！不关闭的话就等着电脑蓝屏吧（因为我的电脑就蓝屏了呜呜）</strong></li><li>不同电脑BIOS操作不同，自己搜索对应视频一步一步来</li></ul><p>视频链接：[链接（天选5pro）](<a href="https://www.bilibili.com/video/BV1hR4y1p7tP/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066">华硕笔记本电脑开启&#x2F;关闭安全启动（Secure boot）方法；快速确认自己电脑TPM版本！_哔哩哔哩_bilibili</a>)</p><h2 id="华硕天选5pro操作"><a href="#华硕天选5pro操作" class="headerlink" title="华硕天选5pro操作"></a>华硕天选5pro操作</h2><ol><li>重启电脑，在快要跳出开机的logo时，疯狂按左上角ESC进入BIOS模式</li><li>进入 -高级设置-安全：<ul><li>你会发现很逆天的事情：安全启动开启，还没法关闭</li></ul></li><li>进入密钥管理（Key Management）：<ul><li>删除Platform Key（5pro是最上面的）</li><li>其他的也可以删除，反正我把第2个也删除了</li></ul></li><li>按F10保存并退出，重启时重复步骤1，发现安全启动关闭</li><li><em><strong>等到完全安装好后，可回到BIOS这里，把密钥回复出厂设置，这样删除的密钥就可以回来啦</strong></em></li><li><em><strong>完全安装好后，可以开启Secure Boot安全启动</strong></em></li></ol><h1 id="关闭Intel-RST（切换为AHCI）"><a href="#关闭Intel-RST（切换为AHCI）" class="headerlink" title="*关闭Intel RST（切换为AHCI）"></a>*关闭Intel RST（切换为AHCI）</h1><ul><li><strong>也很重要，否则Windows和Linux无法兼容</strong></li><li><em><strong>完全安装好后，也要保持关闭（切换为AHCI）！！！</strong></em></li><li>操作链接<a href="https://blog.csdn.net/Kr_Krypton/article/details/135961324?fromshare=blogdetail&sharetype=blogdetail&sharerId=135961324&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">操作链接：第6、8步骤</a></li></ul><h1 id="BIOS设置U盘引导"><a href="#BIOS设置U盘引导" class="headerlink" title="BIOS设置U盘引导"></a>BIOS设置U盘引导</h1><p>把U盘选项拖到Windows选项上面即可：</p><p><img src="/../img/screenshot/BIOS-U.png" alt="U盘引导"></p><h1 id="第一次启动U盘"><a href="#第一次启动U盘" class="headerlink" title="第一次启动U盘"></a>第一次启动U盘</h1><p>前面设置好后，按F10重启电脑</p><ul><li>无法重启 &#x2F; 卡住了，长按电源键强制重启</li><li>在logo页面一直跳动，拔掉U盘等待 &#x2F; 强制重启</li></ul><h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><p>参考视频操作即可：<a href="%5B%E5%AE%89%E8%A3%85Ubuntu%E7%9A%84%E8%BF%87%E7%A8%8B%E6%AD%A5%E9%AA%A4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1Cc41127B9?spm_id_from=333.788.videopod.episodes&vd_source=576643da9ada88d09d6bb8cd5b9f4066&p=13)">安装Ubuntu</a></p><ul><li><p>不联网实测会快一些</p></li><li><p>这个视频的操作算比较简单的了，也没有什么坑，如果碰到坑的话大概率是前面某个步骤在你的笔记本上没设置好。</p></li></ul><h1 id="连接Wi-Fi，更换国内镜像源"><a href="#连接Wi-Fi，更换国内镜像源" class="headerlink" title="连接Wi-Fi，更换国内镜像源"></a>连接Wi-Fi，更换国内镜像源</h1><ul><li>按照上面视频做就好</li><li>个人感觉设置后速度还是很慢，我挂代理了（还得是魔法）</li></ul><h1 id="系统时间同步"><a href="#系统时间同步" class="headerlink" title="系统时间同步"></a>系统时间同步</h1><p><strong>安装双系统后你会发现切换系统后，显示时间会不准确（比如慢8h）</strong></p><p>操作指南：[视频连接](<a href="https://www.bilibili.com/video/BV1kk4y1j7kY/?spm_id_from=333.1391.0.0&vd_source=576643da9ada88d09d6bb8cd5b9f4066">Linux WIndows双系统时间问题_哔哩哔哩_bilibili</a>)</p><ul><li><p>主要就是一行代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure><p>这行代码是把调整Ubuntu的时间调整正确，不改变Windows时间</p></li><li><p>如果切换回Windows发现时间不正确，进入Windows“日期和时间设置”-点击“立即同步”，</p><p>重新同步下Windows时间即可</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>如果感觉ubuntu网页、软件界面太小（字体太小，行高太小）</p><p>用快捷键：</p><p><code>ctrl + =</code>：增大</p><p><code>ctrl + -</code>：减小</p><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><ul><li>感觉不是clash的问题（clash verge必须下载linux版本debian系）</li><li>可能和机场的兼容性有关，狗狗机场的节点好像不太使用linux ubuntu</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly 个人博客</title>
      <link href="/2025/01/29/2025-1-29-hexo-butterfly-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/01/29/2025-1-29-hexo-butterfly-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="美化教程"><a href="#美化教程" class="headerlink" title="美化教程"></a>美化教程</h1><p><em>一些美化教程 &amp; 一些博主：</em></p><p><a href="https://butterfly.zhheo.com/">首页 | Butterfly主题美化教程</a></p><p><a href="https://www.fomal.cc/">Fomalhaut🥝</a></p><h1 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1><p>我的 git 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.email=xiaojinghuai33@gmail.com</span><br><span class="line">user.name=zerd1y</span><br></pre></td></tr></table></figure><h1 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h1><ol><li><p>本地编辑完，本地部署3连：</p><ul><li>hexo clean</li><li>hexo generate</li><li>hexo server</li></ul></li><li><p>部署到vercel上自己的服务器：</p><p>先在个人blog文件夹用git bash打开</p><ul><li>hexo clean</li><li>hexo generate</li><li>hexo deploy</li></ul></li><li><p>background图片部署：</p><ul><li>用网页上的图片（不要用本地的相对地址，绝对地址）</li><li>直接在background后复制链接，不要在链接外面加url()</li></ul></li><li><p><code>hexo deploy</code>部署过程停滞不前</p><ul><li><p>可能是网络原因</p></li><li><p>现在我是用https来执行git操作，不用ssh执行了。在_config,yml中完成deploy配置修改</p></li><li><p>原来：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:zerd1y/zerd1y.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>现在：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/zerd1y/zerd1y.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h1><p><strong>此处讨论仅仅在Typora中创建博文，图片导入的形式</strong></p><ol><li><p>纯Markdown - 相对路径：</p><ul><li>自己手打，我的路径一般 <code>../img/screenshot/...</code> （<code>source</code> 文件下的相对路径）</li><li><strong>如果你的博文名含中文，只能用这种方法</strong></li></ul></li><li><p>纯HTML：</p><ul><li><p><strong>设置缩放</strong>，不需要的话改成 <code>100%</code></p></li><li><p><strong>这种方式，博文名必须是非中文</strong>，因为生成 <code>public</code> 渲染文件时中文路径会转换成乱码导致无法渲染</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识SLAM</title>
      <link href="/2025/01/27/2025-1-27-%E5%88%9D%E8%AF%86SLAM/"/>
      <url>/2025/01/27/2025-1-27-%E5%88%9D%E8%AF%86SLAM/</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/screenshot/slambook2_2-0.png" alt="初识SLAM"></p><h1 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h1><h2 id="单目相机"><a href="#单目相机" class="headerlink" title="单目相机"></a>单目相机</h2><ul><li><p>优点：结构简单，成本低</p></li><li><p>缺点：无法计算 深度 + 尺度</p><p>无法计算物体与相机间的距离，单目SLAM估计的轨迹和地图与真实值相差一个因子</p></li></ul><h2 id="双目相机"><a href="#双目相机" class="headerlink" title="双目相机"></a>双目相机</h2><ul><li>优点：克服深度问题（距离）</li><li>缺点：计算量大</li></ul><h2 id="深度相机（RGB-D相机）"><a href="#深度相机（RGB-D相机）" class="headerlink" title="深度相机（RGB-D相机）"></a>深度相机（RGB-D相机）</h2><ul><li>优点：节省计算资源（通过红外结构光&#x2F;Time-of-Flight（ToF））</li><li>缺点：测量范围窄，噪声大，视野小，易受日光干扰，无法测量透射材质</li></ul><h1 id="视觉SLAM的目标"><a href="#视觉SLAM的目标" class="headerlink" title="视觉SLAM的目标"></a>视觉SLAM的目标</h1><p><em><strong>通过一些图像，进行定位和地图构建</strong></em></p><h1 id="经典视觉SLAM框架"><a href="#经典视觉SLAM框架" class="headerlink" title="经典视觉SLAM框架"></a>经典视觉SLAM框架</h1><p><img src="/../img/screenshot/SLAM_framework.png" alt="经典视觉SLAM框架"></p><h2 id="视觉里程计（前端）"><a href="#视觉里程计（前端）" class="headerlink" title="视觉里程计（前端）"></a>视觉里程计（前端）</h2><ul><li>目的：通过相邻帧间的图像，估计相机运动，回复场景的空间结构</li><li>问题：出现累计漂移（每次估计有误差）</li><li>解决：后端优化，回环检测</li></ul><h2 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h2><ul><li><p>目的：处理SLAM过程中的噪声问题</p><p>①如何从带有噪声的数据中估计整个系统的状态</p><p>②这个状态估计的不确定性有多大（最大后验概率估计）</p></li><li><p>本质：对运动主体自身和周围环境空间不确定性的估计</p></li></ul><h2 id="回环检测"><a href="#回环检测" class="headerlink" title="回环检测"></a>回环检测</h2><ul><li>目的：解决位置估计随时间漂移的问题</li><li>方法：让机器人具有识别到过的场景的能力（判断图像相似性），然后修正</li></ul><h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><h3 id="度量地图"><a href="#度量地图" class="headerlink" title="度量地图"></a>度量地图</h3><ul><li>特点：精确地表示地图中物体地的位置关系</li><li>缺点：耗费大量存储空间，许多细节无用，一致性问题</li></ul><h3 id="拓扑地图"><a href="#拓扑地图" class="headerlink" title="拓扑地图"></a>拓扑地图</h3><ul><li>特点：强调地图元素之间的关系</li><li>缺点：不擅长表达具有复杂结构的地图</li></ul><h1 id="SLAM问题的数学描述"><a href="#SLAM问题的数学描述" class="headerlink" title="SLAM问题的数学描述"></a>SLAM问题的数学描述</h1><p><img src="/../img/screenshot/SLAM_math_description.png" alt="SLAM问题的数学描述"></p><h2 id="状态估计问题（转化）"><a href="#状态估计问题（转化）" class="headerlink" title="状态估计问题（转化）"></a>状态估计问题（转化）</h2><h3 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h3><ul><li>线性&#x2F;非线性系统</li><li>高斯&#x2F;非高斯系统</li></ul><h3 id="主流优化技术（优化技术明显优于滤波技术）"><a href="#主流优化技术（优化技术明显优于滤波技术）" class="headerlink" title="主流优化技术（优化技术明显优于滤波技术）"></a>主流优化技术（优化技术明显优于滤波技术）</h3><ul><li>图优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初认识Java</title>
      <link href="/2025/01/24/2025-1-24-%E5%88%9D%E8%AF%86Java/"/>
      <url>/2025/01/24/2025-1-24-%E5%88%9D%E8%AF%86Java/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>Java 是一种高级的、面向对象的编程语言，以其可移植性、健壮性和可扩展性而闻名。</p></li><li><p>Java 由 Sun Microsystems（现为 Oracle）开发，遵循“一次编写，随处运行”原则，允许代码在任何具有 Java 虚拟机 （JVM） 的设备上运行。</p></li><li><p>它广泛用于构建大型企业应用程序、Android 移动应用程序和 Web 服务。</p></li><li><p>Java 具有自动内存管理（垃圾回收）、庞大的标准库和强大的安全功能，使其成为后端系统、分布式应用程序和基于云的解决方案的热门选择。</p></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li><p>安装JDK</p></li><li><p>设置环境变量</p></li><li><p>第一个Java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：<code>javac Main.java</code></p><p>运行：<code>java Main</code></p></li><li><p>用IntelliJ IDEA</p></li></ol><p><strong>Java程序的生命周期：</strong></p><ol><li><p>编辑程序</p><p>在文本编辑器中键入程序，以<code>.java</code>扩展名保存</p></li><li><p>编译</p><p>javac编译器：输入 Java 源代码，输出字节码（<strong>独立于机器或平台</strong>），生成<code>.class</code>文件</p></li><li><p>执行字节码</p><p>Java虚拟机（JVM）：输入字节码，输出机器码（0和1），由本地机器的 CPU 执行</p></li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li>每一行代码都必须位于<code>class</code>（类）内</li><li>类名以大写字母开头</li><li>Java 区分大小写</li><li>java 文件的名称必须与类名<strong>匹配</strong></li><li>注释：<ul><li>单行：<code>//</code></li><li>多行：<code>/* */</code></li><li>文档：<code>/** */</code></li></ul></li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li><p><code>System.out.println()</code></p></li><li><p><code>System.out.print()</code> （不换行）</p></li></ul><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>导包：<code>import java.util.Scanner;</code></p><p>创建对象：<code>Scanner scanner = new Scanner(System.in);</code></p><p>读取：<code>String name = scanner.nextLine();</code></p><p>输入类型：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>nextBoolean()</code></td><td>读取一个<code>boolean</code></td></tr><tr><td><code>nextByte()</code></td><td>读取一个 <code>byte</code></td></tr><tr><td><code>nextDouble()</code></td><td>读取一个 <code>double</code></td></tr><tr><td><code>nextFloat()</code></td><td>读取一个 <code>float</code></td></tr><tr><td><code>nextInt()</code></td><td>读取一个 <code>int</code></td></tr><tr><td><code>nextLine()</code></td><td>读取一个 <code>String</code></td></tr><tr><td><code>nextLong()</code></td><td>读取一个 <code>long</code></td></tr><tr><td><code>nextShort()</code></td><td>读取一个 <code>short</code></td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>类型：<code>String</code>、<code>int</code>、<code>float</code>、<code>char</code>、<code>boolean</code>……</p></li><li><p>声明：<code>type variableName = value;</code></p></li><li><p>命名规则：</p><ol><li>可以包含字母、数字、<code>_</code> 和 <code>$</code></li><li>可以 <code>$</code>、<code>_</code>、小写字母开头</li><li>区分大小写</li><li>保留字（如 Java 关键字，如 <code>int</code> 或 <code>boolean</code>）不能用作名称</li></ol></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>基本数据类型：<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>boolean</code>,<code>char</code></li><li>非基本数据类型：<code>String</code>,<code>Array</code>,<code>Class</code></li></ol><table><thead><tr><th>数据类型</th><th>描述</th><th>大小</th></tr></thead><tbody><tr><td>byte</td><td><code>2^7</code>~ <code>2^7 - 1</code></td><td>1B</td></tr><tr><td>short</td><td><code>-2^15</code> ~ <code>2^15 - 1</code></td><td>2B</td></tr><tr><td>int</td><td><code>-2^31</code> ~ <code>2^31 - 1</code></td><td>4B</td></tr><tr><td>long</td><td><code>-2^63</code> ~ <code>2^63 - 1</code></td><td>8B</td></tr><tr><td>float</td><td>$3.4\times10^{38}$，约 7 位小数</td><td>4B</td></tr><tr><td>double</td><td>$1.79\times10^{308}$，约 15 位小数</td><td>8B</td></tr><tr><td>boolean</td><td>true&#x2F;false</td><td>1B</td></tr><tr><td>char</td><td>1个字符（ASCII，Unicode）</td><td>2B</td></tr></tbody></table><ul><li><code>long</code>：以 <code>L</code> 结尾</li><li><code>float</code>：以 <code>f</code> 结尾</li><li><code>double</code>：以 <code>d</code> 结尾</li></ul><p>科学计数法：<code>e</code>或<code>E</code></p><p><strong>类型转换：</strong></p><ol><li>自动转换：<code>byte</code> -&gt; <code>short</code> -&gt; <code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></li><li>强制转换：<code>double</code> -&gt; <code>float</code> -&gt; <code>long</code> -&gt; <code>int</code> -&gt; <code>char</code> -&gt; <code>short</code> -&gt; <code>byte</code>（加括号）</li></ol><h1 id="条件-循环"><a href="#条件-循环" class="headerlink" title="条件 循环"></a>条件 循环</h1><ul><li><p>if…else</p></li><li><p>简写 <strong>if</strong>： <code>variable = (condition) ? expressionTrue :  expressionFalse;</code></p></li><li><p>switch</p></li><li><p>while</p></li><li><p>do…while</p></li><li><p>for</p></li><li><p>for each：专门用于遍历<strong>数组</strong>（或其他数据集）中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (type variableName : arrayName) &#123;</span><br><span class="line">  <span class="comment">// code block to be executed</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><p>创建：用<strong>方括号</strong>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] cars;</span><br><span class="line"><span class="type">int</span>[] myNum = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>, <span class="number">2</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>大小：<code>.length</code></p></li><li><p>遍历：</p><ul><li>for 循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cars.length; i++) &#123;</span><br><span class="line">  System.out.println(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for-each 循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String i : cars) &#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ol><li><p>创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] myNumbers = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; &#125;;</span><br></pre></td></tr></table></figure></li><li><p>遍历：</p><ul><li>for 循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] myNumbers = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; myNumbers.length; ++i) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; myNumbers[i].length; ++j) &#123;</span><br><span class="line">    System.out.println(myNumbers[i][j]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for-each 循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] myNumbers = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : myNumbers) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i : row) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><code>String</code> 变量包含一组用双引号括起来的字符</p><p>方法：</p><ul><li><p><code>length()</code>：字符串长度</p></li><li><p><code>toUpperCase()</code>：转换为大写</p></li><li><p><code>toLowerCase()</code>：转换为小写</p></li><li><p><code>indexOf(&quot;...&quot;)</code>：返回字符串中指定文本首次出现的<strong>索引</strong>（包括空格）</p></li><li><p><code>concat()</code>：连接两个字符串</p></li><li><p><code>+</code>：数字相加，字符串串联</p></li></ul><p>转义：</p><ul><li><code>\</code>：转换为普通字符串字符</li><li><code>\n</code>：换行</li><li><code>\t</code>：Tab</li><li><code>\r</code>：回车</li><li><code>\b</code>：退格</li><li><code>\f</code>：换页符</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown-LaTeX</title>
      <link href="/2025/01/23/2025-1-23-MarkDown-LaTeX/"/>
      <url>/2025/01/23/2025-1-23-MarkDown-LaTeX/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>支持到6级</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello, world!</strong></p><p><em>hello, world!</em></p><p><em><strong>hello, world!</strong></em></p><p><del>hello, world!</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>后端——Java</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><em>本地图片</em></p><style>.moherdsgvrbo{zoom: 50%;}</style><img src="/2025/01/23/2025-1-23-MarkDown-LaTeX/LofiSu1.jpg" class="moherdsgvrbo" alt="LofiSu1"><p><em>网络图片</em></p><img src="https://source.fomal.cc/img/default_cover_13.webp" alt="网络图片" style="zoom:50%;" /><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="%5Bzerd1y-blog%5D(https://www.zerd1y.com/)">点击跳转到我的博客</a></p><p><em>markdown无法直接跳转，但是写入网站可以跳转</em></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>有序号的排序</li><li>B</li><li>C</li></ol><ul><li>“-“号空格</li><li>B</li><li>C</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>name</th><th>sex</th><th>birthday</th></tr></thead><tbody><tr><td>zerd1y</td><td>male</td><td>2006.8.16</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>hello</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><p>点击左下角<code>&lt;/&gt;</code>，可进入源码模式</p><h2 id="渲染LaTeX语法"><a href="#渲染LaTeX语法" class="headerlink" title="渲染LaTeX语法"></a>渲染LaTeX语法</h2><p>Typora 需要 <strong>开启数学公式支持</strong> 才能正确渲染 LaTeX 语法</p><ul><li>打开Typora，左上角<code>文件</code> -&gt; <code>偏好设置</code></li><li>在<code>Markdown</code>选项下，找到<code>内联数学</code>并勾选它</li><li>关闭设置窗口，重新打开Typora</li></ul><h1 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h1><p><a href="https://blog.csdn.net/weixin_43301333/article/details/106365391?fromshare=blogdetail&sharetype=blogdetail&sharerId=106365391&sharerefer=PC&sharesource=zerd1y&sharefrom=from_link">LaTeX教程</a></p><p><em>因为LaTeX本地软件保太大了，所以我用 <strong>overleaf</strong> 编辑</em></p><h2 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h2><ol><li><p>菜单：</p><ul><li>编译器：修改为<code>XeLaTeX</code>或<code>LuaLaTeX</code></li><li>关闭拼写检查</li></ul></li><li><p>文本最上方导包：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2025/01/04/2025-1-4-My-First-Blog/"/>
      <url>/2025/01/04/2025-1-4-My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>今天是2025-1-4，大一上的期末周<br>每到期末周课就少起来了，对这一点我还感到挺开心的，就是考试和出成绩的时候会有些痛苦</p><p>至于为什么诞生了这篇博客：<br>1.自学后端开发的时候，b站大学的老师建议我搭建个人blog，来记录自己的计算机开发学习经历，感觉这还挺酷的<br>2.对于我们计算机学生而言，有三张脸：个人web（blog），GitHub，LinkedIn。<br>这三张脸是我们面对社会的最直接的脸面，无论是教授&#x2F;学者&#x2F;ceo&#x2F;cto，还是hr&#x2F;同事&#x2F;同学，他们都能通过这3张脸来认识你，了解你的兴趣，技术栈，个人能力，项目，paper等等。同时，我们展示这三张脸来向社会展示自己的能力，以争取工作&#x2F;研究学术&#x2F;创业的机会。<br>3.看到前辈的一些个人web，感觉好好看，单纯喜欢想自己做一个。</p><p>希望自己能坚持下来，不在于有多宏伟，多频繁的产出，但希望自己能在这里记录我学到的一些知识，一些看法，一些碎碎念，成为我这些年来的记忆。</p><p>文笔不好，事实上在现实生活中我本身就不是巧嘴滑舌的人<br>对我而言，仅仅只是作为一些记录<br>如果能对你有一点点的帮助，那再好不过了。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
